;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-327F-7274-B7			    |
; |			       ESET spol. s r.o.			    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	67BD829482D9F4E1D26E7BE4C15D713A
; Input	CRC32 :	075C8CB8

; ---------------------------------------------------------------------------
; File Name   :	D:\VStudio-Programme\VC2010\SMPSPlay\SMPS_Lib\Z80Drvs\DAC\Type2\Sonic and Crackers (Beta).bin
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 1216h Loaded length: 1216h

; Processor	  : z80	[]
; Target assembler: Zilog Macro	Assembler

; ===========================================================================

; Segment type:	Regular

		save
		phase	0
		cpu z80
		listing purecode
		
soundqueue0:	= 1C0Ah
ym2612_a0:	= 4000h
ym2612_d0:	= 4001h
ym2612_a1:	= 4002h
ym2612_d1:	= 4003h

loc_0:
		di
		di
		im	1
		jp	InitDriver
; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


ReadPtrTable:				; CODE XREF: RAM:005Ep
					; TrkUpdate_Proc+39p ...
		ld	c, a
		ld	b, 0
		add	hl, bc
		add	hl, bc
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ret
; End of function ReadPtrTable

; ---------------------------------------------------------------------------
		align 8

; =============== S U B	R O U T	I N E =======================================


WriteFMIorII:				; CODE XREF: SendFMFreq+Fp
					; SendFMFreq+13p ...

; FUNCTION CHUNK AT 002E SIZE 00000002 BYTES

		bit	2, (ix+0)
		ret	nz
		add	a, (ix+1)
		bit	2, (ix+1)
		jr	nz, WriteFMIIPart
; End of function WriteFMIorII


; =============== S U B	R O U T	I N E =======================================


WriteFMI:				; CODE XREF: RAM:0051p	SendFMFreq+37p	...
		ld	(ym2612_a0), a
		ld	a, c
		ld	(ym2612_d0), a
		ret
; End of function WriteFMI

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR WriteFMIorII

WriteFMIIPart:				; CODE XREF: WriteFMIorII+Cj
		sub	4
; END OF FUNCTION CHUNK	FOR WriteFMIorII

; =============== S U B	R O U T	I N E =======================================


WriteFMII:				; CODE XREF: DoPause+139p
		ld	(ym2612_a1), a
		ld	a, c
		ld	(ym2612_d1), a
		ret
; End of function WriteFMII

; ---------------------------------------------------------------------------

VInt:
		di
		push	af
		push	iy
		exx
		call	DoSoundQueue
		call	UpdateAll
		ld	a, (1C3Ch)
		or	a
		jp	z, loc_AB
		jp	m, loc_95
		ld	a, 2Bh
		ld	c, 80h
		call	WriteFMI
		ld	hl, 1C3Ch
		ld	a, (hl)
		dec	a
		set	7, (hl)
		ld	hl, DACTablePtrs
		rst	ReadPtrTable
		ld	c, 80h
		ld	a, (hl)
		ld	(DACLoop+1), a
		ld	(loc_F11+1), a
		inc	hl
		ld	a, (hl)
		ld	(1C05h), a
		inc	hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		exx
		ld	hl, 1C05h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		exx
		pop	iy
		pop	af
		pop	af
		jp	loc_EED
; ---------------------------------------------------------------------------

loc_95:					; CODE XREF: RAM:004Aj
		ld	hl, 1C05h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a

loc_AB:					; CODE XREF: RAM:0047j
		exx
		pop	iy
		pop	af
		ld	b, 1
		ret
; ---------------------------------------------------------------------------

InitDriver:				; CODE XREF: RAM:0004j
		ld	sp, 2000h
		ld	c, 0

loc_B7:					; CODE XREF: RAM:00BCj
		ld	b, 0

loc_B9:					; CODE XREF: RAM:loc_B9j
		djnz	$
		dec	c
		jr	nz, loc_B7
		call	StopAllSound
		ld	a, 2
		ld	(1C04h), a
		ld	a, 4
		ld	(1C05h), a
		ld	hl, 1C05h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	iy, DPCMData
		ei
		jp	loc_EE5

; =============== S U B	R O U T	I N E =======================================


UpdateAll:				; CODE XREF: RAM:0040p
		call	DoPause
		call	DoTempo
		call	DoFading
		call	PlaySoundID
		call	UpdateSFXTracks
		xor	a
		ld	(1C19h), a	; 00 - Music Mode
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	ix, 1C40h
		bit	7, (ix+0)
		call	nz, DrumUpdateTrack
		ld	b, 9
		ld	ix, 1C70h
		jr	TrkUpdateLoop
; End of function UpdateAll


; =============== S U B	R O U T	I N E =======================================


UpdateSFXTracks:			; CODE XREF: UpdateAll+Cp
		ld	a, 1
		ld	(1C19h), a	; 01 - SFX Mode
		ld	hl, 6000h	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	ix, 1E20h
		ld	b, 7
		call	TrkUpdateLoop
		ld	a, 80h
		ld	(1C19h), a	; 80 - Special SFX Mode
		ld	b, 1
		ld	ix, 1F70h
; End of function UpdateSFXTracks


; =============== S U B	R O U T	I N E =======================================


TrkUpdateLoop:				; CODE XREF: UpdateAll+3Aj
					; UpdateSFXTracks+1Ap ...
		push	bc
		bit	7, (ix+0)
		call	nz, UpdateTrack
		ld	de, 30h
		add	ix, de
		pop	bc
		djnz	TrkUpdateLoop
		ret
; End of function TrkUpdateLoop


; =============== S U B	R O U T	I N E =======================================


UpdateTrack:				; CODE XREF: TrkUpdateLoop+5p

; FUNCTION CHUNK AT 02D7 SIZE 00000019 BYTES
; FUNCTION CHUNK AT 0E1F SIZE 00000073 BYTES

		bit	7, (ix+1)
		jp	nz, UpdatePSGTrk
		call	TrackTimeout
		jr	nz, loc_181
		call	TrkUpdate_Proc
		bit	4, (ix+0)
		ret	nz
		call	PrepareModulat
		call	DoPitchSlide	; also updates the frequency
		call	DoModulation
		call	SendFMFreq
		jp	DoNoteOn
; ---------------------------------------------------------------------------

loc_181:				; CODE XREF: UpdateTrack+Aj
		call	ExecPanAnim
		bit	4, (ix+0)
		ret	nz
		call	DoFMVolEnv
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_198
		dec	(ix+1Eh)
		jp	z, DoNoteOff

loc_198:				; CODE XREF: UpdateTrack+32j
		call	DoPitchSlide
		bit	6, (ix+0)
		ret	nz
		call	DoModulation
; End of function UpdateTrack


; =============== S U B	R O U T	I N E =======================================


SendFMFreq:				; CODE XREF: UpdateTrack+1Dp
		bit	2, (ix+0)
		ret	nz
		bit	0, (ix+0)
		jp	nz, loc_1B8

loc_1AF:				; CODE XREF: SendFMFreq+1Aj
		ld	a, 0A4h
		ld	c, h
		rst	WriteFMIorII
		ld	a, 0A0h
		ld	c, l
		rst	WriteFMIorII
		ret
; ---------------------------------------------------------------------------

loc_1B8:				; CODE XREF: SendFMFreq+9j
		ld	a, (ix+1)
		cp	2
		jr	nz, loc_1AF
		call	GetFM3FreqPtr
		ld	b, 4
		ld	hl, SpcFM3Regs

loc_1C7:				; CODE XREF: SendFMFreq+43j
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ex	de, hl
		ld	c, (hl)
		inc	hl
		ld	b, (hl)
		inc	hl
		ex	de, hl
		ld	l, (ix+0Dh)
		ld	h, (ix+0Eh)
		add	hl, bc
		push	af
		ld	c, h
		call	WriteFMI
		pop	af
		sub	4
		ld	c, l
		call	WriteFMI
		pop	hl
		pop	bc
		djnz	loc_1C7
		ret
; End of function SendFMFreq

; ---------------------------------------------------------------------------
SpcFM3Regs:	db 0ADh, 0AEh, 0ACh, 0A6h ; DATA XREF: SendFMFreq+21o

; =============== S U B	R O U T	I N E =======================================


GetFM3FreqPtr:				; CODE XREF: SendFMFreq+1Cp RAM:0D58p
		ld	de, 1C2Ah
		ld	a, (1C19h)
		or	a
		ret	z		; Music	Mode (00) - 1C2A
		ld	de, 1C1Ah
		ret	p		; Special SFX Mode (80)	- 1C1A
		ld	de, 1C22h
		ret			; SFX Mode (01)	- 1C22
; End of function GetFM3FreqPtr


; =============== S U B	R O U T	I N E =======================================


TrkUpdate_Proc:				; CODE XREF: UpdateTrack+Cp
					; UpdateTrack+CC6p
		ld	e, (ix+3)
		ld	d, (ix+4)
		res	1, (ix+0)
		res	4, (ix+0)

loc_20B:				; CODE XREF: RAM:0A65j
		ld	a, (de)
		inc	de
		cp	0E0h
		jp	nc, cfHandler
		ex	af, af'
		call	DoNoteOff
		call	DoPanAnimation
		ex	af, af'
		bit	3, (ix+0)
		jp	nz, DoRawFreqMode
		or	a
		jp	p, SetDuration
		sub	81h
		jp	p, GetNote
		call	SetRest
		jr	loc_25D
; ---------------------------------------------------------------------------

GetNote:				; CODE XREF: TrkUpdate_Proc+2Aj
		add	a, (ix+5)
		ld	hl, PSGFreqs
		push	af
		rst	ReadPtrTable
		pop	af
		bit	7, (ix+1)
		jr	nz, loc_257
		push	de
		ld	d, 8
		ld	e, 0Ch
		ex	af, af'
		xor	a

loc_245:				; CODE XREF: TrkUpdate_Proc+4Ej
		ex	af, af'
		sub	e
		jr	c, loc_24E
		ex	af, af'
		add	a, d
		jr	loc_245
; ---------------------------------------------------------------------------
		ex	af, af'

loc_24E:				; CODE XREF: TrkUpdate_Proc+4Aj
		add	a, e
		ld	hl, FMFreqs
		rst	ReadPtrTable
		ex	af, af'
		or	h
		ld	h, a
		pop	de

loc_257:				; CODE XREF: TrkUpdate_Proc+3Fj
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h

loc_25D:				; CODE XREF: TrkUpdate_Proc+30j
		bit	5, (ix+0)
		jr	nz, loc_270
		ld	a, (de)
		or	a
		jp	p, loc_29C
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jr	loc_2A3
; ---------------------------------------------------------------------------

loc_270:				; CODE XREF: TrkUpdate_Proc+64j
		ld	a, (de)
		inc	de
		ld	(ix+10h), a
		jr	loc_29B
; ---------------------------------------------------------------------------

DoRawFreqMode:				; CODE XREF: TrkUpdate_Proc+21j
		ld	h, a
		ld	a, (de)
		inc	de
		ld	l, a
		or	h
		jr	z, loc_28A
		ld	a, (ix+5)
		ld	b, 0
		or	a
		jp	p, loc_288
		dec	b

loc_288:				; CODE XREF: TrkUpdate_Proc+87j
		ld	c, a
		add	hl, bc

loc_28A:				; CODE XREF: TrkUpdate_Proc+7Fj
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h
		bit	5, (ix+0)
		jr	z, loc_29B
		ld	a, (de)
		inc	de
		ld	(ix+10h), a

loc_29B:				; CODE XREF: TrkUpdate_Proc+78j
					; TrkUpdate_Proc+97j
		ld	a, (de)

loc_29C:				; CODE XREF: TrkUpdate_Proc+68j
		inc	de

SetDuration:				; CODE XREF: TrkUpdate_Proc+25j
					; DrumUpdate_Proc+40j
		call	TickMultiplier
		ld	(ix+0Ch), a

loc_2A3:				; CODE XREF: TrkUpdate_Proc+71j
					; DrumUpdate_Proc+4Aj
		ld	(ix+3),	e
		ld	(ix+4),	d
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		bit	1, (ix+0)
		ret	nz
		xor	a
		ld	(ix+25h), a
		ld	(ix+22h), a
		ld	(ix+17h), a
		ld	a, (ix+1Fh)
		ld	(ix+1Eh), a
		ret
; End of function TrkUpdate_Proc


; =============== S U B	R O U T	I N E =======================================


TickMultiplier:				; CODE XREF: TrkUpdate_Proc:SetDurationp
					; RAM:cfE8_NoteStopp
		ld	b, (ix+2)
		dec	b
		ret	z
		ld	c, a

loc_2CB:				; CODE XREF: TickMultiplier+7j
		add	a, c
		djnz	loc_2CB
		ret
; End of function TickMultiplier


; =============== S U B	R O U T	I N E =======================================


TrackTimeout:				; CODE XREF: UpdateTrack+7p
					; DrumUpdateTrackp ...
		ld	a, (ix+0Bh)
		dec	a
		ld	(ix+0Bh), a
		ret
; End of function TrackTimeout

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR UpdateTrack

DoNoteOn:				; CODE XREF: UpdateTrack+20j
		ld	a, (ix+0Dh)
		or	(ix+0Eh)
		ret	z
		ld	a, (ix+0)
		and	6
		ret	nz
		ld	a, (ix+1)
		or	0F0h
		ld	c, a
		ld	a, 28h
		call	WriteFMI
		ret
; END OF FUNCTION CHUNK	FOR UpdateTrack

; =============== S U B	R O U T	I N E =======================================


DoNoteOff:				; CODE XREF: UpdateTrack+37j
					; TrkUpdate_Proc+16p ...
		ld	a, (ix+0)
		and	6
		ret	nz

SendNoteOff:				; CODE XREF: RAM:0DBBp
		ld	c, (ix+1)
		bit	7, c
		ret	nz
; End of function DoNoteOff

; START	OF FUNCTION CHUNK FOR SilenceFMChn

FMNoteOff:				; CODE XREF: SilenceFMChn+Dj
		ld	a, 28h
		call	WriteFMI
		res	6, (ix+0)
		ret
; END OF FUNCTION CHUNK	FOR SilenceFMChn

; =============== S U B	R O U T	I N E =======================================


DoPanAnimation:				; CODE XREF: TrkUpdate_Proc+19p
		ld	a, (ix+11h)
		dec	a
		ret	m
		jr	nz, loc_34C
		bit	1, (ix+0)
		ret	nz

loc_312:				; CODE XREF: ExecPanAnim+6j
		dec	(ix+16h)
		ret	nz
		push	bc
		push	de
		push	hl
		ld	a, (ix+15h)
		ld	(ix+16h), a
		ld	a, (ix+12h)
		ld	hl, PanAniPtrList
		rst	ReadPtrTable
		ld	e, (ix+13h)
		inc	(ix+13h)
		ld	a, (ix+14h)
		dec	a
		cp	e
		jr	nz, loc_341
		dec	(ix+13h)
		ld	a, (ix+11h)
		cp	2
		jr	z, loc_341
		ld	(ix+13h), 0

loc_341:				; CODE XREF: DoPanAnimation+2Bj
					; DoPanAnimation+35j
		ld	d, 0
		add	hl, de
		ex	de, hl
		call	cfE0_Pan
		pop	hl
		pop	de
		pop	bc
		ret
; ---------------------------------------------------------------------------

loc_34C:				; CODE XREF: DoPanAnimation+5j
		xor	a
		ld	(ix+13h), a
; End of function DoPanAnimation


; =============== S U B	R O U T	I N E =======================================


ExecPanAnim:				; CODE XREF: UpdateTrack:loc_181p
		ld	a, (ix+11h)
		sub	2
		ret	m
		jr	loc_312
; End of function ExecPanAnim

; ---------------------------------------------------------------------------
PanAniPtrList:	dw byte_360, byte_361, byte_362, byte_363 ; DATA XREF: DoPanAnimation+1Co
byte_360:	db 0C0h			; DATA XREF: RAM:PanAniPtrListo
byte_361:	db  80h			; DATA XREF: RAM:PanAniPtrListo
byte_362:	db 0C0h			; DATA XREF: RAM:PanAniPtrListo
byte_363:	db  40h,0C0h, 80h	; DATA XREF: RAM:PanAniPtrListo

; =============== S U B	R O U T	I N E =======================================


DoFMVolEnv:				; CODE XREF: UpdateTrack+2Bp
		ld	a, (ix+18h)
		or	a
		ret	z
		ret	m
		dec	a
		ld	hl, VolEnvPtrs
		rst	ReadPtrTable
		call	DoPSGVolEnv
		ld	h, (ix+1Dh)
		ld	l, (ix+1Ch)
		ld	de, Volume_Ops
		ld	b, 4
		ld	c, (ix+19h)

loc_382:				; CODE XREF: DoFMVolEnv+2Cj
		push	af
		sra	c
		push	bc
		jr	nc, loc_38E
		add	a, (hl)
		and	7Fh
		ld	c, a
		ld	a, (de)
		rst	WriteFMIorII

loc_38E:				; CODE XREF: DoFMVolEnv+20j
		pop	bc
		inc	de
		inc	hl
		pop	af
		djnz	loc_382
		ret
; End of function DoFMVolEnv


; =============== S U B	R O U T	I N E =======================================


PrepareModulat:				; CODE XREF: UpdateTrack+14p
					; UpdateTrack+CCEp
		bit	7, (ix+7)
		ret	z
		bit	1, (ix+0)
		ret	nz
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	ix
		pop	hl
		ld	b, 0
		ld	c, 24h
		add	hl, bc
		ex	de, hl
		ldi
		ldi
		ldi
		ld	a, (hl)
		srl	a
		ld	(de), a
		xor	a
		ld	(ix+22h), a
		ld	(ix+23h), a
		ret
; End of function PrepareModulat


; =============== S U B	R O U T	I N E =======================================


DoModulation:				; CODE XREF: UpdateTrack+1Ap
					; UpdateTrack+42p ...
		ld	a, (ix+7)
		or	a
		ret	z
		cp	80h
		jr	nz, DoModEnv
		dec	(ix+24h)
		ret	nz
		inc	(ix+24h)
		push	hl
		ld	l, (ix+22h)
		ld	h, (ix+23h)
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	de
		pop	iy
		dec	(ix+25h)
		jr	nz, loc_3FC
		ld	a, (iy+1)
		ld	(ix+25h), a
		ld	a, (ix+26h)
		ld	c, a
		and	80h
		rlca
		neg
		ld	b, a
		add	hl, bc
		ld	(ix+22h), l
		ld	(ix+23h), h

loc_3FC:				; CODE XREF: DoModulation+23j
		pop	bc
		add	hl, bc
		dec	(ix+27h)
		ret	nz
		ld	a, (iy+3)
		ld	(ix+27h), a

loc_408:
		ld	a, (ix+26h)
		neg

loc_40D:
		ld	(ix+26h), a
		ret
; ---------------------------------------------------------------------------

DoModEnv:				; CODE XREF: DoModulation+7j
		dec	a
		ex	de, hl
		ld	hl, ModEnvPtrs
		rst	ReadPtrTable
		jr	loc_41C
; ---------------------------------------------------------------------------

loc_419:				; CODE XREF: DoModulation+82j
					; DoModulation+85j
		ld	(ix+25h), a

loc_41C:				; CODE XREF: DoModulation+57j
					; DoModulation+95j
		push	hl
		ld	c, (ix+25h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jp	z, ModEnv_Positive
		cp	82h
		jr	z, ModEnv_Jump2Idx ; 82	xx - jump to byte xx
		cp	80h
		jr	z, ModEnv_Reset	; 80 - loop back to beginning
		cp	84h
		jr	z, ModEnv_ChgMult ; 84 xx - change Modulation Multipler
		ld	h, 0FFh		; make HL negative (FFxx)
		jr	nc, ModEnv_Next
		set	6, (ix+0)
		pop	hl
		ret
; ---------------------------------------------------------------------------

ModEnv_Jump2Idx:			; CODE XREF: DoModulation+6Cj
		inc	bc
		ld	a, (bc)
		jr	loc_419
; ---------------------------------------------------------------------------

ModEnv_Reset:				; CODE XREF: DoModulation+70j
		xor	a
		jr	loc_419
; ---------------------------------------------------------------------------

ModEnv_ChgMult:				; CODE XREF: DoModulation+74j
		inc	bc
		ld	a, (bc)
		add	a, (ix+22h)
		ld	(ix+22h), a
		inc	(ix+25h)
		inc	(ix+25h)
		jr	loc_41C
; ---------------------------------------------------------------------------

ModEnv_Positive:			; CODE XREF: DoModulation+67j
		ld	h, 0		; make HL positive (00xx)

ModEnv_Next:				; CODE XREF: DoModulation+78j
		ld	l, a
		ld	b, (ix+22h)
		inc	b
		ex	de, hl

loc_45F:				; CODE XREF: DoModulation+A0j
		add	hl, de
		djnz	loc_45F
		inc	(ix+25h)
		ret
; End of function DoModulation


; =============== S U B	R O U T	I N E =======================================


DoPitchSlide:				; CODE XREF: UpdateTrack+17p
					; UpdateTrack:loc_198p	...
		ld	b, 0
		ld	a, (ix+10h)
		or	a
		jp	p, loc_470
		dec	b

loc_470:				; CODE XREF: DoPitchSlide+6j
		ld	h, (ix+0Eh)
		ld	l, (ix+0Dh)
		ld	c, a
		add	hl, bc
		bit	7, (ix+1)
		jr	nz, loc_4A0
		ex	de, hl
		ld	a, 7
		and	d
		ld	b, a
		ld	c, e
		or	a
		ld	hl, 283h
		sbc	hl, bc
		jr	c, loc_492
		ld	hl, -57Bh
		add	hl, de
		jr	loc_4A0
; ---------------------------------------------------------------------------

loc_492:				; CODE XREF: DoPitchSlide+24j
		or	a
		ld	hl, 508h
		sbc	hl, bc
		jr	nc, loc_49F
		ld	hl, 57Ch
		add	hl, de
		ex	de, hl

loc_49F:				; CODE XREF: DoPitchSlide+32j
		ex	de, hl

loc_4A0:				; CODE XREF: DoPitchSlide+16j
					; DoPitchSlide+2Aj
		bit	5, (ix+0)
		ret	z
		ld	(ix+0Eh), h
		ld	(ix+0Dh), l
		ret
; End of function DoPitchSlide


; =============== S U B	R O U T	I N E =======================================


GetFMInsPtr:				; CODE XREF: SetInsFromSong+1Bp
		ld	hl, (1C37h)
		ld	a, (1C19h)
		or	a
		jr	z, JumpToInsData ; Mode	00 (Music Mode)	- jump
		ld	l, (ix+2Ah)	; load SFX track Instrument Pointer (Trk+2A/2B)
		ld	h, (ix+2Bh)
; End of function GetFMInsPtr


; =============== S U B	R O U T	I N E =======================================


JumpToInsData:				; CODE XREF: GetFMInsPtr+7j
					; SetInsFromSong+14p ...
		xor	a
		or	b
		ret	z
		ld	de, 19h

loc_4C1:				; CODE XREF: JumpToInsData+7j
		add	hl, de
		djnz	loc_4C1
		ret
; End of function JumpToInsData

; ---------------------------------------------------------------------------
FMInsOperators:	db 0B0h			; DATA XREF: SendFMInso
		db  30h, 38h, 34h, 3Ch
		db  50h, 58h, 54h, 5Ch
		db  60h, 68h, 64h, 6Ch
		db  70h, 78h, 74h, 7Ch
		db  80h, 88h, 84h, 8Ch
Volume_Ops:	db  40h, 48h, 44h, 4Ch	; DATA XREF: DoFMVolEnv+14o
					; RefreshVolume+1o
SSGEG_Ops:	db  90h, 98h, 94h, 9Ch	; DATA XREF: Sends.bSGEGo

; =============== S U B	R O U T	I N E =======================================


SendFMIns:				; CODE XREF: SetInsFromSong:loc_BC4p
					; PlaySoundID+769p
		ld	de, FMInsOperators
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII
		call	WriteInsReg
		ld	(ix+1Bh), a
		ld	b, 14h

loc_4F3:				; CODE XREF: SendFMIns+14j
		call	WriteInsReg
		djnz	loc_4F3
		ld	(ix+1Ch), l
		ld	(ix+1Dh), h
		jp	RefreshVolume
; End of function SendFMIns


; =============== S U B	R O U T	I N E =======================================


WriteInsReg:				; CODE XREF: SendFMIns+9p
					; SendFMIns:loc_4F3p
		ld	a, (de)
		inc	de
		ld	c, (hl)
		inc	hl
		rst	WriteFMIorII
		ret
; End of function WriteInsReg


; =============== S U B	R O U T	I N E =======================================


PlaySoundID:				; CODE XREF: UpdateAll+9p

; FUNCTION CHUNK AT 061F SIZE 000000B8 BYTES
; FUNCTION CHUNK AT 0BE7 SIZE 000000C4 BYTES

		ld	a, (1C09h)
		bit	7, a
		jp	z, StopAllSound	; 00-7F	- Stop All
		cp	0A0h
		jp	c, zPlayMusic	; 80-9F	- Music
		cp	0B0h
		jp	c, PlaySFX	; 90-9F	- SFX
		cp	0E0h
		jp	c, PlaySpcSFX	; B0-DF	- Special SFX
		cp	0F9h
		jp	nc, StopAllSound

PlaySnd_Command:
		sub	0E0h
		ld	hl, CmdPtrTable
		rst	ReadPtrTable
		xor	a
		ld	(1C18h), a
		jp	(hl)
; ---------------------------------------------------------------------------
CmdPtrTable:				; DATA XREF: PlaySoundID+1Eo
		dw FadeOutMusic, StopAllSound, SilencePSG, FadeInMusic
; ---------------------------------------------------------------------------

FadeInMusic:				; DATA XREF: PlaySoundID:CmdPtrTableo
		ld	ix, 1F70h
		ld	b, 2
		ld	a, 80h
		ld	(1C19h), a

loc_541:				; CODE XREF: PlaySoundID+48j
		push	bc
		bit	7, (ix+0)
		call	nz, loc_552
		ld	de, 30h
		add	ix, de
		pop	bc
		djnz	loc_541
		ret
; ---------------------------------------------------------------------------

loc_552:				; CODE XREF: PlaySoundID+3Fp
		push	hl
		push	hl
		jp	cfF2_StopTrk
; ---------------------------------------------------------------------------

zPlayMusic:				; CODE XREF: PlaySoundID+Aj
		sub	81h
		ret	m
		ex	af, af'
		call	StopAllSound
		ex	af, af'
		push	af
		ld	hl, MusicBanks
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (hl)
		ld	(1C04h), a
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		pop	af
		ld	hl, MusicPtrs
		rst	ReadPtrTable
		push	hl
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(1C37h), hl
		pop	hl
		pop	iy
		ld	a, (iy+5)
		ld	(1C13h), a
		ld	(1C14h), a
		ld	de, 6
		add	hl, de
		ld	(1C33h), hl
		ld	hl, FMInitBytes
		ld	(1C35h), hl
		ld	de, 1C40h
		ld	b, (iy+2)
		ld	a, (iy+4)

loc_5B2:				; CODE XREF: PlaySoundID+CAj
		push	bc
		ld	hl, (1C35h)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(1C35h), hl
		ld	hl, (1C33h)
		ldi
		ldi
		ldi
		ldi
		ld	(1C33h), hl
		call	FinishFMTrkInit
		pop	bc
		djnz	loc_5B2
		ld	a, (iy+3)
		or	a
		jp	z, ClearSoundID
		ld	b, a
		ld	hl, PSGInitBytes
		ld	(1C35h), hl
		ld	de, 1D90h
		ld	a, (iy+4)

loc_5E7:				; CODE XREF: PlaySoundID+FCj
		push	bc
		ld	hl, (1C35h)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(1C35h), hl
		ld	hl, (1C33h)
		ld	bc, 6
		ldir
		ld	(1C33h), hl
		call	FinishTrkInit
		pop	bc
		djnz	loc_5E7
; End of function PlaySoundID

; START	OF FUNCTION CHUNK FOR StopAllSound

ClearSoundID:				; CODE XREF: PlaySoundID+D0j
					; PlaySoundID+1CDj ...
		ld	a, 80h
		ld	(1C09h), a
		ret
; END OF FUNCTION CHUNK	FOR StopAllSound
; ---------------------------------------------------------------------------
FMInitBytes:	db  80h,   6		; DATA XREF: PlaySoundID+9Co
					; StopAllSound+Do
		db  80h,   0
		db  80h,   1
		db  80h,   2
		db  80h,   4
		db  80h,   5
		db  80h,   6
PSGInitBytes:	db  80h, 80h		; DATA XREF: PlaySoundID+D4o
		db  80h,0A0h
		db  80h,0C0h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR PlaySoundID

PlaySpcSFX:				; CODE XREF: PlaySoundID+14j
		ex	af, af'
		ld	hl, 6000h	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ex	af, af'
		sub	0D0h
		ex	af, af'
		ld	a, 80h
		ld	hl, SpcSFXPtrs
		jr	loc_652
; ---------------------------------------------------------------------------

PlaySFX:				; CODE XREF: PlaySoundID+Fj
		ex	af, af'
		ld	hl, 6000h	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ex	af, af'
		sub	0A0h
		ex	af, af'
		xor	a
		ld	hl, SFXPtrs

loc_652:				; CODE XREF: PlaySoundID+131j
		ld	(1C19h), a
		ex	af, af'
		rst	ReadPtrTable
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(1C39h), hl
		xor	a
		ld	(1C15h), a
		pop	hl
		push	hl
		pop	iy
		ld	a, (iy+2)
		ld	(1C3Bh), a
		ld	de, 4
		add	hl, de
		ld	b, (iy+3)

loc_674:				; CODE XREF: PlaySoundID+1CBj
		push	bc
		push	hl
		inc	hl
		ld	c, (hl)
		call	GetSFXChnPtrs
		set	2, (hl)
		push	ix
		ld	a, (1C19h)
		or	a
		jr	z, loc_688
		pop	hl
		push	iy

loc_688:				; CODE XREF: PlaySoundID+17Cj
		pop	de
		pop	hl
		ldi
		ld	a, (de)
		cp	2
		call	z, ResetSpcFM3Mode
		ldi
		ld	a, (1C3Bh)
		ld	(de), a
		inc	de
		ldi
		ldi
		ldi
		ldi
		call	FinishFMTrkInit
		bit	7, (ix+0)
		jr	z, loc_6B6
		ld	a, (ix+1)
		cp	(iy+1)
		jr	nz, loc_6B6
		set	2, (iy+0)

loc_6B6:				; CODE XREF: PlaySoundID+1A1j
					; PlaySoundID+1A9j
		push	hl
		ld	hl, (1C39h)
		ld	a, (1C19h)
		or	a
		jr	z, loc_6C4
		push	iy
		pop	ix

loc_6C4:				; CODE XREF: PlaySoundID+1B7j
		ld	(ix+2Ah), l
		ld	(ix+2Bh), h
		call	DoNoteOff
		call	DisableSSGEG
		pop	hl
		pop	bc
		djnz	loc_674
		jp	ClearSoundID
; END OF FUNCTION CHUNK	FOR PlaySoundID

; =============== S U B	R O U T	I N E =======================================


GetSFXChnPtrs:				; CODE XREF: PlaySoundID+171p
					; PlaySoundID+6F1p
		bit	7, c
		jr	nz, loc_6E3
		ld	a, c
		bit	2, a
		jr	z, loc_6FA
		dec	a
		jr	loc_6FA
; ---------------------------------------------------------------------------

loc_6E3:				; CODE XREF: GetSFXChnPtrs+2j
		ld	a, 1Fh
		call	SilencePSGChn
		ld	a, 0FFh
		ld	(7F11h), a
		ld	a, c
		srl	a
		srl	a
		srl	a
		srl	a
		srl	a
		add	a, 2

loc_6FA:				; CODE XREF: GetSFXChnPtrs+7j
					; GetSFXChnPtrs+Aj
		sub	2
		ld	(1C32h), a
		push	af
		ld	hl, SFXChnPtrs
		rst	ReadPtrTable
		push	hl
		pop	ix		; IX - SFX Track
		pop	af
		push	af
		ld	hl, SpcSFXChnPtrs
		rst	ReadPtrTable
		push	hl
		pop	iy		; IY - Special SFX Track
		pop	af
		ld	hl, BGMChnPtrs
		rst	ReadPtrTable	; HL - Music Track
		ret
; End of function GetSFXChnPtrs


; =============== S U B	R O U T	I N E =======================================


FinishFMTrkInit:			; CODE XREF: PlaySoundID+C6p
					; PlaySoundID+19Ap
		ex	af, af'
		xor	a
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ex	af, af'
; End of function FinishFMTrkInit


; =============== S U B	R O U T	I N E =======================================


FinishTrkInit:				; CODE XREF: PlaySoundID+F8p
		ex	de, hl
		ld	(hl), 30h
		inc	hl
		ld	(hl), 0C0h
		inc	hl
		ld	(hl), 1
		ld	b, 24h

loc_728:				; CODE XREF: FinishTrkInit+Ej
		inc	hl
		ld	(hl), 0
		djnz	loc_728
		inc	hl
		ex	de, hl
		ret
; End of function FinishTrkInit

; ---------------------------------------------------------------------------
SpcSFXChnPtrs:	dw  1F70h, 1F70h, 1F70h, 1F70h,	1F70h, 1F70h, 1F70h, 1F70h
					; DATA XREF: GetSFXChnPtrs+32o
SFXChnPtrs:	dw  1E20h, 1E50h, 1E80h, 1EB0h,	1EE0h, 1F10h, 1F40h, 1F40h
					; DATA XREF: GetSFXChnPtrs+29o
BGMChnPtrs:	dw  1CD0h, 1D00h, 1D30h, 1D60h,	1D90h, 1DC0h, 1DF0h, 1DF0h
					; DATA XREF: GetSFXChnPtrs+3Ao

; =============== S U B	R O U T	I N E =======================================


DoPause:				; CODE XREF: UpdateAllp

; FUNCTION CHUNK AT 0881 SIZE 0000002F BYTES

		ld	hl, 1C10h
		ld	a, (hl)
		or	a
		ret	z
		jp	m, UnpauseMusic
		pop	de
		dec	a
		ret	nz
		ld	(hl), 2
		jp	SilenceAll
; ---------------------------------------------------------------------------

UnpauseMusic:				; CODE XREF: DoPause+6j
		xor	a
		ld	(hl), a
		ld	a, (1C0Dh)
		or	a
		jp	nz, StopAllSound
		ld	ix, 1C40h
		ld	b, 7

loc_780:				; CODE XREF: DoPause+37j
		ld	a, (1C11h)
		or	a
		jr	nz, locb_78C
		bit	7, (ix+0)
		jr	z, loc_792

locb_78C:				; CODE XREF: DoPause+24j
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII

loc_792:				; CODE XREF: DoPause+2Aj
		ld	de, 30h
		add	ix, de
		djnz	loc_780
		ld	ix, 1E20h
		ld	b, 8

loc_79F:				; CODE XREF: DoPause+56j
		bit	7, (ix+0)
		jr	z, loc_7B1
		bit	7, (ix+1)
		jr	nz, loc_7B1
		ld	c, (ix+0Ah)
		ld	a, 0B4h
		rst	WriteFMIorII

loc_7B1:				; CODE XREF: DoPause+43j DoPause+49j
		ld	de, 30h
		add	ix, de
		djnz	loc_79F
		ret
; End of function DoPause

; ---------------------------------------------------------------------------

FadeOutMusic:				; DATA XREF: PlaySoundID:CmdPtrTableo
		ld	a, 28h
		ld	(1C0Dh), a
		ld	a, 6
		ld	(1C0Fh), a
		ld	(1C0Eh), a

; =============== S U B	R O U T	I N E =======================================


StopDrumPSG:				; CODE XREF: DoFading+6p
		xor	a
		ld	(1C40h), a
		ld	(1D60h), a
		ld	(1DF0h), a
		ld	(1D90h), a
		ld	(1DC0h), a
		jp	SilencePSG
; End of function StopDrumPSG


; =============== S U B	R O U T	I N E =======================================


DoFading:				; CODE XREF: UpdateAll+6p
		ld	hl, 1C0Dh
		ld	a, (hl)
		or	a
		ret	z
		call	m, StopDrumPSG
		res	7, (hl)
		ld	a, (1C0Fh)
		dec	a
		jr	z, loc_7EE
		ld	(1C0Fh), a
		ret
; ---------------------------------------------------------------------------

loc_7EE:				; CODE XREF: DoFading+Fj
		ld	a, (1C0Eh)
		ld	(1C0Fh), a
		ld	a, (1C0Dh)
		dec	a
		ld	(1C0Dh), a
		jr	z, StopAllSound
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	hl, 1C06h
		inc	(hl)
		ld	ix, 1C40h
		ld	b, 6

loc_81D:				; CODE XREF: DoFading+5Aj
		bit	7, (ix+0)
		jr	z, loc_82E
		bit	2, (ix+0)
		jr	nz, loc_82E
		push	bc
		call	RefreshVolume
		pop	bc

loc_82E:				; CODE XREF: DoFading+48j DoFading+4Ej
		ld	de, 30h
		add	ix, de
		djnz	loc_81D
		ret
; End of function DoFading


; =============== S U B	R O U T	I N E =======================================


StopAllSound:				; CODE XREF: RAM:00BEp	PlaySoundID+5j	...

; FUNCTION CHUNK AT 0605 SIZE 00000006 BYTES

		ld	hl, 1C09h
		ld	de, soundqueue0
		ld	bc, 396h
		ld	(hl), 0
		ldir
		ld	ix, FMInitBytes
		ld	b, 6

loc_849:				; CODE XREF: StopAllSound+1Fj
		push	bc
		call	SilenceFMChn
		call	DisableSSGEG
		inc	ix
		inc	ix
		pop	bc
		djnz	loc_849
		ld	b, 7
		xor	a
		ld	(1C06h), a
		ld	(1C3Ch), a
		ld	(1C0Dh), a
		call	SilencePSG
		ld	c, 0
		ld	a, 2Bh
		call	WriteFMI

ResetSpcFM3Mode:			; CODE XREF: PlaySoundID+188p
		xor	a
		ld	(1C12h), a
		ld	c, a
		ld	a, 27h
		call	WriteFMI
		jp	ClearSoundID
; End of function StopAllSound


; =============== S U B	R O U T	I N E =======================================


DisableSSGEG:				; CODE XREF: PlaySoundID+1C6p
					; StopAllSound+17p
		ld	a, 90h
		ld	c, 0
		jp	SendAllFMOps
; End of function DisableSSGEG

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DoPause

SilenceAll:				; CODE XREF: DoPause+Ej
		call	SilencePSG
		push	bc
		push	af
		ld	b, 3
		ld	a, 0B4h
		ld	c, 0

loc_88C:				; CODE XREF: DoPause+132j
		push	af
		call	WriteFMI
		pop	af
		inc	a
		djnz	loc_88C
		ld	b, 3
		ld	a, 0B4h

loc_898:				; CODE XREF: DoPause+13Ej
		push	af
		call	WriteFMII
		pop	af
		inc	a
		djnz	loc_898
		ld	c, 0
		ld	b, 7
		ld	a, 28h

loc_8A6:				; CODE XREF: DoPause+14Cj
		push	af
		call	WriteFMI
		inc	c
		pop	af
		djnz	loc_8A6
		pop	af
		pop	bc
; END OF FUNCTION CHUNK	FOR DoPause

; =============== S U B	R O U T	I N E =======================================


SilencePSG:				; CODE XREF: StopDrumPSG+10j
					; StopAllSound+2Dp ...
		push	bc
		ld	b, 4
		ld	a, 9Fh

loc_8B5:				; CODE XREF: SilencePSG+Aj
		ld	(7F11h), a
		add	a, 20h
		djnz	loc_8B5
		pop	bc
		jp	ClearSoundID
; End of function SilencePSG


; =============== S U B	R O U T	I N E =======================================


DoTempo:				; CODE XREF: UpdateAll+3p
		ld	a, (1C14h)
		ld	hl, 1C13h
		add	a, (hl)
		ld	(hl), a
		ret	nc
		ld	hl, 1C4Bh
		ld	de, 30h
		ld	b, 0Ah

loc_8D1:				; CODE XREF: DoTempo+13j
		inc	(hl)
		add	hl, de
		djnz	loc_8D1
		ret
; End of function DoTempo


; =============== S U B	R O U T	I N E =======================================


DoSoundQueue:				; CODE XREF: RAM:003Dp
		ld	a, r
		ld	(1C17h), a
		ld	de, soundqueue0
		ld	b, 3

loc_8E0:				; CODE XREF: DoSoundQueue+32j
		ld	a, (de)
		ld	c, a
		bit	7, a
		jr	z, loc_905
		sub	86h
		jp	c, loc_90B
		sub	1Ah
		ld	hl, SndPriorities
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (1C18h)
		cp	(hl)
		jr	z, loc_8FD
		jr	nc, loc_905

loc_8FD:				; CODE XREF: DoSoundQueue+23j
		ld	a, c
		ld	(1C09h), a
		ld	a, (hl)
		ld	(1C18h), a

loc_905:				; CODE XREF: DoSoundQueue+Ej
					; DoSoundQueue+25j
		xor	a
		ld	(de), a
		inc	de
		djnz	loc_8E0
		ret
; ---------------------------------------------------------------------------

loc_90B:				; CODE XREF: DoSoundQueue+12j
		ld	a, c
		ld	(1C09h), a
		xor	a
		ld	(1C18h), a
		ld	de, soundqueue0
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ld	(de), a
		ret
; End of function DoSoundQueue


; =============== S U B	R O U T	I N E =======================================


SilenceFMChn:				; CODE XREF: StopAllSound+14p
					; RAM:cfE3_SilenceTrkp

; FUNCTION CHUNK AT 02FC SIZE 0000000A BYTES

		call	SetMaxRelRate
		ld	a, 40h
		ld	c, 7Fh
		call	SendAllFMOps
		ld	c, (ix+1)
		jp	FMNoteOff
; End of function SilenceFMChn


; =============== S U B	R O U T	I N E =======================================


SetMaxRelRate:				; CODE XREF: SilenceFMChnp RAM:0B96p
		ld	a, 80h
		ld	c, 0FFh
; End of function SetMaxRelRate


; =============== S U B	R O U T	I N E =======================================


SendAllFMOps:				; CODE XREF: DisableSSGEG+4j
					; SilenceFMChn+7p
		ld	b, 4

loc_932:				; CODE XREF: SendAllFMOps+7j
		push	af
		rst	WriteFMIorII
		pop	af
		add	a, 4
		djnz	loc_932
		ret
; End of function SendAllFMOps

; ---------------------------------------------------------------------------
PSGFreqs:	dw  3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3FFh,	3FFh, 3FFh, 3FFh, 3F7h,	3BEh, 388h
					; DATA XREF: TrkUpdate_Proc+35o
		dw  356h, 326h,	2F9h, 2CEh, 2A5h, 280h,	25Ch, 23Ah, 21Ah, 1FBh,	1DFh, 1C4h
		dw  1ABh, 193h,	17Dh, 167h, 153h, 140h,	12Eh, 11Dh, 10Dh, 0FEh,	0EFh, 0E2h
		dw  0D6h, 0C9h,	0BEh, 0B4h, 0A9h, 0A0h,	 97h,  8Fh,  87h,  7Fh,	 78h,  71h
		dw   6Bh,  65h,	 5Fh,  5Ah,  55h,  50h,	 4Bh,  47h,  43h,  40h,	 3Ch,  39h
		dw   36h,  33h,	 30h,  2Dh,  2Bh,  28h,	 26h,  24h,  22h,  20h,	 1Fh,  1Dh
		dw   1Bh,  1Ah,	 18h,  17h,  16h,  15h,	 13h,  12h,  11h,  10h,	   0,	 0
FMFreqs:	dw  284h, 2ABh,	2D3h, 2FEh, 32Dh, 35Ch,	38Fh, 3C5h, 3FFh, 43Ch,	47Ch, 4C0h
					; DATA XREF: TrkUpdate_Proc+52o

; =============== S U B	R O U T	I N E =======================================


DrumUpdateTrack:			; CODE XREF: UpdateAll+31p
		call	TrackTimeout
		call	z, DrumUpdate_Proc
		ret
; End of function DrumUpdateTrack


; =============== S U B	R O U T	I N E =======================================


DrumUpdate_Proc:			; CODE XREF: DrumUpdateTrack+3p
		ld	e, (ix+3)
		ld	d, (ix+4)

loc_A07:				; CODE XREF: DrumUpdate_Proc+54j
		ld	a, (de)
		inc	de
		cp	0E0h
		jp	nc, cfHandler_Drum
		or	a
		jp	m, loc_A16
		dec	de
		ld	a, (ix+0Dh)

loc_A16:				; CODE XREF: DrumUpdate_Proc+Ej
		ld	(ix+0Dh), a
		or	a
		jp	p, loc_A3E
		push	de
		sub	80h
		jp	z, loc_A38
		ld	hl, 1D60h
		set	2, (hl)
		ex	af, af'
		call	DoNoteOff
		ex	af, af'
		ld	hl, 1C40h
		bit	2, (hl)
		jp	nz, loc_A38
		ld	(1C3Ch), a

loc_A38:				; CODE XREF: DrumUpdate_Proc+1Fj
					; DrumUpdate_Proc+31j
		pop	de
		ld	hl, 1D60h
		res	2, (hl)

loc_A3E:				; CODE XREF: DrumUpdate_Proc+19j
		ld	a, (de)
		inc	de
		or	a
		jp	p, SetDuration
		dec	de
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jp	loc_2A3
; ---------------------------------------------------------------------------

cfHandler_Drum:				; CODE XREF: DrumUpdate_Proc+Aj
		ld	hl, cfReturn_Drum
		jp	loc_A5B
; ---------------------------------------------------------------------------

cfReturn_Drum:				; DATA XREF: DrumUpdate_Proc:cfHandler_Drumo
		inc	de
		jp	loc_A07
; ---------------------------------------------------------------------------

cfHandler:				; CODE XREF: TrkUpdate_Proc+12j
		ld	hl, cfReturn

loc_A5B:				; CODE XREF: DrumUpdate_Proc+50j
		push	hl
		sub	0E0h
		ld	hl, cfPtrTable
		rst	ReadPtrTable
		ld	a, (de)
		jp	(hl)
; End of function DrumUpdate_Proc

; ---------------------------------------------------------------------------

cfReturn:				; DATA XREF: DrumUpdate_Proc:cfHandlero
		inc	de
		jp	loc_20B
; ---------------------------------------------------------------------------
cfPtrTable:	dw cfE0_Pan, cfE1_Detune, cfE2_SetComm,	cfE3_SilenceTrk
					; DATA XREF: DrumUpdate_Proc+5Do
		dw cfE4_PanAnim, cfE5_ChgPFMVol, cfE6_ChgFMVol,	cfE7_Hold
		dw cfE8_NoteStop, cfE9_SetLFO, cfEA_PlayDAC, cfEB_LoopExit
		dw cfEC_ChgPSGVol, cfED_FMChnWrite, cfEE_FM1Write, cfEF_SetIns
		dw cfF0_Mods.betup, cfF1_ModTypePFM, cfF2_StopTrk, cfF3_PSGNoise
		dw cfF4_ModType, cfF5_SetPSGIns, cfF6_GoTo, cfF7_Loop
		dw cfF8_GoSub, cfF9_Return, cfFA_TickMult, cfFB_ChgTransp
		dw cfFC_PitchSlide, cfFD_RawFrqMode, cfFE_SpcFM3Mode, cfMetaCoordFlag
cfMetaPtrTable:	dw cf00_SetTempo, cf01_PlaySnd,	cf02_MusPause, cf03_CopyMem
					; DATA XREF: RAM:cfMetaCoordFlago
		dw cf04_TickMulAll, cf05_SSGEG,	cf06_FMVolEnv
; ---------------------------------------------------------------------------

cfEA_PlayDAC:				; DATA XREF: RAM:cfPtrTableo
		ld	(1C3Ch), a
		ld	hl, 1C40h
		set	2, (hl)
		ret

; =============== S U B	R O U T	I N E =======================================


cfE0_Pan:				; CODE XREF: DoPanAnimation+3Fp
					; DATA XREF: RAM:cfPtrTableo
		ld	c, 3Fh

loc_AC1:				; CODE XREF: RAM:0AD9j
		ld	a, (ix+0Ah)
		and	c
		ex	de, hl
		or	(hl)
		ld	(ix+0Ah), a
		ld	c, a
		ld	a, 0B4h
		rst	WriteFMIorII
		ex	de, hl
		ret
; End of function cfE0_Pan

; ---------------------------------------------------------------------------

cfE9_SetLFO:				; DATA XREF: RAM:cfPtrTableo
		ld	c, a
		ld	a, 22h
		call	WriteFMI
		inc	de
		ld	c, 0C0h
		jr	loc_AC1
; ---------------------------------------------------------------------------

cfE1_Detune:				; DATA XREF: RAM:cfPtrTableo
		ld	(ix+10h), a
		ret
; ---------------------------------------------------------------------------

cfE2_SetComm:				; DATA XREF: RAM:cfPtrTableo
		ld	(1C16h), a
		ret
; ---------------------------------------------------------------------------

cfE3_SilenceTrk:			; DATA XREF: RAM:cfPtrTableo
		call	SilenceFMChn
		jp	cfF2_StopTrk
; ---------------------------------------------------------------------------

cfE4_PanAnim:				; DATA XREF: RAM:cfPtrTableo
		push	ix
		pop	hl
		ld	bc, 11h
		add	hl, bc
		ex	de, hl
		ld	bc, 5
		ldir
		ld	a, 1
		ld	(de), a
		ex	de, hl
		dec	de
		ret
; ---------------------------------------------------------------------------

cfE5_ChgPFMVol:				; DATA XREF: RAM:cfPtrTableo
		inc	de
		add	a, (ix+6)
		ld	(ix+6),	a
		ld	a, (de)

cfE6_ChgFMVol:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		ret	nz
		add	a, (ix+6)
		ld	(ix+6),	a

; =============== S U B	R O U T	I N E =======================================


RefreshVolume:				; CODE XREF: SendFMIns+1Cj
					; DoFading+51p
		push	de
		ld	de, Volume_Ops
		ld	l, (ix+1Ch)
		ld	h, (ix+1Dh)
		ld	b, 4

loc_B1B:				; CODE XREF: RefreshVolume+2Bj
		ld	a, (hl)
		or	a
		jp	p, loc_B33
		add	a, (ix+6)
		jp	m, loc_B28
		ld	a, 0FFh

loc_B28:				; CODE XREF: RefreshVolume+14j
		push	hl
		ld	hl, 1C06h
		add	a, (hl)
		jp	m, loc_B32
		ld	a, 0FFh

loc_B32:				; CODE XREF: RefreshVolume+1Ej
		pop	hl

loc_B33:				; CODE XREF: RefreshVolume+Ej
		and	7Fh
		ld	c, a
		ld	a, (de)
		rst	WriteFMIorII
		inc	de
		inc	hl
		djnz	loc_B1B
		pop	de
		ret
; End of function RefreshVolume

; ---------------------------------------------------------------------------

cfE7_Hold:				; DATA XREF: RAM:cfPtrTableo
		set	1, (ix+0)
		dec	de
		ret
; ---------------------------------------------------------------------------

cfE8_NoteStop:				; DATA XREF: RAM:cfPtrTableo
		call	TickMultiplier
		ld	(ix+1Eh), a
		ld	(ix+1Fh), a
		ret
; ---------------------------------------------------------------------------

cfEB_LoopExit:				; DATA XREF: RAM:cfPtrTableo
		inc	de
		add	a, 28h
		ld	c, a
		ld	b, 0
		push	ix
		pop	hl
		add	hl, bc
		ld	a, (hl)
		dec	a
		jp	z, loc_B5F
		inc	de
		ret
; ---------------------------------------------------------------------------

loc_B5F:				; CODE XREF: RAM:0B5Aj
		xor	a
		ld	(hl), a
		jp	cfF6_GoTo
; ---------------------------------------------------------------------------

cfEC_ChgPSGVol:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		ret	z
		res	4, (ix+0)
		dec	(ix+17h)
		add	a, (ix+6)
		cp	0Fh
		jp	c, loc_B7A
		ld	a, 0Fh

loc_B7A:				; CODE XREF: RAM:0B75j
		ld	(ix+6),	a
		ret
; ---------------------------------------------------------------------------

cfED_FMChnWrite:			; DATA XREF: RAM:cfPtrTableo
		call	ReadFMCommand
		rst	WriteFMIorII
		ret
; ---------------------------------------------------------------------------

cfEE_FM1Write:				; DATA XREF: RAM:cfPtrTableo
		call	ReadFMCommand
		call	WriteFMI
		ret

; =============== S U B	R O U T	I N E =======================================


ReadFMCommand:				; CODE XREF: RAM:cfED_FMChnWritep
					; RAM:cfEE_FM1Writep
		ex	de, hl
		ld	a, (hl)
		inc	hl
		ld	c, (hl)
		ex	de, hl
		ret
; End of function ReadFMCommand

; ---------------------------------------------------------------------------

cfEF_SetIns:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		jr	nz, loc_BC9
		call	SetMaxRelRate
		ld	a, (de)
		ld	(ix+8),	a
		or	a
		jp	p, loc_BBF
		inc	de
		ld	a, (de)
		ld	(ix+0Fh), a

; =============== S U B	R O U T	I N E =======================================


SetInsFromSong:				; CODE XREF: PlaySoundID+748p
		push	de
		ld	a, (ix+0Fh)
		sub	81h
		ld	hl, MusicPtrs
		rst	ReadPtrTable
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	a, (ix+8)
		and	7Fh
		ld	b, a
		call	JumpToInsData
		jr	loc_BC4
; ---------------------------------------------------------------------------

loc_BBF:				; CODE XREF: RAM:0B9Ej
		push	de
		ld	b, a
		call	GetFMInsPtr

loc_BC4:				; CODE XREF: SetInsFromSong+17j
		call	SendFMIns
		pop	de
		ret
; End of function SetInsFromSong

; ---------------------------------------------------------------------------

loc_BC9:				; CODE XREF: RAM:0B94j
		or	a
		ret	p
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF0_Mods.betup:				; DATA XREF: RAM:cfPtrTableo
		ld	(ix+20h), e
		ld	(ix+21h), d
		ld	(ix+7),	80h
		inc	de
		inc	de
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF1_ModTypePFM:			; DATA XREF: RAM:cfPtrTableo
		inc	de
		bit	7, (ix+1)
		jr	nz, cfF4_ModType
		ld	a, (de)

cfF4_ModType:				; CODE XREF: RAM:0BE0j
					; DATA XREF: RAM:cfPtrTableo
		ld	(ix+7),	a
		ret
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR PlaySoundID

cfF2_StopTrk:				; CODE XREF: PlaySoundID+4Dj RAM:0AE6j
					; DATA XREF: ...
		res	7, (ix+0)
		ld	a, 1Fh
		ld	(1C15h), a
		call	DoNoteOff
		ld	c, (ix+1)
		push	ix
		call	GetSFXChnPtrs
		ld	a, (1C19h)
		or	a
		jp	z, loc_C94
		xor	a
		ld	(1C18h), a
		bit	7, (iy+0)
		jr	z, loc_C1E
		ld	a, (ix+1)
		cp	(iy+1)
		jr	nz, loc_C1E
		push	iy
		ld	l, (iy+2Ah)
		ld	h, (iy+2Bh)
		jr	loc_C22
; ---------------------------------------------------------------------------

loc_C1E:				; CODE XREF: PlaySoundID+703j
					; PlaySoundID+70Bj
		push	hl
		ld	hl, (1C37h)

loc_C22:				; CODE XREF: PlaySoundID+715j
		pop	ix
		res	2, (ix+0)
		bit	7, (ix+1)
		jr	nz, loc_C99
		bit	7, (ix+0)
		jr	z, loc_C94
		ld	a, 2
		cp	(ix+1)
		jr	nz, loc_C48
		ld	a, 4Fh
		bit	0, (ix+0)
		jr	nz, loc_C45
		and	0Fh

loc_C45:				; CODE XREF: PlaySoundID+73Aj
		call	SendFM3SpcMode

loc_C48:				; CODE XREF: PlaySoundID+732j
		ld	a, (ix+8)
		or	a
		jp	p, loc_C54
		call	SetInsFromSong
		jr	loc_C91
; ---------------------------------------------------------------------------

loc_C54:				; CODE XREF: PlaySoundID+745j
		ld	b, a
		push	hl
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		pop	hl
		call	JumpToInsData
		call	SendFMIns
		push	hl
		ld	hl, 6000h	; switch to Bank 018000
		xor	a		; Bank bits written: 003h
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		pop	hl
		ld	a, (ix+18h)
		or	a
		jp	p, loc_C94
		ld	e, (ix+19h)
		ld	d, (ix+1Ah)

loc_C91:				; CODE XREF: PlaySoundID+74Bj
		call	Sends.bSGEG

loc_C94:				; CODE XREF: PlaySoundID+6F8j
					; PlaySoundID+72Bj ...
		pop	ix
		pop	hl
		pop	hl
		ret
; ---------------------------------------------------------------------------

loc_C99:				; CODE XREF: PlaySoundID+725j
		bit	0, (ix+0)
		jr	z, loc_C94
		ld	a, (ix+1Ah)
		or	a
		jp	p, loc_CA9
		ld	(7F11h), a

loc_CA9:				; CODE XREF: PlaySoundID+79Cj
		jr	loc_C94
; END OF FUNCTION CHUNK	FOR PlaySoundID
; ---------------------------------------------------------------------------

cfF3_PSGNoise:				; DATA XREF: RAM:cfPtrTableo
		bit	2, (ix+1)
		ret	nz
		ld	a, 0DFh
		ld	(7F11h), a
		ld	a, (de)
		ld	(ix+1Ah), a
		set	0, (ix+0)
		or	a
		jr	nz, loc_CC6
		res	0, (ix+0)
		ld	a, 0FFh

loc_CC6:				; CODE XREF: RAM:0CBEj
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

cfF5_SetPSGIns:				; DATA XREF: RAM:cfPtrTableo
		bit	7, (ix+1)
		ret	z
		ld	(ix+8),	a
		ret
; ---------------------------------------------------------------------------

cfF6_GoTo:				; CODE XREF: RAM:0B61j	RAM:0CEBj
					; DATA XREF: ...
		ex	de, hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		dec	de
		ret
; ---------------------------------------------------------------------------

cfF7_Loop:				; DATA XREF: RAM:cfPtrTableo
		inc	de
		add	a, 28h
		ld	c, a
		ld	b, 0
		push	ix
		pop	hl
		add	hl, bc
		ld	a, (hl)
		or	a
		jr	nz, loc_CE9
		ld	a, (de)
		ld	(hl), a

loc_CE9:				; CODE XREF: RAM:0CE5j
		inc	de
		dec	(hl)
		jp	nz, cfF6_GoTo
		inc	de
		ret
; ---------------------------------------------------------------------------

cfF8_GoSub:				; DATA XREF: RAM:cfPtrTableo
		ld	c, a
		inc	de
		ld	a, (de)
		ld	b, a
		push	bc
		push	ix
		pop	hl
		dec	(ix+9)
		ld	c, (ix+9)
		dec	(ix+9)
		ld	b, 0
		add	hl, bc
		ld	(hl), d
		dec	hl
		ld	(hl), e
		pop	de
		dec	de
		ret
; ---------------------------------------------------------------------------

cfF9_Return:				; DATA XREF: RAM:cfPtrTableo
		push	ix
		pop	hl
		ld	c, (ix+9)
		ld	b, 0
		add	hl, bc
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	(ix+9)
		inc	(ix+9)
		ret
; ---------------------------------------------------------------------------

cfFA_TickMult:				; DATA XREF: RAM:cfPtrTableo
		ld	(ix+2),	a
		ret
; ---------------------------------------------------------------------------

cfFB_ChgTransp:				; DATA XREF: RAM:cfPtrTableo
		add	a, (ix+5)
		ld	(ix+5),	a
		ret
; ---------------------------------------------------------------------------

cfFC_PitchSlide:			; DATA XREF: RAM:cfPtrTableo
		cp	1
		jr	nz, loc_D31
		set	5, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_D31:				; CODE XREF: RAM:0D2Aj
		res	1, (ix+0)
		res	5, (ix+0)
		xor	a
		ld	(ix+10h), a
		ret
; ---------------------------------------------------------------------------

cfFD_RawFrqMode:			; DATA XREF: RAM:cfPtrTableo
		cp	1
		jr	nz, loc_D47
		set	3, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_D47:				; CODE XREF: RAM:0D40j
		res	3, (ix+0)
		ret
; ---------------------------------------------------------------------------

cfFE_SpcFM3Mode:			; DATA XREF: RAM:cfPtrTableo
		ld	a, (ix+1)
		cp	2
		jr	nz, SpcFM3_skip
		set	0, (ix+0)
		ex	de, hl
		call	GetFM3FreqPtr
		ld	b, 4

loc_D5D:				; CODE XREF: RAM:0D6Fj
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ld	hl, FM3_FreqVals
		add	a, a
		ld	c, a
		ld	b, 0
		add	hl, bc
		ldi
		ldi
		pop	hl
		pop	bc
		djnz	loc_D5D
		ex	de, hl
		dec	de
		ld	a, 4Fh

; =============== S U B	R O U T	I N E =======================================


SendFM3SpcMode:				; CODE XREF: PlaySoundID:loc_C45p
		ld	(1C12h), a
		ld	c, a
		ld	a, 27h
		call	WriteFMI
		ret
; End of function SendFM3SpcMode

; ---------------------------------------------------------------------------

SpcFM3_skip:				; CODE XREF: RAM:0D51j
		inc	de
		inc	de
		inc	de
		ret
; ---------------------------------------------------------------------------
FM3_FreqVals:	dw 0, 132h, 18Eh, 1E4h,	234h, 27Eh, 2C2h, 2F0h ; DATA XREF: RAM:0D61o
; ---------------------------------------------------------------------------

cfMetaCoordFlag:			; DATA XREF: RAM:cfPtrTableo
		ld	hl, cfMetaPtrTable
		rst	ReadPtrTable
		inc	de
		ld	a, (de)
		jp	(hl)
; ---------------------------------------------------------------------------

cf00_SetTempo:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(1C14h), a
		ld	(1C13h), a
		ret
; ---------------------------------------------------------------------------

cf01_PlaySnd:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(1C09h), a
		ret
; ---------------------------------------------------------------------------

cf02_MusPause:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(1C11h), a
		or	a
		jr	z, loc_DC8
		push	ix
		push	de

loc_DAE:
		ld	ix, 1C40h
		ld	b, 0Ah
		ld	de, 30h

loc_DB7:				; CODE XREF: RAM:0DC0j
		res	7, (ix+0)
		call	SendNoteOff
		add	ix, de
		djnz	loc_DB7
		pop	de
		pop	ix
		jp	SilencePSG
; ---------------------------------------------------------------------------

loc_DC8:				; CODE XREF: RAM:0DA9j
		push	ix
		push	de
		ld	ix, 1C40h
		ld	b, 0Ah
		ld	de, 30h

loc_DD4:				; CODE XREF: RAM:0DDAj
		set	7, (ix+0)
		add	ix, de
		djnz	loc_DD4
		pop	de
		pop	ix
		ret
; ---------------------------------------------------------------------------

cf03_CopyMem:				; DATA XREF: RAM:cfMetaPtrTableo
		ex	de, hl
		ld	e, (hl)
		inc	hl
		ld	d, (hl)
		inc	hl
		ld	c, (hl)
		ld	b, 0
		inc	hl
		ex	de, hl
		ldir
		dec	de
		ret
; ---------------------------------------------------------------------------

cf04_TickMulAll:			; DATA XREF: RAM:cfMetaPtrTableo
		ld	b, 0Ah
		ld	hl, 1C42h

loc_DF3:				; CODE XREF: RAM:0DFAj
		push	bc
		ld	bc, 30h
		ld	(hl), a
		add	hl, bc
		pop	bc
		djnz	loc_DF3
		ret
; ---------------------------------------------------------------------------

cf05_SSGEG:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(ix+18h), 80h
		ld	(ix+19h), e
		ld	(ix+1Ah), d

; =============== S U B	R O U T	I N E =======================================


Sends.bSGEG:				; CODE XREF: PlaySoundID:loc_C91p
		ld	hl, SSGEG_Ops
		ld	b, 4

loc_E0C:				; CODE XREF: Sends.bSGEG+Bj
		ld	a, (de)
		inc	de
		ld	c, a
		ld	a, (hl)
		inc	hl
		rst	WriteFMIorII
		djnz	loc_E0C
		dec	de
		ret
; End of function Sends.bSGEG

; ---------------------------------------------------------------------------

cf06_FMVolEnv:				; DATA XREF: RAM:cfMetaPtrTableo
		ld	(ix+18h), a
		inc	de
		ld	a, (de)
		ld	(ix+19h), a
		ret
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR UpdateTrack

UpdatePSGTrk:				; CODE XREF: UpdateTrack+4j
		call	TrackTimeout
		jr	nz, loc_E31
		call	TrkUpdate_Proc
		bit	4, (ix+0)
		ret	nz
		call	PrepareModulat
		jr	loc_E3D
; ---------------------------------------------------------------------------

loc_E31:				; CODE XREF: UpdateTrack+CC4j
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_E3D
		dec	(ix+1Eh)
		jp	z, SetRest

loc_E3D:				; CODE XREF: UpdateTrack+CD1j
					; UpdateTrack+CD7j
		call	DoPitchSlide
		call	DoModulation
		bit	2, (ix+0)
		ret	nz
		ld	c, (ix+1)
		ld	a, l
		and	0Fh
		or	c
		ld	(7F11h), a
		ld	a, l
		and	0F0h
		or	h
		rrca
		rrca
		rrca
		rrca
		ld	(7F11h), a
		ld	a, (ix+8)
		or	a
		ld	c, 0
		jr	z, loc_E6E
		dec	a
		ld	hl, VolEnvPtrs
		rst	ReadPtrTable
		call	DoPSGVolEnv
		ld	c, a

loc_E6E:				; CODE XREF: UpdateTrack+D05j
		bit	4, (ix+0)
		ret	nz
		ld	a, (ix+6)
		add	a, c
		bit	4, a
		jr	z, loc_E7D
		ld	a, 0Fh

loc_E7D:				; CODE XREF: UpdateTrack+D1Bj
		or	(ix+1)
		add	a, 10h
		bit	0, (ix+0)
		jr	nz, loc_E8C
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

loc_E8C:				; CODE XREF: UpdateTrack+D28j
		add	a, 20h
		ld	(7F11h), a
		ret
; END OF FUNCTION CHUNK	FOR UpdateTrack
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR DoPSGVolEnv

loc_E92:				; CODE XREF: DoPSGVolEnv+1Bj
					; DoPSGVolEnv+26j
		ld	(ix+17h), a
; END OF FUNCTION CHUNK	FOR DoPSGVolEnv

; =============== S U B	R O U T	I N E =======================================


DoPSGVolEnv:				; CODE XREF: DoFMVolEnv+Bp
					; UpdateTrack+D0Cp

; FUNCTION CHUNK AT 0E92 SIZE 00000003 BYTES

		push	hl
		ld	c, (ix+17h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jr	z, VolEnv_Next
		cp	83h
		jr	z, VolEnv_Off	; 83 - stop the	tone
		cp	81h
		jr	z, VolEnv_Hold	; 81 - hold the	envelope at current level
		cp	80h
		jr	z, VolEnv_Reset	; 80 - loop back to beginning
		inc	bc
		ld	a, (bc)
		jr	loc_E92
; ---------------------------------------------------------------------------

VolEnv_Off:				; CODE XREF: DoPSGVolEnv+Fj
		set	4, (ix+0)
		pop	hl
		jp	SetRest
; ---------------------------------------------------------------------------

VolEnv_Reset:				; CODE XREF: DoPSGVolEnv+17j
		xor	a
		jr	loc_E92
; ---------------------------------------------------------------------------

VolEnv_Hold:				; CODE XREF: DoPSGVolEnv+13j
		pop	hl
		set	4, (ix+0)
		ret
; ---------------------------------------------------------------------------

VolEnv_Next:				; CODE XREF: DoPSGVolEnv+Bj
		inc	(ix+17h)
		ret
; End of function DoPSGVolEnv


; =============== S U B	R O U T	I N E =======================================


SetRest:				; CODE XREF: TrkUpdate_Proc+2Dp
					; UpdateTrack+CDCj ...
		set	4, (ix+0)
		bit	2, (ix+0)
		ret	nz
; End of function SetRest


; =============== S U B	R O U T	I N E =======================================


SilencePSGChn:				; CODE XREF: GetSFXChnPtrs+Ep
		ld	a, 1Fh
		add	a, (ix+1)
		or	a
		ret	p
		ld	(7F11h), a
		bit	0, (ix+0)
		ret	z
		ld	a, 0FFh
		ld	(7F11h), a
		ret
; End of function SilencePSGChn

; ---------------------------------------------------------------------------

loc_EE5:				; CODE XREF: RAM:00E6j	RAM:0F61j
		di
		ld	a, 2Bh
		ld	c, 0
		call	WriteFMI

loc_EED:				; CODE XREF: RAM:0092j	RAM:0EF0j
		ei
		ld	a, d
		or	e
		jr	z, loc_EED
		ei

DACLoop:				; CODE XREF: RAM:0F55j
					; DATA XREF: RAM:0062w
		ld	b, 0Ah

loc_EF5:				; CODE XREF: RAM:loc_EF5j
		djnz	$
		ld	a, (hl)
		rlca
		rlca
		rlca
		rlca
		and	0Fh
		ld	(loc_F02+2), a
		ld	a, c

loc_F02:				; DATA XREF: RAM:0EFEw
		add	a, (iy+0)
		ld	c, a
		ld	a, 2Ah
		di
		ld	(ym2612_a0), a
		ld	a, c
		ld	(ym2612_d0), a
		ei

loc_F11:				; DATA XREF: RAM:0065w
		ld	b, 0Ah

loc_F13:				; CODE XREF: RAM:loc_F13j
		djnz	$
		ld	a, (hl)
		and	0Fh
		ld	(loc_F1C+2), a
		ld	a, c

loc_F1C:				; DATA XREF: RAM:0F18w
		add	a, (iy+0)
		ld	c, a
		ld	a, 2Ah
		di
		ld	(ym2612_a0), a
		ld	a, c
		ld	(ym2612_d0), a
		ei
		inc	hl
		ld	a, h
		or	l
		jp	nz, locb_F52
		ld	hl, 8000h
		di
		exx
		ld	hl, 1C05h
		inc	(hl)
		ld	hl, 1C05h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		exx
		ei

locb_F52:				; CODE XREF: RAM:0F2Ej
		dec	de
		ld	a, d
		or	e
		jp	nz, DACLoop
		ld	hl, 1C40h
		res	2, (hl)
		xor	a
		ld	(1C3Ch), a
		jp	loc_EE5
; ---------------------------------------------------------------------------
DPCMData:	db    0,   1,	2,   4,	  8, 10h, 20h, 40h ; DATA XREF:	RAM:00E1o
		db  80h,0FFh,0FEh,0FCh,0F8h,0F0h,0E0h,0C0h
VolEnvPtrs:	dw byte_F8C,byte_F8E,byte_F95,byte_F9D,byte_FA9,byte_FB4
					; DATA XREF: DoFMVolEnv+7o
					; UpdateTrack+D08o
		dw byte_FC3,byte_FCC,byte_FDD,byte_FE8,byte_FFD,byte_1007
byte_F8C:	db   2,83h		; DATA XREF: RAM:VolEnvPtrso
byte_F8E:	db   0,	 2,  4,	 6,  8,10h,83h ; DATA XREF: RAM:VolEnvPtrso
byte_F95:	db   2,	 1,  0,	 0,  1,	 1,  2,81h ; DATA XREF:	RAM:VolEnvPtrso
byte_F9D:	db   4,	 3,  2,	 1,  0,	 0,  1,	 1,  2,	 2,  2,81h
					; DATA XREF: RAM:VolEnvPtrso
byte_FA9:	db   3,	 0,  1,	 1,  1,	 2,  3,	 4,  4,	 5,81h ; DATA XREF: RAM:VolEnvPtrso
byte_FB4:	db   0,	 0,  1,	 1,  2,	 3,  4,	 5,  5,	 6,  8,	 7,  7
					; DATA XREF: RAM:VolEnvPtrso
		db   6,81h
byte_FC3:	db   1,0Ch,  3,0Fh,  2,	 7,  3,0Fh,80h ; DATA XREF: RAM:VolEnvPtrso
byte_FCC:	db   0,	 0,  0,	 2,  3,	 3,  4,	 5,  6,	 7,  8,	 9,0Ah
					; DATA XREF: RAM:VolEnvPtrso
		db 0Bh,0Eh,0Fh,83h
byte_FDD:	db   3,	 2,  1,	 1,  0,	 0,  1,	 2,  3,	 4,81h ; DATA XREF: RAM:VolEnvPtrso
byte_FE8:	db   1,	 0,  0,	 0,  0,	 1,  1,	 1,  2,	 2,  2,	 3,  3
					; DATA XREF: RAM:VolEnvPtrso
		db   3,	 3,  4,	 4,  4,	 5,  5,81h
byte_FFD:	db 10h,20h,30h,40h,30h,20h,10h,	 0,0F0h,80h ; DATA XREF: RAM:VolEnvPtrso
byte_1007:	db   0,	 0,  1,	 1,  3,	 3,  4,	 5,83h ; DATA XREF: RAM:VolEnvPtrso
ModEnvPtrs:	dw byte_1024, byte_1030, byte_103D, byte_1049, byte_108B
					; DATA XREF: DoModulation+53o
		dw byte_10C0, byte_10FD, byte_1117, byte_1131, byte_1139
byte_1024:	db  40h, 60h, 70h, 60h,	50h, 30h, 10h,-10h,-30h,-50h,-70h
					; DATA XREF: RAM:ModEnvPtrso
		db  83h
byte_1030:	db    0,   2,	4,   6,	  8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h
					; DATA XREF: RAM:ModEnvPtrso
		db  18h
		db  81h
byte_103D:	db    0,   0,	1,   3,	  1,   0,  -1,	-3,  -1,   0
					; DATA XREF: RAM:ModEnvPtrso
		db  82h, 02h
byte_1049:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
					; DATA XREF: RAM:ModEnvPtrso
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 2,   4,   6,	8
		db  0Ah, 0Ch, 0Ah,   8,	  6,   4,   2,	 0,  -2,  -4,  -6
		db   -8,-0Ah,-0Ch,-0Ah,	 -8,  -6,  -4,	-2,   0
		db  82h, 29h
byte_108B:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
					; DATA XREF: RAM:ModEnvPtrso
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   2,	 4,   6,   8, 0Ah
		db  0Ch, 0Ah,	8,   6,	  4,   2,   0,	-2,  -4,  -6,  -8
		db -0Ah,-0Ch,-0Ah,  -8,	 -6,  -4,  -2
		db  82h, 1Bh
byte_10C0:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
					; DATA XREF: RAM:ModEnvPtrso
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
		db    0,   0,	0,   0,	  0,   0,   3,	 6,   3,   0,  -3
		db   -6,  -6,  -3,   0
		db  82h, 33h
byte_10FD:	db    0,   0,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
					; DATA XREF: RAM:ModEnvPtrso
		db    0,   0,	0,   0,	  0,   2,   4,	 2,   0,  -2,  -4
		db   -2,   0
		db  82h, 11h
byte_1117:	db   -2,  -1,	0,   0,	  0,   0,   0,	 0,   0,   0,	0
					; DATA XREF: RAM:ModEnvPtrso
		db    0,   0,	0,   0,	  0,   0,   0,	 1,   1,   0,	0
		db   -1,  -1
		db  82h, 11h
byte_1131:	db    3,   2,	1,   0,	  0,   0,   1 ;	DATA XREF: RAM:ModEnvPtrso
		db  81h
byte_1139:	db    0,   0,	0,   0,	  1,   1,   1,	 1,   2,   2,	1
					; DATA XREF: RAM:ModEnvPtrso
		db    1,   1,	0,   0,	  0
		db  84h, 01h, 82h, 04h
MusicBanks:	db 02h,	02h, 02h, 02h, 02h, 02h, 02h, 02h, 02h, 02h, 02h	; DATA XREF: PlaySoundID+59o
MusicPtrs:	
	dw 8000h 
	dw 8873h 
	dw 8BC0h	
	dw 91F5h 
	dw 96DCh 
	dw 9AC0h
	dw 9C11h
	dw 0AA45h
	dw 0B769h
	dw 0BCB4h
					; SetInsFromSong+6o
SFXPtrs:	dw 0C000h, 0C033h, 0C09Ah, 0C0C7h, 0C0EFh, 0C124h, 0C165h
					; DATA XREF: PlaySoundID+148o
		dw 0C193h, 0C1E4h, 0C23Fh, 0C269h, 0C28Dh, 0C2B1h, 0C2D5h
		dw 0C2F9h, 0C31Dh
SpcSFXPtrs:	dw 0C000h, 0C033h, 0C0C7h ; DATA XREF: PlaySoundID+12Eo
SndPriorities:	db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
					; DATA XREF: DoSoundQueue+17o
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh,	7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh, 7Fh,	7Fh, 7Fh
		db 7Fh
DACTablePtrs:	dw stru_11EC, stru_11F2, stru_11F8, stru_11FE, stru_1204
					; DATA XREF: RAM:005Bo
		dw stru_120A, stru_1210
stru_11EC:	db 30h, 4
		dw 1D4h, 8000h ; DATA XREF: RAM:DACTablePtrso
stru_11F2:	db 0Ah, 4
		dw 0DDEh, 81D4h	; DATA XREF: RAM:DACTablePtrso
stru_11F8:	db 0Ah, 4
		dw 6C0h, 8FB2h ; DATA XREF: RAM:DACTablePtrso
stru_11FE:	db 0Eh, 4
		dw 6C0h, 8FB2h ; DATA XREF: RAM:DACTablePtrso
stru_1204:	db 10h, 4
		dw 6C0h, 8FB2h ; DATA XREF: RAM:DACTablePtrso
stru_120A:	db 0Ah, 4
		dw 157Ch, 9672h	; DATA XREF: RAM:DACTablePtrso
stru_1210:	db 0Ah, 4
		dw 18B4h, 0ABEEh ; DATA	XREF: RAM:DACTablePtrso
		
		restore
	;	padding	off
		dephase