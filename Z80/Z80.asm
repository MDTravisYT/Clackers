; ===========================================================================
; ---------------------------------------------------------------------------
;	This file is generated by The Interactive Disassembler (IDA)
;	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>
;	    Licensed to: ---, ---, ---, ---, --/----
; ---------------------------------------------------------------------------

; Processor	  : z80	[]
; Target assembler: Zilog Macro	Assembler

; Disassembled by: MarkeyJester (DrXInsanity)

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic Crackers Z80 Disassembly
; ---------------------------------------------------------------------------

RomStart:						; Offset: 0000
		di						; disable interrupts
		di						; ''
		im	1					; set interrupt mode 1
		jp	loc_B2					; continue

Location_07:	db    0

; ===========================================================================
; ---------------------------------------------------------------------------
; 
; ---------------------------------------------------------------------------

sub_8:							; Offset: 0008
		ld	c,a
		ld	b,000h
		add	hl,bc
		add	hl,bc
		ld	a,(hl)
		inc	hl
		ld	h,(hl)
		ld	l,a
		ret						; return

Location_12:	db    0
		db    0
		db    0
		db    0
		db    0
		db    0

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to check if the channel is muted before writing YM2612 data and
; to check which part to write to for which channel
; ---------------------------------------------------------------------------

YM2612_CheckMute:					; Offset: 0018
		bit	002h,(ix+0)				; is the mute flag set?
		ret	nz					; if so, return
		add	a,(ix+1)				; add channel chip ID to YM2612 address
		bit	002h,(ix+1)				; is the channel FM 1, 2 or 3?
		jr	nz,YM2612_NoMutePart2			; if not, branch to Memory Map Part 2

; ---------------------------------------------------------------------------
; Subroutine to write data to the YM2612 (Memory Map 1)
; ---------------------------------------------------------------------------

YM2612_WritePart1:					; Offset: 0026
		ld	(4000h),a				; set YM2612 address to write to
		ld	a,c					; load data to write
		ld	(4001h),a				; save data to YM2612 address
		ret						; return

; ===========================================================================
; ---------------------------------------------------------------------------
; FM 4 to 6 have ID's 4 to 6, while FM 1 to 3 have ID's 0 to 2, subtract 4 to
; make FM 4 to 6 write correctly
; ---------------------------------------------------------------------------

YM2612_NoMutePart2:					; Offset: 002E
		sub	004h					; subtract 4

; ---------------------------------------------------------------------------
; Subroutine to write data to the YM2612 (Memory Map 2)
; ---------------------------------------------------------------------------


YM2612_WritePart2:					; Offset: 0030
		ld	(4002h),a				; set YM2612 address to write to
		ld	a,c					; load data to write
		ld	(4003h),a				; save data to YM2612 address
		ret						; return

; ===========================================================================
; ---------------------------------------------------------------------------
; Vertical Blanking Interval - Offset 38
; ---------------------------------------------------------------------------

VBlank:
		di						; disable interrupts
		push	af
		push	iy
		exx
		call	sub_8D6
		call	sub_E9
		ld	a,(1C3Ch)
		or	a
		jp	z,loc_AB
		jp	m,loc_95
		ld	a,02Bh					; set address to DAC on/off switch
		ld	c,080h					; set to turn DAC on and FM 6 off
		call	YM2612_WritePart1			; write to YM2612
		ld	hl,01C3Ch
		ld	a,(hl)
		dec	a
		set	7,(hl)
		ld	hl,011DEh
		rst	008h
		ld	c,080h
		ld	a,(hl)
		ld	(DAC_DumpByte0A+001h),a		; sets pitch of first PCM byte (ADPCM)
		ld	(DAC_DumpByte0B+001h),a		; sets pitch of second PCM byte (ADPCM)
		inc	hl
		ld	a,(hl)
		ld	(1C05h),a
		inc	hl
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		ld	a,(hl)
		inc	hl
		ld	h,(hl)
		ld	l,a
		exx
		ld	hl,1C05h
		ld	a, (hl)
		ld	hl,6000h
		ld	(hl),a
		rra
		ld	(hl),a
		rra
		ld	(hl),a
		rra
		ld	(hl),a
		rra
		ld	(hl),a
		rra
		ld	(hl),a
		xor	a
		ld	(hl),a
		ld	(hl),a
		ld	(hl),a
		exx
		pop	iy
		pop	af
		pop	af
		jp	loc_EED
; ---------------------------------------------------------------------------

loc_95:							; Offset: 0095
		ld	hl,01C05h				; set bank address
		ld	a,(hl)					; load bank address
		ld	hl,06000h				; load bankswitch port address
		ld	(hl),a					; set bank address
		rra						; rotate a right
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		xor	a					; ''
		ld	(hl),a					; ''
		ld	(hl),a					; ''
		ld	(hl),a					; ''

loc_AB:							; Offset: 00AB
		exx						; exchange to other registers
		pop	iy	; load address of jman's table from stack I assume?
		pop	af
		ld	b,001h
		ret						; return

; ---------------------------------------------------------------------------

loc_B2:							; Offset: 00B2
		ld	sp,02000h				; set the stack pointer location to start at 2000
		ld	c,000h					; clear c

loc_B7:							; Offset: 00B7
		ld	b,000h					; clear b
		djnz	$					; decrement b and loop to self if not 0
		dec	c					; decrement c
		jr	nz, loc_B7				; if not 0, loop
		call	Reset_SoundChips			; reset the sound chips (mute them)
		ld	a,002h		; I think bankswitch address (PCM samples are at 00020000)
		ld	(1C04h),a
		ld	a,004h
		ld	(1C05h),a
		ld	hl,01C05h				; load bankswitch data address
		ld	a,(hl)					; load bankswitch address
		ld	hl,06000h				; load bankswitch port address
		ld	(hl),a					; set bank address
		rra						; rotate a right
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		xor	a					; ''
		ld	(hl),a					; ''
		ld	(hl),a					; ''
		ld	(hl),a					; ''
		ld	iy,DecTable				; load jman2050's ADPCM decompression table
		ei						; enable interrupts
		jp	SMPS_MainLoop

; =============== S U B	R O U T	I N E =======================================


sub_E9:					; CODE XREF: ROM:0040p
		call	sub_760
		call	sub_8C0
		call	sub_7D9
		call	sub_507
		call	sub_125
		xor	a
		ld	(1C19h), a
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	ix, 1C40h
		bit	7, (ix+0)
		call	nz, sub_9FA
		ld	b, 9
		ld	ix, 1C70h
		jr	sub_14D
; End of function sub_E9


; =============== S U B	R O U T	I N E =======================================


sub_125:				; CODE XREF: sub_E9+Cp
		ld	a, 1
		ld	(1C19h), a
		ld	hl, 6000h
		xor	a
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	ix, 1E20h
		ld	b, 7
		call	sub_14D
		ld	a, 80h ; 'Ä'
		ld	(1C19h), a
		ld	b, 1
		ld	ix, 1F70h
; End of function sub_125


; =============== S U B	R O U T	I N E =======================================


sub_14D:				; CODE XREF: sub_E9+3Aj sub_125+1Ap ...
		push	bc
		bit	7, (ix+0)
		call	nz, sub_15E
		ld	de, 30h	; '0'
		add	ix, de
		pop	bc
		djnz	sub_14D
		ret
; End of function sub_14D


; =============== S U B	R O U T	I N E =======================================


sub_15E:				; CODE XREF: sub_14D+5p
		bit	7, (ix+1)
		jp	nz, loc_E1F
		call	sub_2CF
		jr	nz, loc_181
		call	sub_1FD
		bit	4, (ix+0)
		ret	nz
		call	sub_395
		call	sub_466
		call	sub_3C0
		call	sub_1A3
		jp	loc_2D7
; ---------------------------------------------------------------------------

loc_181:				; CODE XREF: sub_15E+Aj
		call	sub_350
		bit	4, (ix+0)
		ret	nz
		call	sub_366
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_198
		dec	(ix+1Eh)
		jp	z, sub_2F0

loc_198:				; CODE XREF: sub_15E+32j
		call	sub_466
		bit	6, (ix+0)
		ret	nz
		call	sub_3C0
; End of function sub_15E


; =============== S U B	R O U T	I N E =======================================


sub_1A3:				; CODE XREF: sub_15E+1Dp
		bit	2, (ix+0)
		ret	nz
		bit	0, (ix+0)
		jp	nz, loc_1B8

loc_1AF:				; CODE XREF: sub_1A3+1Aj
		ld	a, 0A4h	; '§'
		ld	c, h
		rst	18h
		ld	a, 0A0h	; '†'
		ld	c, l
		rst	18h
		ret
; ---------------------------------------------------------------------------

loc_1B8:				; CODE XREF: sub_1A3+9j
		ld	a, (ix+1)
		cp	2
		jr	nz, loc_1AF
		call	sub_1ED
		ld	b, 4
		ld	hl, 1E9h

loc_1C7:				; CODE XREF: sub_1A3+43j
		push	bc
		ld	a, (hl)
		inc	hl
		push	hl
		ex	de, hl
		ld	c, (hl)
		inc	hl
		ld	b, (hl)
		inc	hl
		ex	de, hl
		ld	l, (ix+0Dh)
		ld	h, (ix+0Eh)
		add	hl, bc
		push	af
		ld	c, h
		call	YM2612_WritePart1
		pop	af
		sub	4
		ld	c, l
		call	YM2612_WritePart1
		pop	hl
		pop	bc
		djnz	loc_1C7
		ret
; End of function sub_1A3

; ---------------------------------------------------------------------------
		db 0ADh	; ≠
		db 0AEh	; Æ
		db 0ACh	; ¨
		db 0A6h	; ¶

; =============== S U B	R O U T	I N E =======================================


sub_1ED:				; CODE XREF: sub_1A3+1Cp
		ld	de, 1C2Ah
		ld	a, (1C19h)
		or	a
		ret	z
		ld	de, 1C1Ah
		ret	p
		ld	de, 1C22h
		ret
; End of function sub_1ED


; =============== S U B	R O U T	I N E =======================================


sub_1FD:				; CODE XREF: sub_15E+Cp ROM:0E24p
		ld	e, (ix+3)
		ld	d, (ix+4)
		res	1, (ix+0)
		res	4, (ix+0)
		ld	a, (de)
		inc	de
		cp	0E0h ; '‡'
		jp	nc, loc_A58
		ex	af, af'
		call	sub_2F0
		call	sub_306
		ex	af, af'
		bit	3, (ix+0)
		jp	nz, loc_277
		or	a
		jp	p, loc_29D
		sub	81h ; 'Å'
		jp	p, loc_22F
		call	sub_EC7
		jr	loc_25D
; ---------------------------------------------------------------------------

loc_22F:				; CODE XREF: sub_1FD+2Aj
		add	a, (ix+5)
		ld	hl, 93Ah
		push	af
		rst	8
		pop	af
		bit	7, (ix+1)
		jr	nz, loc_257
		push	de
		ld	d, 8
		ld	e, 0Ch
		ex	af, af'
		xor	a

loc_245:				; CODE XREF: sub_1FD+4Ej
		ex	af, af'
		sub	e
		jr	c, loc_24E
		ex	af, af'
		add	a, d
		jr	loc_245
; ---------------------------------------------------------------------------
		db    8
; ---------------------------------------------------------------------------

loc_24E:				; CODE XREF: sub_1FD+4Aj
		add	a, e
		ld	hl, 9E2h
		rst	8
		ex	af, af'
		or	h
		ld	h, a
		pop	de

loc_257:				; CODE XREF: sub_1FD+3Fj
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h

loc_25D:				; CODE XREF: sub_1FD+30j
		bit	5, (ix+0)
		jr	nz, loc_270
		ld	a, (de)
		or	a
		jp	p, loc_29C
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jr	loc_2A3
; ---------------------------------------------------------------------------

loc_270:				; CODE XREF: sub_1FD+64j
		ld	a, (de)
		inc	de
		ld	(ix+10h), a
		jr	loc_29B
; ---------------------------------------------------------------------------

loc_277:				; CODE XREF: sub_1FD+21j
		ld	h, a
		ld	a, (de)
		inc	de
		ld	l, a
		or	h
		jr	z, loc_28A
		ld	a, (ix+5)
		ld	b, 0
		or	a
		jp	p, loc_288
		dec	b

loc_288:				; CODE XREF: sub_1FD+87j
		ld	c, a
		add	hl, bc

loc_28A:				; CODE XREF: sub_1FD+7Fj
		ld	(ix+0Dh), l
		ld	(ix+0Eh), h
		bit	5, (ix+0)
		jr	z, loc_29B
		ld	a, (de)
		inc	de
		ld	(ix+10h), a

loc_29B:				; CODE XREF: sub_1FD+78j sub_1FD+97j
		ld	a, (de)

loc_29C:				; CODE XREF: sub_1FD+68j
		inc	de

loc_29D:				; CODE XREF: sub_1FD+25j sub_A01+40j
		call	sub_2C5
		ld	(ix+0Ch), a

loc_2A3:				; CODE XREF: sub_1FD+71j sub_A01+4Aj
		ld	(ix+3),	e
		ld	(ix+4),	d
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		bit	1, (ix+0)
		ret	nz
		xor	a
		ld	(ix+25h), a
		ld	(ix+22h), a
		ld	(ix+17h), a
		ld	a, (ix+1Fh)
		ld	(ix+1Eh), a
		ret
; End of function sub_1FD


; =============== S U B	R O U T	I N E =======================================


sub_2C5:				; CODE XREF: sub_1FD:loc_29Dp
		ld	b, (ix+2)
		dec	b
		ret	z
		ld	c, a

loc_2CB:				; CODE XREF: sub_2C5+7j
		add	a, c
		djnz	loc_2CB
		ret
; End of function sub_2C5


; =============== S U B	R O U T	I N E =======================================


sub_2CF:				; CODE XREF: sub_15E+7p sub_9FAp ...
		ld	a, (ix+0Bh)
		dec	a
		ld	(ix+0Bh), a
		ret
; End of function sub_2CF

; ---------------------------------------------------------------------------

loc_2D7:				; CODE XREF: sub_15E+20j
		ld	a,(ix+00Dh)
		or	(ix+00Eh)
		ret	z
		ld	a,(ix+000h)
		and	006h
		ret	nz
		ld	a,(ix+001h)				; load channel chip ID
		or	0F0h					; set "key on" value
		ld	c,a					; move to c
		ld	a,028h					; set to write to key on/off
		call	YM2612_WritePart1			; save to YM2612
		ret						; return

; =============== S U B	R O U T	I N E =======================================


sub_2F0:				; CODE XREF: sub_15E+37j sub_1FD+16p ...
		ld	a,(ix+000h)
		and	006h
		ret	nz
		ld	c,(ix+001h)
		bit	007h,c
		ret	nz

loc_2FC:
		ld	a,028h					; set address to key on/off
		call	YM2612_WritePart1			; save to YM2612
		res	006h,(ix+000h)
		ret						; return


; =============== S U B	R O U T	I N E =======================================


sub_306:				; CODE XREF: sub_1FD+19p
		ld	a, (ix+011h)
		dec	a
		ret	m
		jr	nz, loc_34C
		bit	1, (ix+000h)
		ret	nz

loc_312:				; CODE XREF: sub_350+6j
		dec	(ix+016h)
		ret	nz
		push	bc
		push	de
		push	hl
		ld	a, (ix+015h)
		ld	(ix+016h), a
		ld	a, (ix+012h)
		ld	hl, unklocs_00
		rst	8
		ld	e, (ix+13h)
		inc	(ix+13h)
		ld	a, (ix+14h)
		dec	a
		cp	e
		jr	nz, loc_341
		dec	(ix+13h)
		ld	a, (ix+11h)
		cp	2
		jr	z, loc_341
		ld	(ix+13h), 0

loc_341:				; CODE XREF: sub_306+2Bj sub_306+35j
		ld	d, 0
		add	hl, de
		ex	de, hl
		call	sub_ABF
		pop	hl
		pop	de
		pop	bc
		ret
; ---------------------------------------------------------------------------

loc_34C:				; CODE XREF: sub_306+5j
		xor	a
		ld	(ix+13h), a
; End of function sub_306


; =============== S U B	R O U T	I N E =======================================


sub_350:				; CODE XREF: sub_15E:loc_181p
		ld	a, (ix+11h)
		sub	2
		ret	m
		jr	loc_312
; End of function sub_350

; ---------------------------------------------------------------------------
unklocs_00:	dw	loc_360
		dw	loc_361
		dw	loc_362
		dw	loc_363
loc_360:	db	0C0h
loc_361:	db	080h
loc_362:	db	0C0h
loc_363:	db	040h
		db	0C0h
		db	080h

; =============== S U B	R O U T	I N E =======================================

sub_366:				; CODE XREF: sub_15E+2Bp
		ld	a, (ix+18h)
		or	a
		ret	z
		ret	m
		dec	a
		ld	hl,PSGTable
		rst	8
		call	sub_E95
		ld	h, (ix+1Dh)
		ld	l, (ix+1Ch)
		ld	de, 4DAh
		ld	b, 4
		ld	c, (ix+19h)

loc_382:				; CODE XREF: sub_366+2Cj
		push	af
		sra	c
		push	bc
		jr	nc, loc_38E
		add	a, (hl)
		and	7Fh ; ''
		ld	c, a
		ld	a, (de)
		rst	18h

loc_38E:				; CODE XREF: sub_366+20j
		pop	bc
		inc	de
		inc	hl
		pop	af
		djnz	loc_382
		ret
; End of function sub_366


; =============== S U B	R O U T	I N E =======================================


sub_395:				; CODE XREF: sub_15E+14p ROM:0E2Cp
		bit	7, (ix+7)
		ret	z
		bit	1, (ix+0)
		ret	nz
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	ix
		pop	hl
		ld	b, 0
		ld	c, 24h ; '$'
		add	hl, bc
		ex	de, hl
		ldi
		ldi
		ldi
		ld	a, (hl)
		srl	a
		ld	(de), a
		xor	a
		ld	(ix+22h), a
		ld	(ix+23h), a
		ret
; End of function sub_395


; =============== S U B	R O U T	I N E =======================================


sub_3C0:				; CODE XREF: sub_15E+1Ap sub_15E+42p ...
		ld	a, (ix+7)
		or	a
		ret	z
		cp	80h ; 'Ä'
		jr	nz, loc_411
		dec	(ix+24h)
		ret	nz
		inc	(ix+24h)
		push	hl
		ld	l, (ix+22h)
		ld	h, (ix+23h)
		ld	e, (ix+20h)
		ld	d, (ix+21h)
		push	de
		pop	iy
		dec	(ix+25h)
		jr	nz, loc_3FC
		ld	a, (iy+1)
		ld	(ix+25h), a
		ld	a, (ix+26h)
		ld	c, a
		and	80h ; 'Ä'
		rlca
		neg
		ld	b, a
		add	hl, bc
		ld	(ix+22h), l
		ld	(ix+23h), h

loc_3FC:				; CODE XREF: sub_3C0+23j
		pop	bc
		add	hl, bc
		dec	(ix+27h)
		ret	nz
		ld	a, (iy+3)
		ld	(ix+27h), a
		ld	a, (ix+26h)
		neg
		ld	(ix+26h), a
		ret
; ---------------------------------------------------------------------------

loc_411:				; CODE XREF: sub_3C0+7j
		dec	a
		ex	de, hl
		ld	hl,UnkTable
		rst	8
		jr	loc_41C
; ---------------------------------------------------------------------------

loc_419:				; CODE XREF: sub_3C0+82j sub_3C0+85j
		ld	(ix+25h), a

loc_41C:				; CODE XREF: sub_3C0+57j sub_3C0+95j
		push	hl
		ld	c, (ix+25h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jp	z, loc_457
		cp	82h ; 'Ç'
		jr	z, loc_440
		cp	80h ; 'Ä'
		jr	z, loc_444
		cp	84h ; 'Ñ'
		jr	z, loc_447
		ld	h, 0FFh
		jr	nc, loc_459
		set	6, (ix+0)
		pop	hl
		ret
; ---------------------------------------------------------------------------

loc_440:				; CODE XREF: sub_3C0+6Cj
		inc	bc
		ld	a, (bc)
		jr	loc_419
; ---------------------------------------------------------------------------

loc_444:				; CODE XREF: sub_3C0+70j
		xor	a
		jr	loc_419
; ---------------------------------------------------------------------------

loc_447:				; CODE XREF: sub_3C0+74j
		inc	bc
		ld	a, (bc)
		add	a, (ix+22h)
		ld	(ix+22h), a
		inc	(ix+25h)
		inc	(ix+25h)
		jr	loc_41C
; ---------------------------------------------------------------------------

loc_457:				; CODE XREF: sub_3C0+67j
		ld	h, 0

loc_459:				; CODE XREF: sub_3C0+78j
		ld	l, a
		ld	b, (ix+22h)
		inc	b
		ex	de, hl

loc_45F:				; CODE XREF: sub_3C0+A0j
		add	hl, de
		djnz	loc_45F
		inc	(ix+25h)
		ret
; End of function sub_3C0


; =============== S U B	R O U T	I N E =======================================


sub_466:				; CODE XREF: sub_15E+17p
					; sub_15E:loc_198p ...
		ld	b, 0
		ld	a, (ix+10h)
		or	a
		jp	p, loc_470
		dec	b

loc_470:				; CODE XREF: sub_466+6j
		ld	h, (ix+0Eh)
		ld	l, (ix+0Dh)
		ld	c, a
		add	hl, bc
		bit	7, (ix+1)
		jr	nz, loc_4A0
		ex	de, hl
		ld	a, 7
		and	d
		ld	b, a
		ld	c, e
		or	a
		ld	hl, 283h
		sbc	hl, bc
		jr	c, loc_492
		ld	hl, 0FA85h
		add	hl, de
		jr	loc_4A0
; ---------------------------------------------------------------------------

loc_492:				; CODE XREF: sub_466+24j
		or	a
		ld	hl, 508h
		sbc	hl, bc
		jr	nc, loc_49F
		ld	hl, 57Ch
		add	hl, de
		ex	de, hl

loc_49F:				; CODE XREF: sub_466+32j
		ex	de, hl

loc_4A0:				; CODE XREF: sub_466+16j sub_466+2Aj
		bit	5, (ix+0)
		ret	z
		ld	(ix+0Eh), h
		ld	(ix+0Dh), l
		ret
; End of function sub_466

; ---------------------------------------------------------------------------
		db  2Ah	; *
		db  37h	; 7
		db  1Ch
		db  3Ah	; :
		db  19h
		db  1Ch
		db 0B7h	; ∑
		db  28h	; (
		db    6
		db 0DDh	; ›
		db  6Eh	; n
		db  2Ah	; *
		db 0DDh	; ›
		db  66h	; f
		db  2Bh	; +
		db 0AFh	; Ø
		db 0B0h	; ∞
		db 0C8h	; »
		db  11h
		db  19h
		db    0
		db  19h
		db  10h
		db 0FDh	; ˝
		db 0C9h	; …
		db 0B0h	; ∞
		db  30h	; 0
		db  38h	; 8
		db  34h	; 4
		db  3Ch	; <
		db  50h	; P
		db  58h	; X
		db  54h	; T
		db 5Ch
		db  60h	; `
		db  68h	; h
		db  64h	; d
		db  6Ch	; l
		db  70h	; p
		db  78h	; x
		db  74h	; t
		db  7Ch	; |
		db  80h	; Ä
		db  88h	; à
		db  84h	; Ñ
		db  8Ch	; å
		db  40h	; @
		db  48h	; H
		db  44h	; D
		db  4Ch	; L
		db  90h	; ê
		db  98h	; ò
		db  94h	; î
		db  9Ch	; ú
		db  11h
		db 0C5h	; ≈
		db    4
		db 0DDh	; ›
		db  4Eh	; N
		db  0Ah
		db  3Eh	; >
		db 0B4h	; ¥
		db 0DFh	; ﬂ
		db 0CDh	; Õ
		db    1
		db    5
		db 0DDh	; ›
		db  77h	; w
		db  1Bh
		db    6
		db  14h
		db 0CDh	; Õ
		db    1
		db    5
		db  10h
		db 0FBh	; ˚
		db 0DDh	; ›
		db  75h	; u
		db  1Ch
		db 0DDh	; ›
		db  74h	; t
		db  1Dh
		db 0C3h	; √
		db  0Fh
		db  0Bh
		db  1Ah
		db  13h
		db  4Eh	; N
		db  23h	; #
		db 0DFh	; ﬂ
		db 0C9h	; …

; =============== S U B	R O U T	I N E =======================================


sub_507:				; CODE XREF: sub_E9+9p
		ld	a, (1C09h)
		bit	7, a
		jp	z, Reset_SoundChips
		cp	0A0h ; '†'
		jp	c, loc_557
		cp	0B0h ; '∞'
		jp	c, loc_63A
		cp	0E0h ; '‡'
		jp	c, loc_61F
		cp	0F9h ; '˘'
		jp	nc, Reset_SoundChips
		sub	0E0h ; '‡'
		ld	hl, 52Eh
		rst	8
		xor	a
		ld	(1C18h), a
		jp	(hl)
; ---------------------------------------------------------------------------
		db 0B9h	; π
		db    7
		db  36h	; 6
		db    8
		db 0B0h	; ∞
		db    8
		db  36h	; 6
		db    5
		db 0DDh	; ›
		db  21h	; !
		db  70h	; p
		db  1Fh
		db    6
		db    2
		db  3Eh	; >
		db  80h	; Ä
		db  32h	; 2
		db  19h
		db  1Ch
		db 0C5h	; ≈
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  7Eh	; ~
		db 0C4h	; ƒ
		db  52h	; R
		db    5
		db  11h
		db  30h	; 0
		db    0
		db 0DDh	; ›
		db  19h
		db 0C1h	; ¡
		db  10h
		db 0F0h	; 
		db 0C9h	; …
		db 0E5h	; Â
		db 0E5h	; Â
		db 0C3h	; √
		db 0E7h	; Á
		db  0Bh
; ---------------------------------------------------------------------------

loc_557:				; CODE XREF: sub_507+Aj
		sub	081h					; Minus 81 (start index)
		ret	m
		ex	af, af'
		call	Reset_SoundChips
		ex	af, af'
		push	af
		ld	hl, 114Dh
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (hl)
		ld	(1C04h), a
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		pop	af
		ld	hl,BGMTable
		rst	8
		push	hl
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(1C37h), hl
		pop	hl
		pop	iy
		ld	a, (iy+5)
		ld	(1C13h), a
		ld	(1C14h), a
		ld	de, 6
		add	hl, de
		ld	(1C33h), hl
		ld	hl, 60Bh
		ld	(1C35h), hl
		ld	de, 1C40h
		ld	b, (iy+2)
		ld	a, (iy+4)

loc_5B2:				; CODE XREF: sub_507+CAj
		push	bc
		ld	hl, (1C35h)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(1C35h), hl
		ld	hl, (1C33h)
		ldi
		ldi
		ldi
		ldi
		ld	(1C33h), hl
		call	sub_716
		pop	bc
		djnz	loc_5B2
		ld	a, (iy+3)
		or	a
		jp	z, loc_605
		ld	b, a
		ld	hl, 619h
		ld	(1C35h), hl
		ld	de, 1D90h
		ld	a, (iy+4)

loc_5E7:				; CODE XREF: sub_507+FCj
		push	bc
		ld	hl, (1C35h)
		ldi
		ldi
		ld	(de), a
		inc	de
		ld	(1C35h), hl
		ld	hl, (1C33h)
		ld	bc, 6
		ldir
		ld	(1C33h), hl
		call	sub_71D
		pop	bc
		djnz	loc_5E7

loc_605:
		ld	a,080h
		ld	(1C09h),a
		ret

; ===========================================================================
; ---------------------------------------------------------------------------
; FM / PSG chip values
; ---------------------------------------------------------------------------
Channel_ChipIDs:					; Offset: 060B
		dw	00680h					; FM 6 (DAC)
		dw	00080h					; FM 1
		dw	00180h					; FM 2
		dw	00280h					; FM 3
		dw	00480h					; FM 4
		dw	00580h					; FM 5
		dw	00680h					; FM 6
		dw	08080h					; PSG 1
		dw	0A080h					; PSG 2
		dw	0C080h					; PSG 3
; ---------------------------------------------------------------------------
; ===========================================================================

loc_61F:				; CODE XREF: sub_507+14j
		ex	af, af'
		ld	hl, 6000h
		xor	a
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ex	af, af'
		sub	0D0h ; '–'
		ex	af, af'
		ld	a, 80h ; 'Ä'
		ld	hl,SFXTable_Unk
		jr	loc_652
; ---------------------------------------------------------------------------

loc_63A:				; CODE XREF: sub_507+Fj
		ex	af, af'
		ld	hl, 6000h
		xor	a
		ld	e, 1
		ld	(hl), e
		ld	(hl), e
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ex	af, af'
		sub	0A0h ; '†'
		ex	af, af'
		xor	a
		ld	hl,SFXTable

loc_652:				; CODE XREF: sub_507+131j
		ld	(1C19h), a
		ex	af, af'
		rst	8
		push	hl
		ld	a, (hl)
		inc	hl
		ld	h, (hl)
		ld	l, a
		ld	(1C39h), hl
		xor	a
		ld	(1C15h), a
		pop	hl
		push	hl
		pop	iy
		ld	a, (iy+2)
		ld	(1C3Bh), a
		ld	de, 4
		add	hl, de
		ld	b, (iy+3)

loc_674:				; CODE XREF: sub_507+1CBj
		push	bc
		push	hl
		inc	hl
		ld	c, (hl)
		call	sub_6D7
		set	2, (hl)
		push	ix
		ld	a, (1C19h)
		or	a
		jr	z, loc_688
		pop	hl
		push	iy

loc_688:				; CODE XREF: sub_507+17Cj
		pop	de
		pop	hl
		ldi
		ld	a, (de)
		cp	2
		call	z, loc_86D
		ldi
		ld	a, (1C3Bh)
		ld	(de), a
		inc	de
		ldi
		ldi
		ldi
		ldi
		call	sub_716
		bit	7, (ix+0)
		jr	z, loc_6B6
		ld	a, (ix+1)
		cp	(iy+1)
		jr	nz, loc_6B6
		set	2, (iy+0)

loc_6B6:				; CODE XREF: sub_507+1A1j sub_507+1A9j
		push	hl
		ld	hl, (1C39h)
		ld	a, (1C19h)
		or	a
		jr	z, loc_6C4
		push	iy
		pop	ix

loc_6C4:				; CODE XREF: sub_507+1B7j
		ld	(ix+2Ah), l
		ld	(ix+2Bh), h
		call	sub_2F0
		call	YM2612_ResetProprietary
		pop	hl
		pop	bc
		djnz	loc_674
		jp	loc_605
; End of function sub_507


; =============== S U B	R O U T	I N E =======================================


sub_6D7:				; CODE XREF: sub_507+171p
		bit	7, c
		jr	nz, loc_6E3
		ld	a, c
		bit	2, a
		jr	z, loc_6FA
		dec	a
		jr	loc_6FA
; ---------------------------------------------------------------------------

loc_6E3:				; CODE XREF: sub_6D7+2j
		ld	a, 1Fh
		call	sub_ED0
		ld	a, 0FFh
		ld	(7F11h), a
		ld	a, c
		srl	a
		srl	a
		srl	a
		srl	a
		srl	a
		add	a, 2

loc_6FA:				; CODE XREF: sub_6D7+7j sub_6D7+Aj
		sub	2
		ld	(1C32h), a
		push	af
		ld	hl, 740h
		rst	8
		push	hl
		pop	ix
		pop	af
		push	af
		ld	hl, 730h
		rst	8
		push	hl
		pop	iy
		pop	af
		ld	hl, 750h
		rst	8
		ret
; End of function sub_6D7


; =============== S U B	R O U T	I N E =======================================


sub_716:				; CODE XREF: sub_507+C6p sub_507+19Ap
		ex	af, af'
		xor	a
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ex	af, af'
; End of function sub_716


; =============== S U B	R O U T	I N E =======================================


sub_71D:				; CODE XREF: sub_507+F8p
		ex	de, hl
		ld	(hl), 30h ; '0'
		inc	hl
		ld	(hl), 0C0h ; '¿'
		inc	hl
		ld	(hl), 1
		ld	b, 24h ; '$'

loc_728:				; CODE XREF: sub_71D+Ej
		inc	hl
		ld	(hl), 0
		djnz	loc_728
		inc	hl
		ex	de, hl
		ret
; End of function sub_71D

; ---------------------------------------------------------------------------
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  70h	; p
		db  1Fh
		db  20h
		db  1Eh
		db  50h	; P
		db  1Eh
		db  80h	; Ä
		db  1Eh
		db 0B0h	; ∞
		db  1Eh
		db 0E0h	; ‡
		db  1Eh
		db  10h
		db  1Fh
		db  40h	; @
		db  1Fh
		db  40h	; @
		db  1Fh
		db 0D0h	; –
		db  1Ch
		db    0
		db  1Dh
		db  30h	; 0
		db  1Dh
		db  60h	; `
		db  1Dh
		db  90h	; ê
		db  1Dh
		db 0C0h	; ¿
		db  1Dh
		db 0F0h	; 
		db  1Dh
		db 0F0h	; 
		db  1Dh

; =============== S U B	R O U T	I N E =======================================


sub_760:				; CODE XREF: sub_E9p
		ld	hl, 1C10h
		ld	a, (hl)
		or	a
		ret	z
		jp	m, loc_771
		pop	de
		dec	a
		ret	nz
		ld	(hl), 2
		jp	loc_881
; ---------------------------------------------------------------------------

loc_771:				; CODE XREF: sub_760+6j
		xor	a
		ld	(hl), a
		ld	a, (1C0Dh)
		or	a
		jp	nz, Reset_SoundChips
		ld	ix, 1C40h
		ld	b, 7

loc_780:				; CODE XREF: sub_760+37j
		ld	a, (1C11h)
		or	a
		jr	nz, loc_78C
		bit	7, (ix+0)
		jr	z, loc_792

loc_78C:				; CODE XREF: sub_760+24j
		ld	c, (ix+0Ah)
		ld	a, 0B4h	; '¥'
		rst	18h

loc_792:				; CODE XREF: sub_760+2Aj
		ld	de, 30h	; '0'
		add	ix, de
		djnz	loc_780
		ld	ix, 1E20h
		ld	b, 8

loc_79F:				; CODE XREF: sub_760+56j
		bit	7, (ix+0)
		jr	z, loc_7B1
		bit	7, (ix+1)
		jr	nz, loc_7B1
		ld	c, (ix+0Ah)
		ld	a, 0B4h	; '¥'
		rst	18h

loc_7B1:				; CODE XREF: sub_760+43j sub_760+49j
		ld	de, 30h	; '0'
		add	ix, de
		djnz	loc_79F
		ret
; End of function sub_760

; ---------------------------------------------------------------------------
		db  3Eh	; >
		db  28h	; (
		db  32h	; 2
		db  0Dh
		db  1Ch
		db  3Eh	; >
		db    6
		db  32h	; 2
		db  0Fh
		db  1Ch
		db  32h	; 2
		db  0Eh
		db  1Ch

; =============== S U B	R O U T	I N E =======================================


sub_7C6:				; CODE XREF: sub_7D9+6p
		xor	a
		ld	(1C40h), a
		ld	(1D60h), a
		ld	(1DF0h), a
		ld	(1D90h), a
		ld	(1DC0h), a
		jp	SN76489_ResetVolumes
; End of function sub_7C6


; =============== S U B	R O U T	I N E =======================================


sub_7D9:				; CODE XREF: sub_E9+6p
		ld	hl, 1C0Dh
		ld	a, (hl)
		or	a
		ret	z
		call	m, sub_7C6
		res	7, (hl)
		ld	a, (1C0Fh)
		dec	a
		jr	z, loc_7EE
		ld	(1C0Fh), a
		ret
; ---------------------------------------------------------------------------

loc_7EE:				; CODE XREF: sub_7D9+Fj
		ld	a, (1C0Eh)
		ld	(1C0Fh), a
		ld	a, (1C0Dh)
		dec	a
		ld	(1C0Dh), a
		jr	z, Reset_SoundChips
		ld	hl, 1C04h
		ld	a, (hl)
		ld	hl, 6000h
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		rra
		ld	(hl), a
		xor	a
		ld	(hl), a
		ld	(hl), a
		ld	(hl), a
		ld	hl, 1C06h
		inc	(hl)
		ld	ix, 1C40h
		ld	b, 6

loc_81D:				; CODE XREF: sub_7D9+5Aj
		bit	7, (ix+0)
		jr	z, loc_82E
		bit	2, (ix+0)
		jr	nz, loc_82E
		push	bc
		call	sub_B0F
		pop	bc

loc_82E:				; CODE XREF: sub_7D9+48j sub_7D9+4Ej
		ld	de, 30h	; '0'
		add	ix, de
		djnz	loc_81D
		ret
; End of function sub_7D9


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reset the sound chips (Muting them)
; ---------------------------------------------------------------------------

Reset_SoundChips:					; Offset: 0836
		ld	hl,01C09h
		ld	de,01C0Ah				; load Music ID address to de
		ld	bc,00396h				; set repeat times
		ld	(hl),000h				; set Music ID to 00
		ldir						; move byte from hl address to de address, and decrement bc until null
		ld	ix,Channel_ChipIDs			; load address of channel chip ID's
		ld	b,006h					; set to reset 6 FM channels

RSC_NextFMChannel:					; Offset: 0849
		push	bc					; store b and c
		call	YM2612_ResetVolumes			; reset operator volumes
		call	YM2612_ResetProprietary			; reset operator proprietary
		inc	ix					; increase to next FM channel chip ID
		inc	ix					; ''
		pop	bc					; restore b and c
		djnz	RSC_NextFMChannel			; repeat til all FM channels have been reset
		ld	b,007h
		xor	a
		ld	(1C06h),a
		ld	(1C3Ch),a
		ld	(1C0Dh),a
		call	SN76489_ResetVolumes			; reset PSG channel volumes to mute
		ld	c,000h					; set to turn DAC off
		ld	a,02Bh					; set address to DAC on/off switch
		call	YM2612_WritePart1			; turn DAC off and FM 6 on

loc_86D:						; Offset: 086D
		xor	a
		ld	(1C12h),a
		ld	c,a
		ld	a,027h
		call	YM2612_WritePart1
		jp	loc_605

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reset proprietary of a channel's operators
; ---------------------------------------------------------------------------

YM2612_ResetProprietary:				; Offset: 087A
		ld	a,090h					; set YM2612 address to proprietary
		ld	c,000h					; set proprietary to null
		jp	YM2612_WriteOperators			; write to YM2612

; ===========================================================================

; ---------------------------------------------------------------------------

loc_881:				; CODE XREF: sub_760+Ej
		call	SN76489_ResetVolumes
		push	bc
		push	af
		ld	b, 3
		ld	a, 0B4h	; '¥'
		ld	c, 0

loc_88C:				; CODE XREF: ROM:0892j
		push	af
		call	YM2612_WritePart1
		pop	af
		inc	a
		djnz	loc_88C
		ld	b, 3
		ld	a, 0B4h	; '¥'

loc_898:				; CODE XREF: ROM:089Ej
		push	af
		call	YM2612_WritePart2
		pop	af
		inc	a
		djnz	loc_898
		ld	c, 0
		ld	b, 7
		ld	a, 28h ; '('

loc_8A6:				; CODE XREF: ROM:08ACj
		push	af
		call	YM2612_WritePart1
		inc	c
		pop	af
		djnz	loc_8A6
		pop	af
		pop	bc

; =============== S U B	R O U T	I N E =======================================


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reset the PSG channels
; ---------------------------------------------------------------------------

SN76489_ResetVolumes:					; Offset: 08B0
		push	bc					; store b and c
		ld	b,004h					; set number of PSG channels to reset (4 PSG)
		ld	a,09Fh					; set starting channel and it's volume (Mute)

SN76489_RVNextChannel:					; Offset: 08B5
		ld	(7F11h),a				; set PSG channel to mute
		add	a,020h					; increase to next channel
		djnz	SN76489_RVNextChannel			; repeat til all PSG channels have been muted
		pop	bc					; reload b and c
		jp	loc_605

; ===========================================================================


; =============== S U B	R O U T	I N E =======================================


sub_8C0:				; CODE XREF: sub_E9+3p
		ld	a, (1C14h)
		ld	hl, 1C13h
		add	a, (hl)
		ld	(hl), a
		ret	nc
		ld	hl, 1C4Bh
		ld	de, 30h	; '0'
		ld	b, 0Ah

loc_8D1:				; CODE XREF: sub_8C0+13j
		inc	(hl)
		add	hl, de
		djnz	loc_8D1
		ret
; End of function sub_8C0


; =============== S U B	R O U T	I N E =======================================


sub_8D6:				; CODE XREF: ROM:003Dp
		ld	a, r
		ld	(1C17h), a
		ld	de, 1C0Ah
		ld	b, 3

loc_8E0:				; CODE XREF: sub_8D6+32j
		ld	a, (de)
		ld	c, a
		bit	7, a
		jr	z, loc_905
		sub	86h ; 'Ü'
		jp	c, loc_90B
		sub	1Ah
		ld	hl, 1185h
		add	a, l
		ld	l, a
		adc	a, h
		sub	l
		ld	h, a
		ld	a, (1C18h)
		cp	(hl)
		jr	z, loc_8FD
		jr	nc, loc_905

loc_8FD:				; CODE XREF: sub_8D6+23j
		ld	a, c
		ld	(1C09h), a
		ld	a, (hl)
		ld	(1C18h), a

loc_905:				; CODE XREF: sub_8D6+Ej sub_8D6+25j
		xor	a
		ld	(de), a
		inc	de
		djnz	loc_8E0
		ret
; ---------------------------------------------------------------------------

loc_90B:				; CODE XREF: sub_8D6+12j
		ld	a, c
		ld	(1C09h), a
		xor	a
		ld	(1C18h), a
		ld	de, 1C0Ah
		ld	(de), a
		inc	de
		ld	(de), a
		inc	de
		ld	(de), a
		ret
; End of function sub_8D6


; =============== S U B	R O U T	I N E =======================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reset channel operator values
; ---------------------------------------------------------------------------

YM2612_ResetVolumes:					; Offset: 091C
		call	YM2612_ResetD1LRR			; reset D1L/RR values
		ld	a,040h					; set address to total volume level address
		ld	c,07Fh					; set total volume level to it's lowest
		call	YM2612_WriteOperators			; save to channel's operators
		ld	c,(ix+1)				; load channel chip ID to write to
		jp	loc_2FC

YM2612_ResetD1LRR:					; Offset: 092C
		ld	a,080h					; set address to D1L/RR
		ld	c,0FFh					; prepare reset value

; ---------------------------------------------------------------------------
; Subroutine to write to the same space of 4 operators of the same channel
; ---------------------------------------------------------------------------

YM2612_WriteOperators:					; Offset: 0930
		ld	b,004h					; set repeat times (check 4 operators)

YM2612_NextOperator:					; Offset: 0932
		push	af					; store af data
		rst	YM2612_CheckMute			; write YM2612 data if channel isn't muted
		pop	af					; reload af data
		add	a,004h					; advance to next operator
		djnz	YM2612_NextOperator			; repeat for number of operators
		ret						; return

; ===========================================================================
; ---------------------------------------------------------------------------
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0FFh
		db    3
		db 0F7h	; ˜
		db    3
		db 0BEh	; æ
		db    3
		db  88h	; à
		db    3
		db  56h	; V
		db    3
		db  26h	; &
		db    3
		db 0F9h	; ˘
		db    2
		db 0CEh	; Œ
		db    2
		db 0A5h	; •
		db    2
		db  80h	; Ä
		db    2
		db 5Ch
		db    2
		db  3Ah	; :
		db    2
		db  1Ah
		db    2
		db 0FBh	; ˚
		db    1
		db 0DFh	; ﬂ
		db    1
		db 0C4h	; ƒ
		db    1
		db 0ABh	; ´
		db    1
		db  93h	; ì
		db    1
		db  7Dh	; }
		db    1
		db  67h	; g
		db    1
		db  53h	; S
		db    1
		db  40h	; @
		db    1
		db  2Eh	; .
		db    1
		db  1Dh
		db    1
		db  0Dh
		db    1
		db 0FEh	; ˛
		db    0
		db 0EFh	; Ô
		db    0
		db 0E2h	; ‚
		db    0
		db 0D6h	; ÷
		db    0
		db 0C9h	; …
		db    0
		db 0BEh	; æ
		db    0
		db 0B4h	; ¥
		db    0
		db 0A9h	; ©
		db    0
		db 0A0h	; †
		db    0
		db  97h	; ó
		db    0
		db  8Fh	; è
		db    0
		db  87h	; á
		db    0
		db  7Fh	; 
		db    0
		db  78h	; x
		db    0
		db  71h	; q
		db    0
		db  6Bh	; k
		db    0
		db  65h	; e
		db    0
		db  5Fh	; _
		db    0
		db  5Ah	; Z
		db    0
		db  55h	; U
		db    0
		db  50h	; P
		db    0
		db  4Bh	; K
		db    0
		db  47h	; G
		db    0
		db  43h	; C
		db    0
		db  40h	; @
		db    0
		db  3Ch	; <
		db    0
		db  39h	; 9
		db    0
		db  36h	; 6
		db    0
		db  33h	; 3
		db    0
		db  30h	; 0
		db    0
		db  2Dh	; -
		db    0
		db  2Bh	; +
		db    0
		db  28h	; (
		db    0
		db  26h	; &
		db    0
		db  24h	; $
		db    0
		db  22h	; "
		db    0
		db  20h
		db    0
		db  1Fh
		db    0
		db  1Dh
		db    0
		db  1Bh
		db    0
		db  1Ah
		db    0
		db  18h
		db    0
		db  17h
		db    0
		db  16h
		db    0
		db  15h
		db    0
		db  13h
		db    0
		db  12h
		db    0
		db  11h
		db    0
		db  10h
		db    0
		db    0
		db    0
		db    0
		db    0
		db  84h	; Ñ
		db    2
		db 0ABh	; ´
		db    2
		db 0D3h	; ”
		db    2
		db 0FEh	; ˛
		db    2
		db  2Dh	; -
		db    3
		db 5Ch
		db    3
		db  8Fh	; è
		db    3
		db 0C5h	; ≈
		db    3
		db 0FFh
		db    3
		db  3Ch	; <
		db    4
		db  7Ch	; |
		db    4
		db 0C0h	; ¿
		db    4

; =============== S U B	R O U T	I N E =======================================


sub_9FA:				; CODE XREF: sub_E9+31p
		call	sub_2CF
		call	z, sub_A01
		ret
; End of function sub_9FA


; =============== S U B	R O U T	I N E =======================================


sub_A01:				; CODE XREF: sub_9FA+3p
		ld	e, (ix+3)
		ld	d, (ix+4)
		ld	a, (de)
		inc	de
		cp	0E0h ; '‡'
		jp	nc, loc_A4E
		or	a
		jp	m, loc_A16
		dec	de
		ld	a, (ix+0Dh)

loc_A16:				; CODE XREF: sub_A01+Ej
		ld	(ix+0Dh), a
		or	a
		jp	p, loc_A3E
		push	de
		sub	80h ; 'Ä'
		jp	z, loc_A38
		ld	hl, 1D60h
		set	2, (hl)
		ex	af, af'
		call	sub_2F0
		ex	af, af'
		ld	hl, 1C40h
		bit	2, (hl)
		jp	nz, loc_A38
		ld	(1C3Ch), a

loc_A38:				; CODE XREF: sub_A01+1Fj sub_A01+31j
		pop	de
		ld	hl, 1D60h
		res	2, (hl)

loc_A3E:				; CODE XREF: sub_A01+19j
		ld	a, (de)
		inc	de
		or	a
		jp	p, loc_29D
		dec	de
		ld	a, (ix+0Ch)
		ld	(ix+0Bh), a
		jp	loc_2A3
; ---------------------------------------------------------------------------

loc_A4E:				; CODE XREF: sub_A01+Aj
		ld	hl, 0A54h
		jp	loc_A5B
; ---------------------------------------------------------------------------
		db  13h
		db 0C3h	; √
		db    7
		db  0Ah
; ---------------------------------------------------------------------------

loc_A58:				; CODE XREF: sub_1FD+12j
		ld	hl, 0A64h

loc_A5B:				; CODE XREF: sub_A01+50j
		push	hl
		sub	0E0h ; '‡'
		ld	hl, 0A68h
		rst	8
		ld	a, (de)
		jp	(hl)
; End of function sub_A01

; ---------------------------------------------------------------------------
		db  13h
		db 0C3h	; √
		db  0Bh
		db    2
		db 0BFh	; ø
		db  0Ah
		db 0DBh	; €
		db  0Ah
		db 0DFh	; ﬂ
		db  0Ah
		db 0E3h	; „
		db  0Ah
		db 0E9h	; È
		db  0Ah
		db 0FCh	; ¸
		db  0Ah
		db    4
		db  0Bh
		db  3Eh	; >
		db  0Bh
		db  44h	; D
		db  0Bh
		db 0D0h	; –
		db  0Ah
		db 0B6h	; ∂
		db  0Ah
		db  4Eh	; N
		db  0Bh
		db  64h	; d
		db  0Bh
		db  7Eh	; ~
		db  0Bh
		db  83h	; É
		db  0Bh
		db  90h	; ê
		db  0Bh
		db 0CDh	; Õ
		db  0Bh
		db 0DBh	; €
		db  0Bh
		db 0E7h	; Á
		db  0Bh
		db 0ABh	; ´
		db  0Ch
		db 0E3h	; „
		db  0Bh
		db 0CAh	;  
		db  0Ch
		db 0D3h	; ”
		db  0Ch
		db 0D9h	; Ÿ
		db  0Ch
		db 0F0h	; 
		db  0Ch
		db  0Ah
		db  0Dh
		db  1Dh
		db  0Dh
		db  21h	; !
		db  0Dh
		db  28h	; (
		db  0Dh
		db  3Eh	; >
		db  0Dh
		db  4Ch	; L
		db  0Dh
		db  93h	; ì
		db  0Dh
		db  9Ah	; ö
		db  0Dh
		db 0A1h	; °
		db  0Dh
		db 0A5h	; •
		db  0Dh
		db 0E0h	; ‡
		db  0Dh
		db 0EEh	; Ó
		db  0Dh
		db 0FDh	; ˝
		db  0Dh
		db  16h
		db  0Eh
		db  32h	; 2
		db  3Ch	; <
		db  1Ch
		db  21h	; !
		db  40h	; @
		db  1Ch
		db 0CBh	; À
		db 0D6h	; ÷
		db 0C9h	; …

; =============== S U B	R O U T	I N E =======================================


sub_ABF:				; CODE XREF: sub_306+3Fp
		ld	c, 3Fh ; '?'
		ld	a, (ix+0Ah)
		and	c
		ex	de, hl
		or	(hl)
		ld	(ix+0Ah), a
		ld	c, a
		ld	a, 0B4h	; '¥'
		rst	18h
		ex	de, hl
		ret
; End of function sub_ABF

; ---------------------------------------------------------------------------
		db  4Fh	; O
		db  3Eh	; >
		db  22h	; "
		db 0CDh	; Õ
		db  26h	; &
		db    0
		db  13h
		db  0Eh
		db 0C0h	; ¿
		db  18h
		db 0E6h	; Ê
		db 0DDh	; ›
		db  77h	; w
		db  10h
		db 0C9h	; …
		db  32h	; 2
		db  16h
		db  1Ch
		db 0C9h	; …
		db 0CDh	; Õ
		db  1Ch
		db    9
		db 0C3h	; √
		db 0E7h	; Á
		db  0Bh
		db 0DDh	; ›
		db 0E5h	; Â
		db 0E1h	; ·
		db    1
		db  11h
		db    0
		db    9
		db 0EBh	; Î
		db    1
		db    5
		db    0
		db 0EDh	; Ì
		db 0B0h	; ∞
		db  3Eh	; >
		db    1
		db  12h
		db 0EBh	; Î
		db  1Bh
		db 0C9h	; …
		db  13h
		db 0DDh	; ›
		db  86h	; Ü
		db    6
		db 0DDh	; ›
		db  77h	; w
		db    6
		db  1Ah
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  7Eh	; ~
		db 0C0h	; ¿
		db 0DDh	; ›
		db  86h	; Ü
		db    6
		db 0DDh	; ›
		db  77h	; w
		db    6

; =============== S U B	R O U T	I N E =======================================


sub_B0F:				; CODE XREF: sub_7D9+51p
		push	de
		ld	de, 4DAh
		ld	l, (ix+1Ch)
		ld	h, (ix+1Dh)
		ld	b, 4

loc_B1B:				; CODE XREF: sub_B0F+2Bj
		ld	a, (hl)
		or	a
		jp	p, loc_B33
		add	a, (ix+6)
		jp	m, loc_B28
		ld	a, 0FFh

loc_B28:				; CODE XREF: sub_B0F+14j
		push	hl
		ld	hl, 1C06h
		add	a, (hl)
		jp	m, loc_B32
		ld	a, 0FFh

loc_B32:				; CODE XREF: sub_B0F+1Ej
		pop	hl

loc_B33:				; CODE XREF: sub_B0F+Ej
		and	7Fh ; ''
		ld	c, a
		ld	a, (de)
		rst	18h
		inc	de
		inc	hl
		djnz	loc_B1B
		pop	de
		ret
; End of function sub_B0F

; ---------------------------------------------------------------------------
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0CEh	; Œ
		db  1Bh
		db 0C9h	; …
		db 0CDh	; Õ
		db 0C5h	; ≈
		db    2
		db 0DDh	; ›
		db  77h	; w
		db  1Eh
		db 0DDh	; ›
		db  77h	; w
		db  1Fh
		db 0C9h	; …
		db  13h
		db 0C6h	; ∆
		db  28h	; (
		db  4Fh	; O
		db    6
		db    0
		db 0DDh	; ›
		db 0E5h	; Â
		db 0E1h	; ·
		db    9
		db  7Eh	; ~
		db  3Dh	; =
		db 0CAh	;  
		db  5Fh	; _
		db  0Bh
		db  13h
		db 0C9h	; …
		db 0AFh	; Ø
		db  77h	; w
		db 0C3h	; √
		db 0D3h	; ”
		db  0Ch
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  7Eh	; ~
		db 0C8h	; »
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0A6h	; ¶
		db 0DDh	; ›
		db  35h	; 5
		db  17h
		db 0DDh	; ›
		db  86h	; Ü
		db    6
		db 0FEh	; ˛
		db  0Fh
		db 0DAh	; ⁄
		db  7Ah	; z
		db  0Bh
		db  3Eh	; >
		db  0Fh
		db 0DDh	; ›
		db  77h	; w
		db    6
		db 0C9h	; …
		db 0CDh	; Õ
		db  8Ah	; ä
		db  0Bh
		db 0DFh	; ﬂ
		db 0C9h	; …
		db 0CDh	; Õ
		db  8Ah	; ä
		db  0Bh
		db 0CDh	; Õ
		db  26h	; &
		db    0
		db 0C9h	; …
		db 0EBh	; Î
		db  7Eh	; ~
		db  23h	; #
		db  4Eh	; N
		db 0EBh	; Î
		db 0C9h	; …
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  7Eh	; ~
		db  20h
		db  33h	; 3
		db 0CDh	; Õ
		db  2Ch	; ,
		db    9
		db  1Ah
		db 0DDh	; ›
		db  77h	; w
		db    8
		db 0B7h	; ∑
		db 0F2h	; Ú
		db 0BFh	; ø
		db  0Bh
		db  13h
		db  1Ah
		db 0DDh	; ›
		db  77h	; w
		db  0Fh
		db 0D5h	; ’
		db 0DDh	; ›
		db  7Eh	; ~
		db  0Fh
		db 0D6h	; ÷
		db  81h	; Å
		db  21h	; !
		db  53h	; S
		db  11h
		db 0CFh	; œ
		db  7Eh	; ~
		db  23h	; #
		db  66h	; f
		db  6Fh	; o
		db 0DDh	; ›
		db  7Eh	; ~
		db    8
		db 0E6h	; Ê
		db  7Fh	; 
		db  47h	; G
		db 0CDh	; Õ
		db 0BBh	; ª
		db    4
		db  18h
		db    5
		db 0D5h	; ’
		db  47h	; G
		db 0CDh	; Õ
		db 0ACh	; ¨
		db    4
		db 0CDh	; Õ
		db 0E2h	; ‚
		db    4
		db 0D1h	; —
		db 0C9h	; …
		db 0B7h	; ∑
		db 0F0h	; 
		db  13h
		db 0C9h	; …
		db 0DDh	; ›
		db  73h	; s
		db  20h
		db 0DDh	; ›
		db  72h	; r
		db  21h	; !
		db 0DDh	; ›
		db  36h	; 6
		db    7
		db  80h	; Ä
		db  13h
		db  13h
		db  13h
		db 0C9h	; …
		db  13h
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  7Eh	; ~
		db  20h
		db    1
		db  1Ah
		db 0DDh	; ›
		db  77h	; w
		db    7
		db 0C9h	; …
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0BEh	; æ
		db  3Eh	; >
		db  1Fh
		db  32h	; 2
		db  15h
		db  1Ch
		db 0CDh	; Õ
		db 0F0h	; 
		db    2
		db 0DDh	; ›
		db  4Eh	; N
		db    1
		db 0DDh	; ›
		db 0E5h	; Â
		db 0CDh	; Õ
		db 0D7h	; ◊
		db    6
		db  3Ah	; :
		db  19h
		db  1Ch
		db 0B7h	; ∑
		db 0CAh	;  
		db  94h	; î
		db  0Ch
		db 0AFh	; Ø
		db  32h	; 2
		db  18h
		db  1Ch
		db 0FDh	; ˝
		db 0CBh	; À
		db    0
		db  7Eh	; ~
		db  28h	; (
		db  12h
		db 0DDh	; ›
		db  7Eh	; ~
		db    1
		db 0FDh	; ˝
		db 0BEh	; æ
		db    1
		db  20h
		db  0Ah
		db 0FDh	; ˝
		db 0E5h	; Â
		db 0FDh	; ˝
		db  6Eh	; n
		db  2Ah	; *
		db 0FDh	; ˝
		db  66h	; f
		db  2Bh	; +
		db  18h
		db    4
		db 0E5h	; Â
		db  2Ah	; *
		db  37h	; 7
		db  1Ch
		db 0DDh	; ›
		db 0E1h	; ·
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  96h	; ñ
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  7Eh	; ~
		db  20h
		db  6Bh	; k
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  7Eh	; ~
		db  28h	; (
		db  60h	; `
		db  3Eh	; >
		db    2
		db 0DDh	; ›
		db 0BEh	; æ
		db    1
		db  20h
		db  0Dh
		db  3Eh	; >
		db  4Fh	; O
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  46h	; F
		db  20h
		db    2
		db 0E6h	; Ê
		db  0Fh
		db 0CDh	; Õ
		db  75h	; u
		db  0Dh
		db 0DDh	; ›
		db  7Eh	; ~
		db    8
		db 0B7h	; ∑
		db 0F2h	; Ú
		db  54h	; T
		db  0Ch
		db 0CDh	; Õ
		db 0A6h	; ¶
		db  0Bh
		db  18h
		db  3Dh	; =
		db  47h	; G
		db 0E5h	; Â
		db  21h	; !
		db    4
		db  1Ch
		db  7Eh	; ~
		db  21h	; !
		db    0
		db  60h	; `
		db  77h	; w
		db  1Fh
		db  77h	; w
		db  1Fh
		db  77h	; w
		db  1Fh
		db  77h	; w
		db  1Fh
		db  77h	; w
		db  1Fh
		db  77h	; w
		db 0AFh	; Ø
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db 0E1h	; ·
		db 0CDh	; Õ
		db 0BBh	; ª
		db    4
		db 0CDh	; Õ
		db 0E2h	; ‚
		db    4
		db 0E5h	; Â
		db  21h	; !
		db    0
		db  60h	; `
		db 0AFh	; Ø
		db  1Eh
		db    1
		db  73h	; s
		db  73h	; s
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db  77h	; w
		db 0E1h	; ·
		db 0DDh	; ›
		db  7Eh	; ~
		db  18h
		db 0B7h	; ∑
		db 0F2h	; Ú
		db  94h	; î
		db  0Ch
		db 0DDh	; ›
		db  5Eh	; ^
		db  19h
		db 0DDh	; ›
		db  56h	; V
		db  1Ah
		db 0CDh	; Õ
		db    7
		db  0Eh
		db 0DDh	; ›
		db 0E1h	; ·
		db 0E1h	; ·
		db 0E1h	; ·
		db 0C9h	; …
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  46h	; F
		db  28h	; (
		db 0F5h	; ı
		db 0DDh	; ›
		db  7Eh	; ~
		db  1Ah
		db 0B7h	; ∑
		db 0F2h	; Ú
		db 0A9h	; ©
		db  0Ch
		db  32h	; 2
		db  11h
		db  7Fh	; 
		db  18h
		db 0E9h	; È
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  56h	; V
		db 0C0h	; ¿
		db  3Eh	; >
		db 0DFh	; ﬂ
		db  32h	; 2
		db  11h
		db  7Fh	; 
		db  1Ah
		db 0DDh	; ›
		db  77h	; w
		db  1Ah
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0C6h	; ∆
		db 0B7h	; ∑
		db  20h
		db    6
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  86h	; Ü
		db  3Eh	; >
		db 0FFh
		db  32h	; 2
		db  11h
		db  7Fh	; 
		db 0C9h	; …
		db 0DDh	; ›
		db 0CBh	; À
		db    1
		db  7Eh	; ~
		db 0C8h	; »
		db 0DDh	; ›
		db  77h	; w
		db    8
		db 0C9h	; …
		db 0EBh	; Î
		db  5Eh	; ^
		db  23h	; #
		db  56h	; V
		db  1Bh
		db 0C9h	; …
		db  13h
		db 0C6h	; ∆
		db  28h	; (
		db  4Fh	; O
		db    6
		db    0
		db 0DDh	; ›
		db 0E5h	; Â
		db 0E1h	; ·
		db    9
		db  7Eh	; ~
		db 0B7h	; ∑
		db  20h
		db    2
		db  1Ah
		db  77h	; w
		db  13h
		db  35h	; 5
		db 0C2h	; ¬
		db 0D3h	; ”
		db  0Ch
		db  13h
		db 0C9h	; …
		db  4Fh	; O
		db  13h
		db  1Ah
		db  47h	; G
		db 0C5h	; ≈
		db 0DDh	; ›
		db 0E5h	; Â
		db 0E1h	; ·
		db 0DDh	; ›
		db  35h	; 5
		db    9
		db 0DDh	; ›
		db  4Eh	; N
		db    9
		db 0DDh	; ›
		db  35h	; 5
		db    9
		db    6
		db    0
		db    9
		db  72h	; r
		db  2Bh	; +
		db  73h	; s
		db 0D1h	; —
		db  1Bh
		db 0C9h	; …
		db 0DDh	; ›
		db 0E5h	; Â
		db 0E1h	; ·
		db 0DDh	; ›
		db  4Eh	; N
		db    9
		db    6
		db    0
		db    9
		db  5Eh	; ^
		db  23h	; #
		db  56h	; V
		db 0DDh	; ›
		db  34h	; 4
		db    9
		db 0DDh	; ›
		db  34h	; 4
		db    9
		db 0C9h	; …
		db 0DDh	; ›
		db  77h	; w
		db    2
		db 0C9h	; …
		db 0DDh	; ›
		db  86h	; Ü
		db    5
		db 0DDh	; ›
		db  77h	; w
		db    5
		db 0C9h	; …
		db 0FEh	; ˛
		db    1
		db  20h
		db    5
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0EEh	; Ó
		db 0C9h	; …
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  8Eh	; é
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0AEh	; Æ
		db 0AFh	; Ø
		db 0DDh	; ›
		db  77h	; w
		db  10h
		db 0C9h	; …
		db 0FEh	; ˛
		db    1
		db  20h
		db    5
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0DEh	; ﬁ
		db 0C9h	; …
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db  9Eh	; û
		db 0C9h	; …
		db 0DDh	; ›
		db  7Eh	; ~
		db    1
		db 0FEh	; ˛
		db    2
		db  20h
		db  2Ch	; ,
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0C6h	; ∆
		db 0EBh	; Î
		db 0CDh	; Õ
		db 0EDh	; Ì
		db    1
		db    6
		db    4
		db 0C5h	; ≈
		db  7Eh	; ~
		db  23h	; #
		db 0E5h	; Â
		db  21h	; !
		db  83h	; É
		db  0Dh
		db  87h	; á
		db  4Fh	; O
		db    6
		db    0
		db    9
		db 0EDh	; Ì
		db 0A0h	; †
		db 0EDh	; Ì
		db 0A0h	; †
		db 0E1h	; ·
		db 0C1h	; ¡
		db  10h
		db 0ECh	; Ï
		db 0EBh	; Î
		db  1Bh
		db  3Eh	; >
		db  4Fh	; O
		db  32h	; 2
		db  12h
		db  1Ch
		db  4Fh	; O
		db  3Eh	; >
		db  27h	; '
		db 0CDh	; Õ
		db  26h	; &
		db    0
		db 0C9h	; …
		db  13h
		db  13h
		db  13h
		db 0C9h	; …
		db    0
		db    0
		db  32h	; 2
		db    1
		db  8Eh	; é
		db    1
		db 0E4h	; ‰
		db    1
		db  34h	; 4
		db    2
		db  7Eh	; ~
		db    2
		db 0C2h	; ¬
		db    2
		db 0F0h	; 
		db    2
		db  21h	; !
		db 0A8h	; ®
		db  0Ah
		db 0CFh	; œ
		db  13h
		db  1Ah
		db 0E9h	; È
		db  32h	; 2
		db  14h
		db  1Ch
		db  32h	; 2
		db  13h
		db  1Ch
		db 0C9h	; …
		db  32h	; 2
		db    9
		db  1Ch
		db 0C9h	; …
		db  32h	; 2
		db  11h
		db  1Ch
		db 0B7h	; ∑
		db  28h	; (
		db  1Dh
		db 0DDh	; ›
		db 0E5h	; Â
		db 0D5h	; ’
		db 0DDh	; ›
		db  21h	; !
		db  40h	; @
		db  1Ch
		db    6
		db  0Ah
		db  11h
		db  30h	; 0
		db    0
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0BEh	; æ
		db 0CDh	; Õ
		db 0F6h	; ˆ
		db    2
		db 0DDh	; ›
		db  19h
		db  10h
		db 0F5h	; ı
		db 0D1h	; —
		db 0DDh	; ›
		db 0E1h	; ·
		db 0C3h	; √
		db 0B0h	; ∞
		db    8
		db 0DDh	; ›
		db 0E5h	; Â
		db 0D5h	; ’
		db 0DDh	; ›
		db  21h	; !
		db  40h	; @
		db  1Ch
		db    6
		db  0Ah
		db  11h
		db  30h	; 0
		db    0
		db 0DDh	; ›
		db 0CBh	; À
		db    0
		db 0FEh	; ˛
		db 0DDh	; ›
		db  19h
		db  10h
		db 0F8h	; ¯
		db 0D1h	; —
		db 0DDh	; ›
		db 0E1h	; ·
		db 0C9h	; …
		db 0EBh	; Î
		db  5Eh	; ^
		db  23h	; #
		db  56h	; V
		db  23h	; #
		db  4Eh	; N
		db    6
		db    0
		db  23h	; #
		db 0EBh	; Î
		db 0EDh	; Ì
		db 0B0h	; ∞
		db  1Bh
		db 0C9h	; …
		db    6
		db  0Ah
		db  21h	; !
		db  42h	; B
		db  1Ch
		db 0C5h	; ≈
		db    1
		db  30h	; 0
		db    0
		db  77h	; w
		db    9
		db 0C1h	; ¡
		db  10h
		db 0F7h	; ˜
		db 0C9h	; …
		db 0DDh	; ›
		db  36h	; 6
		db  18h
		db  80h	; Ä
		db 0DDh	; ›
		db  73h	; s
		db  19h
		db 0DDh	; ›
		db  72h	; r
		db  1Ah
		db  21h	; !
		db 0DEh	; ﬁ
		db    4
		db    6
		db    4
		db  1Ah
		db  13h
		db  4Fh	; O
		db  7Eh	; ~
		db  23h	; #
		db 0DFh	; ﬂ
		db  10h
		db 0F8h	; ¯
		db  1Bh
		db 0C9h	; …
		db 0DDh	; ›
		db  77h	; w
		db  18h
		db  13h
		db  1Ah
		db 0DDh	; ›
		db  77h	; w
		db  19h
		db 0C9h	; …
; ---------------------------------------------------------------------------

loc_E1F:				; CODE XREF: sub_15E+4j
		call	sub_2CF
		jr	nz, loc_E31
		call	sub_1FD
		bit	4, (ix+0)
		ret	nz
		call	sub_395
		jr	loc_E3D
; ---------------------------------------------------------------------------

loc_E31:				; CODE XREF: ROM:0E22j
		ld	a, (ix+1Eh)
		or	a
		jr	z, loc_E3D
		dec	(ix+1Eh)
		jp	z, sub_EC7

loc_E3D:				; CODE XREF: ROM:0E2Fj	ROM:0E35j
		call	sub_466
		call	sub_3C0
		bit	2, (ix+0)
		ret	nz
		ld	c, (ix+1)
		ld	a, l
		and	0Fh
		or	c
		ld	(7F11h), a
		ld	a, l
		and	0F0h ; ''
		or	h
		rrca
		rrca
		rrca
		rrca
		ld	(7F11h), a
		ld	a, (ix+8)
		or	a
		ld	c, 0
		jr	z, loc_E6E
		dec	a
		ld	hl,PSGTable
		rst	8
		call	sub_E95
		ld	c, a

loc_E6E:				; CODE XREF: ROM:0E63j
		bit	4, (ix+0)
		ret	nz
		ld	a, (ix+6)
		add	a, c
		bit	4, a
		jr	z, loc_E7D
		ld	a, 0Fh

loc_E7D:				; CODE XREF: ROM:0E79j
		or	(ix+1)
		add	a, 10h
		bit	0, (ix+0)
		jr	nz, loc_E8C
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

loc_E8C:				; CODE XREF: ROM:0E86j
		add	a, 20h ; ' '
		ld	(7F11h), a
		ret
; ---------------------------------------------------------------------------

loc_E92:				; CODE XREF: sub_E95+1Bj sub_E95+26j
		ld	(ix+17h), a

; =============== S U B	R O U T	I N E =======================================


sub_E95:				; CODE XREF: sub_366+Bp ROM:0E6Ap
		push	hl
		ld	c, (ix+17h)
		ld	b, 0
		add	hl, bc
		ld	a, (hl)
		pop	hl
		bit	7, a
		jr	z, loc_EC3
		cp	83h ; 'É'
		jr	z, loc_EB2
		cp	81h ; 'Å'
		jr	z, loc_EBD
		cp	80h ; 'Ä'
		jr	z, loc_EBA
		inc	bc
		ld	a, (bc)
		jr	loc_E92
; ---------------------------------------------------------------------------

loc_EB2:				; CODE XREF: sub_E95+Fj
		set	4, (ix+0)
		pop	hl
		jp	sub_EC7
; ---------------------------------------------------------------------------

loc_EBA:				; CODE XREF: sub_E95+17j
		xor	a
		jr	loc_E92
; ---------------------------------------------------------------------------

loc_EBD:				; CODE XREF: sub_E95+13j
		pop	hl
		set	4, (ix+0)
		ret
; ---------------------------------------------------------------------------

loc_EC3:				; CODE XREF: sub_E95+Bj
		inc	(ix+17h)
		ret
; End of function sub_E95


; =============== S U B	R O U T	I N E =======================================


sub_EC7:				; CODE XREF: sub_1FD+2Dp ROM:0E3Aj ...
		set	4, (ix+0)
		bit	2, (ix+0)
		ret	nz
; End of function sub_EC7


; =============== S U B	R O U T	I N E =======================================


sub_ED0:				; CODE XREF: sub_6D7+Ep
		ld	a, 1Fh
		add	a, (ix+1)
		or	a
		ret	p
		ld	(7F11h), a
		bit	0, (ix+0)
		ret	z
		ld	a, 0FFh
		ld	(7F11h), a
		ret
; End of function sub_ED0

; ===========================================================================
; ---------------------------------------------------------------------------
; Main Loop (DAC/PCM samples are played until Z80 is interrupted for FM/PSG)
; ---------------------------------------------------------------------------

SMPS_MainLoop:						; Offset: 0EE5
		di						; disable interrupts
		ld	a,02Bh					; set address to DAC on/off switch
		ld	c,000h					; set to turn DAC off and FM 6 on
		call	YM2612_WritePart1			; write to YM2612

loc_EED:						; Offset: 0EED
		ei						; enable interrupts
		ld	a,d					; load size
		or	e					; fuse lower byte with upper byte
		jr	z,loc_EED				; if zero, branch until a size has been set (requested)
		ei						; enable interrupts

; ---------------------------------------------------------------------------
; Dumping left ADPCM nybble as byte 0A
; ---------------------------------------------------------------------------

DAC_DumpByte0A:						; Offset: 0EF3
		ld	b,0Ah					; load pitch (delay time)
		djnz	$					; delay (causes the pitch to be lower)
		ld	a,(hl)					; load ASPCM sample byte
		rlca						; get left nybble first
		rlca						; ''
		rlca						; ''
		rlca						; ''
		and	00Fh					; get only the left nybble
		ld	(DAC_Pitch0A+002h),a			; set which ADPCM jman byte to read
		ld	a,c					; load last PCM byte
DAC_Pitch0A:	add	a,(iy+000h)				; add ADPCM jman byte (00 is changed via software above)
		ld	c,a					; store in c as last PCM byte
		ld	a,02Ah					; prepare DAC address port ID
		di						; disable interrupts
		ld	(4000h),a				; set YM2612 address to DAC port
		ld	a,c					; load PCM byte to flush
		ld	(4001h),a				; save to YM2612 DAC port
		ei						; enable interrupts

; ---------------------------------------------------------------------------
; Dumping right ADPCM nybble as byte 0B
; ---------------------------------------------------------------------------

DAC_DumpByte0B:						; Offset: 0F11
		ld	b,00Ah					; load pitch (delay time)
		djnz	$					; delay (causes the pitch to be lower)
		ld	a,(hl)					; load ASPCM sample byte
		and	00Fh					; get only the right nybble
		ld	(DAC_Pitch0B+002h),a			; set which ADPCM jman byte to read
		ld	a,c					; load last PCM byte
DAC_Pitch0B:	add	a,(iy+000h)				; add ADPCM jman byte (00 is changed via software above)
		ld	c,a					; store in c as last PCM byte
		ld	a,02Ah					; prepare DAC address port ID
		di						; disable interrupts
		ld	(4000h),a				; set YM2612 address to DAC port
		ld	a,c					; load PCM byte to flush
		ld	(4001h),a				; save to YM2612 DAC port
		ei						; enable interrupts

; ---------------------------------------------------------------------------
; Checking for end of bankswitch window and end of sample size
; ---------------------------------------------------------------------------

		inc	hl					; increase to next ADPCM byte
		ld	a,h					; load right byte of location to a
		or	l					; or with left byte of location
		jp	nz,DAC_NoBankEnd			; if not null, it isn't the end of the bankswitch window, so branch
		ld	hl,08000h				; reset bankswitch address
		di						; disable interrupts
		exx						; exchange to other registers
		ld	hl,01C05h
		inc	(hl)
		ld	hl,01C05h				; load bankswitch data address
		ld	a,(hl)					; load bankswitch address
		ld	hl,06000h				; load bankswitch port address
		ld	(hl),a					; set bank address
		rra						; rotate a right
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		rra						; ''
		ld	(hl),a					; ''
		xor	a					; ''
		ld	(hl),a					; ''
		ld	(hl),a					; ''
		ld	(hl),a					; ''
		exx						; re-exchange to last registers
		ei						; enable interrupts

DAC_NoBankEnd:						; Offset: 0F52
		dec	de					; decrease size
		ld	a,d					; load right byte of counter to a
		or	e					; or with left byte of counter
		jp	nz,DAC_DumpByte0A			; if not null, it isn't finished, so branch
		ld	hl,01C40h
		res	002h,(hl)
		xor	a
		ld	(1C3Ch),a
		jp	SMPS_MainLoop				; loop

; ===========================================================================
; ---------------------------------------------------------------------------
; JMan2050's decompression table (The lossy compression found in Sonic 1)
; ---------------------------------------------------------------------------

DecTable:
		db	000h,001h,002h,004h
		db	008h,010h,020h,040h
		db	080h,0FFh,0FEh,0FCh
		db	0F8h,0F0h,0E0h,0C0h

; ---------------------------------------------------------------------------
; ===========================================================================
; ---------------------------------------------------------------------------
; PSG Tone Pointers
; ---------------------------------------------------------------------------

PSGTable:	dw	PSGTone_01
		dw	PSGTone_02
		dw	PSGTone_03
		dw	PSGTone_04
		dw	PSGTone_05
		dw	PSGTone_06
		dw	PSGTone_07
		dw	PSGTone_08
		dw	PSGTone_09
		dw	PSGTone_0A
		dw	PSGTone_0B
		dw	PSGTone_0C
; ---------------------------------------------------------------------------
PSGTone_01:	db	002h,083h
PSGTone_02:	db	000h,002h,004h,006h,008h,010h,083h
PSGTone_03:	db	002h,001h,000h,000h,001h,001h,002h,081h
PSGTone_04:	db	004h,003h,002h,001h,000h,000h,001h,001h,002h,002h,002h,081h
PSGTone_05:	db	003h,000h,001h,001h,001h,002h,003h,004h,004h,005h,081h
PSGTone_06:	db	000h,000h,001h,001h,002h,003h,004h,005h,005h,006h,008h,007h,007h,006h,081h
PSGTone_07:	db	001h,00Ch,003h,00Fh,002h,007h,003h,00Fh,080h
PSGTone_08:	db	000h,000h,000h,002h,003h,003h,004h,005h,006h,007h,008h,009h,00Ah,00Bh,00Eh,00Fh,083h
PSGTone_09:	db	003h,002h,001h,001h,000h,000h,001h,002h,003h,004h,081h
PSGTone_0A:	db	001h,000h,000h,000h,000h,001h,001h,001h,002h,002h,002h,003h,003h,003h,003h,004h,004h,004h,005h,005h
		db	081h
PSGTone_0B:	db	010h,020h,030h,040h,030h,020h,010h,000h,0F0h,080h
PSGTone_0C:	db	000h,000h,001h,001h,003h,003h,004h,005h,083h
; ---------------------------------------------------------------------------
; ===========================================================================
; ---------------------------------------------------------------------------
; Unknown
; ---------------------------------------------------------------------------

UnkTable:	dw	LocB_01
		dw	LocB_02
		dw	LocB_03
		dw	LocB_04
		dw	LocB_05
		dw	LocB_06
		dw	LocB_07
		dw	LocB_08
		dw	LocB_09
		dw	LocB_0A
; ---------------------------------------------------------------------------
LocB_01:	db	040h,060h,070h,060h,050h,030h,010h,0F0h,0D0h,0B0h,090h,083h
LocB_02:	db	000h,002h,004h,006h,008h,00Ah,00Ch,00Eh,010h,012h,014h,018h,081h
LocB_03:	db	000h,000h,001h,003h,001h,000h,0FFh,0FDh,0FFh,000h,082h,002h
LocB_04:	db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h
		db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h
		db	002h,004h,006h,008h,00Ah,00Ch,00Ah,008h,006h,004h,002h,000h,0FEh,0FCh,0FAh,0F8h,0F6h,0F4h,0F6h,0F8h
		db	0FAh,0FCh,0FEh,000h,082h,029h
LocB_05:	db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h
		db	000h,000h,000h,000h,000h,000h,000h,000h,002h,004h,006h,008h,00Ah,00Ch,00Ah,008h,006h,004h,002h,000h
		db	0FEh,0FCh,0FAh,0F8h,0F6h,0F4h,0F6h,0F8h,0FAh,0FCh,0FEh,082h,01Bh
LocB_06:	db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h
		db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h
		db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,003h,006h,003h,000h,0FDh,0FAh,0FAh,0FDh,000h,082h
		db	033h
LocB_07:	db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,002h,004h,002h,000h
		db	0FEh,0FCh,0FEh,000h,082h,011h
LocB_08:	db	0FEh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,001h,001h
		db	000h,000h,0FFh,0FFh,082h,011h
LocB_09:	db	003h,002h,001h,000h,000h,000h,001h,081h
LocB_0A:	db	000h,000h,000h,000h,001h,001h,001h,001h,002h,002h,001h,001h,001h,000h,000h,000h,084h,001h,082h,004h
		db	002h,002h,002h,002h,002h,002h
; ---------------------------------------------------------------------------
; ===========================================================================
; ---------------------------------------------------------------------------
; Music & SFX SMPS Pointers
; ---------------------------------------------------------------------------
; Music/BGM
; ---------------------------------------------------------------------------

BGMTable:	dw	09CC3h					; Music 81 - AKA This Horizon (Chaotix Featuring Knuckles)
		dw	08000h					; Music 82 - AKA Walkin' (Chaotix Featuring Knuckles)
		dw	0A299h					; Music 83 - AKA Hyper-Hyper (Chaotix Featuring Knuckles)
		dw	09210h					; Music 84 - AKA Evening Star (Chaotix Featuring Knuckles)
		dw	0972Bh					; Music 85 - AKA Moonrise (ChaotiX Featuring Knuckles)
		dw	09B1Eh					; Music 86 - AKA Game Over (Sonic The Hedgehog)

; ---------------------------------------------------------------------------
; SFX (Pointers are incorrectly aligned with the data)
; ---------------------------------------------------------------------------

SFXTable:	dw	0C000h					; Sound 00 - Jump SFX (Same as Sonic CD FM NO.02)
		dw	0C033h					; Sound 01 - Cash Machine SFX (Same as Sonic 1 SFX C5)
		dw	0C09Ah					; Sound 02 - strange noise (it has modulation of "01 01 28 00") (this MAY be a "get hit by spikes" SFX)
		dw	0C0C7h					; Sound 03 - Bomb explode SFX (Same as Sonic 1 SFX C4)
		dw	0C0EFh					; Sound 04 - Skidding SFX (Same as Sonic 1 SFX A4)
		dw	0C124h					; Sound 05 - Ring Loss SFX (Same as Sonic 1 SFX C6)
		dw	0C165h					; Sound 06 - Ring Collect SFX (Same as Sonic 1 SFX B5) (Plays on Right Speaker, may very well be the "right to left to right" speaker thing)
		dw	0C193h					; Sound 07 - Destroy Badnik/Monitor SFX (Same a Sonic 3 SFX 3D)
		dw	0C1E4h					; Sound 08 - Spring SFX (Same as Sonic 3 SFX B1)
		dw	0C23Fh					; Sound 09 - Check Point SFX (Same as Sonic 1 SFX A1)

; ---------------------------------------------------------------------------
; Null SFX (Pointers are incorrectly aligned with the data)
; ---------------------------------------------------------------------------

		dw	0C269h					; Sound 0A
		dw	0C28Dh					; Sound 0B
		dw	0C2B1h					; Sound 0C
		dw	0C2D5h					; Sound 0D
		dw	0C2F9h					; Sound 0E
		dw	0C31Dh					; Sound 0F

; ---------------------------------------------------------------------------
; Not sure why, but there's a repeated pattern of SFX data here
; ---------------------------------------------------------------------------

SFXTable_Unk:	dw	0C000h					; Sound 00 - Jump SFX (Same as Sonic CD FM NO.02)
		dw	0C033h					; Sound 01 - Cash Machine SFX (Same as Sonic 1 SFX C5)
		dw	0C0C7h					; Sound 03 - Bomb explode SFX (Same as Sonic 1 SFX C4)

; ---------------------------------------------------------------------------
; ===========================================================================
; ---------------------------------------------------------------------------
; Unknown block of 7F's
; ---------------------------------------------------------------------------

		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh,07Fh
		db	07Fh

; ---------------------------------------------------------------------------
; ===========================================================================
; ---------------------------------------------------------------------------
; PCM Samples Pointer Table
; ---------------------------------------------------------------------------

		dw	PCM01
		dw	PCM02
		dw	PCM03_Hi
		dw	PCM03_Mid
		dw	PCM03_Low
		dw	PCM04
		dw	PCM05

; ---------------------------------------------------------------------------
; PCM 01 (81) "Beat" - MC68 Rom Offset 00020000
; ---------------------------------------------------------------------------

PCM01:
		db	030h					; Pitch
		db	004h					; Unknown (Bank location divided by 2?)
		dw	001D4h					; Size
		dw	08000h					; Start location

; ---------------------------------------------------------------------------
; PCM 02 (82) "Snare" - MC68 Rom Offset 000201D4
; ---------------------------------------------------------------------------

PCM02:
		db	00Ah					; Pitch
		db	004h					; Unknown 
		dw	00DDEh					; Size
		dw	081D4h					; Start location

; ---------------------------------------------------------------------------
; PCM 03 (83) "Timpani/Tom-beat" (Hi) - MC68 Rom Offset 00020FB2
; ---------------------------------------------------------------------------

PCM03_Hi:
		db	00Ah					; Pitch
		db	004h					; Unknown 
		dw	006C0h					; Size
		dw	08FB2h					; Start location

; ---------------------------------------------------------------------------
; PCM 03 (84) "Timpani/Tom-beat" (Mid) - MC68 Rom Offset 00020FB2
; ---------------------------------------------------------------------------

PCM03_Mid:
		db	00Eh					; Pitch
		db	004h					; Unknown 
		dw	006C0h					; Size
		dw	08FB2h					; Start location

; ---------------------------------------------------------------------------
; PCM 03 (85) "Timpani/Tom-beat" (Low) - MC68 Rom Offset 00020FB2
; ---------------------------------------------------------------------------

PCM03_Low:
		db	010h					; Pitch
		db	004h					; Unknown 
		dw	006C0h					; Size
		dw	08FB2h					; Start location

; ---------------------------------------------------------------------------
; PCM 04 (86) "Let's Go" or "Ley'k Go" - MC68 Rom Offset 00021672
; ---------------------------------------------------------------------------

PCM04:
		db	00Ah					; Pitch
		db	004h					; Unknown 
		dw	0157Ch					; Size
		dw	09672h					; Start location

; ---------------------------------------------------------------------------
; PCM 05 (87) "Hey!" or "Hez!" - MC68 Rom Offset 00022BEE
; ---------------------------------------------------------------------------

PCM05:
		db	00Ah					; Pitch
		db	004h					; Unknown 
		dw	018B4h					; Size
		dw	0ABEEh					; Start location

; ---------------------------------------------------------------------------
; ===========================================================================