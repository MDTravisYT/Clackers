 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 1 - 11/2/2023 23:7:44


    1/       0 :                        z80_ptr function x,(x)<<8&$FF00|(x)>>8&$7F|$80
    2/       0 :                        
    3/       0 : =$0                    zeroOffsetOptimization	= 0
    4/       0 :                        
    5/       0 :                        	include "MacroSetup.asm"
(1)    1/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	listing purecode	; Want listing file, but only the final code in expanded macros
(1)    3/       0 :                     	page	0	; Don't want form feeds
(1)    4/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    5/       0 :                     
(1)    6/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)    7/       0 :                     
(1)    8/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)    9/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   10/       0 :                     org macro address
(1)   11/       0 :                     	if notZ80(MOMCPU)
(1)   12/       0 :                     		if address < *
(1)   13/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   14/       0 :                     		else
(1)   15/       0 :                     			!org address
(1)   16/       0 :                     		endif
(1)   17/       0 :                     	else
(1)   18/       0 :                     		if address < $
(1)   19/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   20/       0 :                     		else
(1)   21/       0 :                     			while address > $
(1)   22/       0 :                     				db 0
(1)   23/       0 :                     			endm
(1)   24/       0 :                     		endif
(1)   25/       0 :                     	endif
(1)   26/       0 :                         endm
(1)   27/       0 :                     
(1)   28/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   29/       0 :                     org0 macro address
(1)   30/       0 :                     .diff := address - *
(1)   31/       0 :                     	if .diff < 0
(1)   32/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-diff)} bytes)"
(1)   33/       0 :                     	else
(1)   34/       0 :                     		while .diff > 1024
(1)   35/       0 :                     			; AS can only generate 1 kb of code on a single line
(1)   36/       0 :                     			dc.b [1024]0
(1)   37/       0 :                     .diff := .diff - 1024
(1)   38/       0 :                     		endm
(1)   39/       0 :                     		dc.b [.diff]0
(1)   40/       0 :                     	endif
(1)   41/       0 :                         endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; define the cnop pseudo-instruction
(1)   44/       0 :                     cnop macro offset,alignment
(1)   45/       0 :                     	if notZ80(MOMCPU)
(1)   46/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   47/       0 :                     	else
(1)   48/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   49/       0 :                     	endif
(1)   50/       0 :                         endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   53/       0 :                     cnop0 macro offset,alignment
(1)   54/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   55/       0 :                         endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   58/       0 :                     align macro alignment
(1)   59/       0 :                     	cnop 0,alignment
(1)   60/       0 :                         endm
(1)   61/       0 :                     
(1)   62/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   63/       0 :                     align0 macro alignment
(1)   64/       0 :                     	cnop0 0,alignment
(1)   65/       0 :                         endm
(1)   66/       0 :                     
(1)   67/       0 :                     ; define the even pseudo-instruction
(1)   68/       0 :                     even macro
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if (*)&1
(1)   71/       0 :                     			dc.b 0 ;ds.b 1
(1)   72/       0 :                     		endif
(1)   73/       0 :                     	else
(1)   74/       0 :                     		if ($)&1
(1)   75/       0 :                     			db 0
(1)   76/       0 :                     		endif
(1)   77/       0 :                     	endif
(1)   78/       0 :                         endm
(1)   79/       0 :                     
(1)   80/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   81/       0 :                     ds macro
(1)   82/       0 :                     	if notZ80(MOMCPU)
(1)   83/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   84/       0 :                     	else
(1)   85/       0 :                     		rept ALLARGS
(1)   86/       0 :                     			db 0
(1)   87/       0 :                     		endm
(1)   88/       0 :                     	endif
(1)   89/       0 :                        endm
(1)   90/       0 :                     
(1)   91/       0 :                     ; define a trace macro
(1)   92/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   93/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   94/       0 :                     	if MOMPASS=1
(1)   95/       0 :                     		if ("ALLARGS"<>"")
(1)   96/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)   97/       0 :                     		else
(1)   98/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)   99/       0 :                     		endif
(1)  100/       0 :                     tracenum := (tracenum+1)
(1)  101/       0 :                     	endif
(1)  102/       0 :                        endm
(1)  103/       0 : =$0                 tracenum := 0
(1)  104/       0 :                     
(1)  106/       0 :                         ; disable a space optimization in AS so we can build a bit-perfect ROM
(1)  107/       0 :                         ; (the hard way, but it requires no modification of AS itself)
(1)  108/       0 :                     
(1)  109/       0 :                     
(1)  110/       0 :                     chkop function op,ref,(substr(lowstring(op),0,strlen(ref))<>ref)
(1)  111/       0 :                     
(1)  112/       0 :                     ; 1-arg instruction that's self-patching to remove 0-offset optimization
(1)  113/       0 :                     insn1op	 macro oper,x
(1)  114/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout(") && chkop("x","soundqueue.music0("))
(1)  115/       0 :                     		!oper	x
(1)  116/       0 :                     	  else
(1)  117/       0 :                     		!oper	1+x
(1)  118/       0 :                     		!org	*-1
(1)  119/       0 :                     		!dc.b	0
(1)  120/       0 :                     	  endif
(1)  121/       0 :                     	 endm
(1)  122/       0 :                     
(1)  123/       0 :                     ; 2-arg instruction that's self-patching to remove 0-offset optimization
(1)  124/       0 :                     insn2op	 macro oper,x,y
(1)  125/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout(") && chkop("x","soundqueue.music0("))
(1)  126/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout(") && chkop("y","soundqueue.music0("))
(1)  127/       0 :                     			!oper	x,y
(1)  128/       0 :                     		  else
(1)  129/       0 :                     			!oper	x,1+y
(1)  130/       0 :                     			!org	*-1
(1)  131/       0 :                     			!dc.b	0
(1)  132/       0 :                     		  endif
(1)  133/       0 :                     	  else
(1)  134/       0 :                     		if chkop("y","d")
(1)  135/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout(") && chkop("y","soundqueue.music0("))
(1)  136/       0 :                     start:
(1)  137/       0 :                     			!oper	1+x,y
(1)  138/       0 :                     end:
(1)  139/       0 :                     			!org	start+3
(1)  140/       0 :                     			!dc.b	0
(1)  141/       0 :                     			!org	end
(1)  142/       0 :                     		  else
(1)  143/       0 :                     			!oper	1+x,1+y
(1)  144/       0 :                     			!org	*-3
(1)  145/       0 :                     			!dc.b	0
(1)  146/       0 :                     			!org	*+1
(1)  147/       0 :                     			!dc.b	0
(1)  148/       0 :                     		  endif
(1)  149/       0 :                     		else
(1)  150/       0 :                     			!oper	1+x,y
(1)  151/       0 :                     			!org	*-1
(1)  152/       0 :                     			!dc.b	0
(1)  153/       0 :                     		endif
(1)  154/       0 :                     	  endif
(1)  155/       0 :                     	 endm
(1)  156/       0 :                     
(1)  157/       0 :                     	; instructions that were used with 0(a#) syntax
(1)  158/       0 :                     	; defined to assemble as they originally did
(1)  159/       0 :                     _move	macro
(1)  160/       0 :                     		insn2op move.ATTRIBUTE, ALLARGS
(1)  161/       0 :                     	endm
(1)  162/       0 :                     _add	macro
(1)  163/       0 :                     		insn2op add.ATTRIBUTE, ALLARGS
(1)  164/       0 :                     	endm
(1)  165/       0 :                     _addq	macro
(1)  166/       0 :                     		insn2op addq.ATTRIBUTE, ALLARGS
(1)  167/       0 :                     	endm
(1)  168/       0 :                     _cmp	macro
(1)  169/       0 :                     		insn2op cmp.ATTRIBUTE, ALLARGS
(1)  170/       0 :                     	endm
(1)  171/       0 :                     _cmpi	macro
(1)  172/       0 :                     		insn2op cmpi.ATTRIBUTE, ALLARGS
(1)  173/       0 :                     	endm
(1)  174/       0 :                     _clr	macro
(1)  175/       0 :                     		insn1op clr.ATTRIBUTE, ALLARGS
(1)  176/       0 :                     	endm
(1)  177/       0 :                     _tst	macro
(1)  178/       0 :                     		insn1op tst.ATTRIBUTE, ALLARGS
(1)  179/       0 :                     	endm
(1)  180/       0 :                     
(1)  207/       0 :                     
(1)  208/       0 :                     bit function nBits,1<<(nBits-1)
(1)  209/       0 :                     signmask function val,nBits,-((-(val&bit(nBits)))&bit(nBits))
(1)  210/       0 :                     signextend function val,nBits,(val+signmask(val,nBits))!signmask(val,nBits)
(1)  211/       0 :                     signextendB function val,signextend(val,8)
    6/       0 :                        	include "Macros.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; start the Z80
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     startZ80:       macro
(1)    5/       0 :                     		move.w	#0,(z80_bus_request).l
(1)    6/       0 :                     		endm
(1)    7/       0 :                     
(1)    8/       0 :                     ; ---------------------------------------------------------------------------
(1)    9/       0 :                     ; stop the Z80
(1)   10/       0 :                     ; ---------------------------------------------------------------------------
(1)   11/       0 :                     stopZ80:        macro
(1)   12/       0 :                     		move.w	#$100,(z80_bus_request).l
(1)   13/       0 :                     		endm
(1)   14/       0 :                     
(1)   15/       0 :                     ; ---------------------------------------------------------------------------
(1)   16/       0 :                     ; wait for Z80 to stop
(1)   17/       0 :                     ; ---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     waitZ80:	macro
(1)   20/       0 :                     .wait:		btst	#0,(z80_bus_request).l
(1)   21/       0 :                     		bne.s	.wait
(1)   22/       0 :                     		endm
    7/       0 :                        
    8/       0 : =$3                    SonicDriverVer			= 3
    9/       0 :                        
   10/       0 : =$1                    use_s2_samples			= 1
   11/       0 :                        
   12/       0 : =$1                    use_s3d_samples			= 1
   13/       0 :                        
   14/       0 : =$1                    use_s3_samples			= 1
   15/       0 :                        
   16/       0 : =$1                    use_sk_samples			= 1
   17/       0 :                        		include		"_smps2asm_inc.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; ===========================================================================
(1)    4/       0 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)    5/       0 :                     ; purpose with or without fee is hereby granted.
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)    8/       0 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)    9/       0 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   10/       0 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   11/       0 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   12/       0 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   13/       0 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   14/       0 :                     ; ===========================================================================
(1)   15/       0 :                     
(1)   16/       0 : =$1                 SMPS2ASMVer	= 1
(1)   17/       0 :                     
(1)   18/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   19/       0 : =$C                 psgdelta	EQU 12
(1)   20/       0 :                     ; ---------------------------------------------------------------------------
(1)   21/       0 :                     ; Standard Octave Pitch Equates
(1)   22/       0 : =$88..$B8           	enum smpsPitch10lo=$88,smpsPitch09lo=$94,smpsPitch08lo=$A0,smpsPitch07lo=$AC,smpsPitch06lo=$B8
(1)   23/       0 : =$C4..$F4           	enum smpsPitch05lo=$C4,smpsPitch04lo=$D0,smpsPitch03lo=$DC,smpsPitch02lo=$E8,smpsPitch01lo=$F4
(1)   24/       0 : =$0..$30            	enum smpsPitch00=$00,smpsPitch01hi=$0C,smpsPitch02hi=$18,smpsPitch03hi=$24,smpsPitch04hi=$30
(1)   25/       0 : =$3C..$6C           	enum smpsPitch05hi=$3C,smpsPitch06hi=$48,smpsPitch07hi=$54,smpsPitch08hi=$60,smpsPitch09hi=$6C
(1)   26/       0 : =$78                	enum smpsPitch10hi=$78
(1)   27/       0 :                     ; ---------------------------------------------------------------------------
(1)   28/       0 :                     ; Note Equates
(1)   29/       0 : =$80..$8F           	enum nRst=$80+0,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   30/       0 : =$90..$9F           	enum nEb1=nD1+1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   31/       0 : =$A0..$AF           	enum nG2=nFs2+1,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   32/       0 : =$B0..$BF           	enum nB3=nBb3+1,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   33/       0 : =$C0..$CF           	enum nEb5=nD5+1,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   34/       0 : =$D0..$DF           	enum nG6=nFs6+1,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   35/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   36/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   37/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   38/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   44/       0 : =$C7                nMaxPSG				EQU nBb6-psgdelta
(1)   45/       0 : =$D3                nMaxPSG1			EQU nBb6
(1)   46/       0 : =$D4                nMaxPSG2			EQU nB6
(1)   48/       0 :                     ; ---------------------------------------------------------------------------
(1)   49/       0 :                     ; PSG volume envelope equates
(1)   58/       0 : =$1..$6             		enum sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
(1)   59/       0 : =$7..$C             		enum sTone_07=sTone_06+1,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(1)   60/       0 : =$D..$12            		enum sTone_0D=sTone_0C+1,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
(1)   61/       0 : =$13..$18           		enum sTone_13=sTone_12+1,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
(1)   62/       0 : =$19..$1E           		enum sTone_19=sTone_18+1,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
(1)   63/       0 : =$1F..$24           		enum sTone_1F=sTone_1E+1,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
(1)   64/       0 : =$25..$27           		enum sTone_25=sTone_24+1,sTone_26,sTone_27
(1)   65/       0 :                     		; For conversions:
(1)   72/       0 :                     ; ---------------------------------------------------------------------------
(1)   73/       0 :                     ; DAC Equates
(1)   83/       0 : =$81..$87           			enum dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)   84/       0 : =$88..$8C           			enum dCrashCymbal=dMuffledSnare+1,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)   85/       0 : =$8D..$90           			enum dHigherMetalHit=dHighMetalHit+1,dMidMetalHit,dClapS3,dElectricHighTom
(1)   86/       0 : =$91..$93           			enum dElectricMidTom=dElectricHighTom+1,dElectricLowTom,dElectricFloorTom
(1)   87/       0 : =$94..$97           			enum dTightSnare=dElectricFloorTom+1,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)   88/       0 : =$98..$9B           			enum dHiTimpaniS3=dLooserSnare+1,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)   89/       0 : =$9C..$9E           			enum dClick=dQuickLooseSnare+1,dPowerKick,dQuickGlassCrash
(1)   92/       0 : =$9F..$A2           			enum dGlassCrashSnare=dQuickGlassCrash+1,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)   93/       0 : =$A3..$A7           			enum dOddSnareKick=dQuietGlassCrash+1,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)   94/       0 : =$A8..$AE           			enum dModLooseKick=dLooseKick+1,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)   95/       0 : =$AF..$B2           			enum dHiHitDrum=dLowWoodBlock+1,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(1)   96/       0 : =$B3..$B5           			enum dLowerEchoedClapHit=dEchoedClapHit+1,dHipHopHitKick,dHipHopHitPowerKick
(1)   97/       0 : =$B6..$B9           			enum dBassHey=dHipHopHitPowerKick+1,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)   98/       0 : =$BA..$BD           			enum dReverseFadingWind=dHipHopHitKick3+1,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)   99/       0 : =$BE..$C1           			enum dCrashingNoiseWoo=dPowerKick2+1,dQuickHit,dKickHey,dPowerKickHit
(1)  100/       0 : =$C2..$C4           			enum dLowPowerKickHit=dPowerKickHit+1,dLowerPowerKickHit,dLowestPowerKickHit
(1)  102/       0 :                     		; For conversions:
(1)  105/       0 : =$C5                				enum dKick=dLowestPowerKickHit+1
(1)  111/       0 : =$C6..$CD           			enum dSnare=dKick+1,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)  112/       0 : =$CE..$D3           			enum dLowTimpani=dMidTimpani+1,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)  113/       0 : =$D4..$D5           			enum dMidClap=dHiClap+1,dLowClap
(1)  117/       0 : =$D6..$D7           				enum dFinalFightMetalCrash=dLowClap+1,dIntroKick
(1)  126/       0 : =$D8..$D9           				enum dEchoedClapHit_S3=dIntroKick+1,dLowerEchoedClapHit_S3
(1)  134/       0 :                     ; ---------------------------------------------------------------------------
(1)  135/       0 :                     ; Channel IDs for SFX
(1)  136/       0 : =$80                cPSG1				EQU $80
(1)  137/       0 : =$A0                cPSG2				EQU $A0
(1)  138/       0 : =$C0                cPSG3				EQU $C0
(1)  139/       0 : =$E0                cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(1)  140/       0 : =$2                 cFM3				EQU $02
(1)  141/       0 : =$4                 cFM4				EQU $04
(1)  142/       0 : =$5                 cFM5				EQU $05
(1)  143/       0 : =$6                 cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(1)  144/       0 :                     ; ---------------------------------------------------------------------------
(1)  145/       0 :                     ; Conversion macros and functions
(1)  146/       0 :                     
(1)  147/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)  148/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(1)  149/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(1)  150/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)  151/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)  152/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)  153/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)  154/       0 :                     
(1)  155/       0 :                     convertMainTempoMod macro mod
(1)  156/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)  157/       0 :                     		dc.b	mod
(1)  158/       0 :                     	elseif SourceDriver==1
(1)  159/       0 :                     		if mod==1
(1)  160/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)  161/       0 :                     		endif
(1)  162/       0 :                     		if SonicDriverVer==2
(1)  163/       0 :                     			dc.b	s1TempotoS2(mod)
(1)  164/       0 :                     		else;if SonicDriverVer>=3
(1)  165/       0 :                     			dc.b	s1TempotoS3(mod)
(1)  166/       0 :                     		endif
(1)  167/       0 :                     	elseif SourceDriver==2
(1)  168/       0 :                     		if mod==0
(1)  169/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)  170/       0 :                     		endif
(1)  171/       0 :                     		if SonicDriverVer==1
(1)  172/       0 :                     			dc.b	s2TempotoS1(mod)
(1)  173/       0 :                     		else;if SonicDriverVer>=3
(1)  174/       0 :                     			dc.b	s2TempotoS3(mod)
(1)  175/       0 :                     		endif
(1)  176/       0 :                     	else;if SourceDriver>=3
(1)  177/       0 :                     		if mod==0
(1)  178/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)  179/       0 :                     		endif
(1)  180/       0 :                     		if SonicDriverVer==1
(1)  181/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  182/       0 :                     		else;if SonicDriverVer==2
(1)  183/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  184/       0 :                     		endif
(1)  185/       0 :                     	endif
(1)  186/       0 :                     	endm
(1)  187/       0 :                     
(1)  188/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  189/       0 :                     PSGPitchConvert macro pitch
(1)  190/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  191/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  192/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  193/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  194/       0 :                     	else
(1)  195/       0 :                     		dc.b	pitch
(1)  196/       0 :                     	endif
(1)  197/       0 :                     	endm
(1)  198/       0 :                     
(1)  199/       0 :                     CheckedChannelPointer macro loc
(1)  200/       0 :                     	if SonicDriverVer<>1
(1)  201/       0 :                     		dc.w	z80_ptr(loc)
(1)  202/       0 :                     	else
(1)  203/       0 :                     		if MOMPASS==2
(1)  204/       0 :                     			if loc<songStart
(1)  205/       0 :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)  206/       0 :                     			endif
(1)  207/       0 :                     		endif
(1)  208/       0 :                     		dc.w	loc-songStart
(1)  209/       0 :                     	endif
(1)  210/       0 :                     	endm
(1)  211/       0 :                     ; ---------------------------------------------------------------------------
(1)  212/       0 :                     ; Header Macros
(1)  213/       0 :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(1)  214/       0 :                     
(1)  215/       0 :                     SourceDriver set ver
(1)  216/       0 :                     
(1)  217/       0 :                     	if ("sourcesmps2asmver"<>"")
(1)  218/       0 :                     SourceSMPS2ASM set sourcesmps2asmver
(1)  219/       0 :                     	else
(1)  220/       0 :                     SourceSMPS2ASM set 0
(1)  221/       0 :                     	endif
(1)  222/       0 :                     
(1)  223/       0 :                     songStart set *
(1)  224/       0 :                     
(1)  225/       0 :                     	if MOMPASS==2
(1)  226/       0 :                     	if SMPS2ASMVer < SourceSMPS2ASM
(1)  227/       0 :                     	message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)  228/       0 :                     	endif
(1)  229/       0 :                     	endif
(1)  230/       0 :                     
(1)  231/       0 :                     	endm
(1)  232/       0 :                     
(1)  233/       0 :                     smpsHeaderVoiceNull macro
(1)  234/       0 :                     	if songStart<>*
(1)  235/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  236/       0 :                     	endif
(1)  237/       0 :                     	dc.w	$0000
(1)  238/       0 :                     	endm
(1)  239/       0 :                     
(1)  240/       0 :                     ; Header - Set up Voice Location
(1)  241/       0 :                     ; Common to music and SFX
(1)  242/       0 :                     smpsHeaderVoice macro loc
(1)  243/       0 :                     	if songStart<>*
(1)  244/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  245/       0 :                     	endif
(1)  246/       0 :                     	if SonicDriverVer<>1
(1)  247/       0 :                     		dc.w	z80_ptr(loc)
(1)  248/       0 :                     	else
(1)  249/       0 :                     		if MOMPASS==2
(1)  250/       0 :                     		if loc<songStart
(1)  251/       0 :                     			fatal "Voice banks for Sonic 1 songs must come after the song"
(1)  252/       0 :                     		endif
(1)  253/       0 :                     		endif
(1)  254/       0 :                     		dc.w	loc-songStart
(1)  255/       0 :                     	endif
(1)  256/       0 :                     	endm
(1)  257/       0 :                     
(1)  258/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  259/       0 :                     ; Common to music and SFX
(1)  260/       0 :                     smpsHeaderVoiceUVB macro
(1)  261/       0 :                     	if songStart<>*
(1)  262/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if SonicDriverVer>=5
(1)  265/       0 :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(1)  266/       0 :                     	elseif SonicDriverVer>=3
(1)  267/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  268/       0 :                     	else
(1)  269/       0 :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(1)  270/       0 :                     	endif
(1)  271/       0 :                     	endm
(1)  272/       0 :                     
(1)  273/       0 :                     ; Header macros for music (not for SFX)
(1)  274/       0 :                     ; Header - Set up Channel Usage
(1)  275/       0 :                     smpsHeaderChan macro fm,psg
(1)  276/       0 :                     	dc.b	fm,psg
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; Header - Set up Tempo
(1)  280/       0 :                     smpsHeaderTempo macro div,mod
(1)  281/       0 :                     	dc.b	div
(1)  282/       0 :                     	convertMainTempoMod mod
(1)  283/       0 :                     	endm
(1)  284/       0 :                     
(1)  285/       0 :                     ; Header - Set up DAC Channel
(1)  286/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  287/       0 :                     	CheckedChannelPointer loc
(1)  288/       0 :                     	if ("pitch"<>"")
(1)  289/       0 :                     		dc.b	pitch
(1)  290/       0 :                     		if ("vol"<>"")
(1)  291/       0 :                     			dc.b	vol
(1)  292/       0 :                     		else
(1)  293/       0 :                     			dc.b	$00
(1)  294/       0 :                     		endif
(1)  295/       0 :                     	else
(1)  296/       0 :                     		dc.w	$00
(1)  297/       0 :                     	endif
(1)  298/       0 :                     	endm
(1)  299/       0 :                     
(1)  300/       0 :                     ; Header - Set up FM Channel
(1)  301/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  302/       0 :                     	CheckedChannelPointer loc
(1)  303/       0 :                     	dc.b	pitch,vol
(1)  304/       0 :                     	endm
(1)  305/       0 :                     
(1)  306/       0 :                     ; Header - Set up PSG Channel
(1)  307/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  308/       0 :                     	CheckedChannelPointer loc
(1)  309/       0 :                     	PSGPitchConvert pitch
(1)  310/       0 :                     	dc.b	vol,mod,voice
(1)  311/       0 :                     	endm
(1)  312/       0 :                     
(1)  313/       0 :                     ; Header macros for SFX (not for music)
(1)  314/       0 :                     ; Header - Set up Tempo
(1)  315/       0 :                     smpsHeaderTempoSFX macro div
(1)  316/       0 :                     	dc.b	div
(1)  317/       0 :                     	endm
(1)  318/       0 :                     
(1)  319/       0 :                     ; Header - Set up Channel Usage
(1)  320/       0 :                     smpsHeaderChanSFX macro chan
(1)  321/       0 :                     	dc.b	chan
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; Header - Set up FM Channel
(1)  325/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  326/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  327/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  328/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  329/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  330/       0 :                     	endif
(1)  331/       0 :                     	dc.b	$80,chanid
(1)  332/       0 :                     	CheckedChannelPointer loc
(1)  333/       0 :                     	if (chanid&$80)<>0
(1)  334/       0 :                     		PSGPitchConvert pitch
(1)  335/       0 :                     	else
(1)  336/       0 :                     		dc.b	pitch
(1)  337/       0 :                     	endif
(1)  338/       0 :                     	dc.b	vol
(1)  339/       0 :                     	endm
(1)  340/       0 :                     ; ---------------------------------------------------------------------------
(1)  341/       0 :                     ; Co-ord Flag Macros and Equates
(1)  342/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  343/       0 :                     smpsPan macro direction,amsfms
(1)  344/       0 :                     panNone set $00
(1)  345/       0 :                     panRight set $40
(1)  346/       0 :                     panLeft set $80
(1)  347/       0 :                     panCentre set $C0
(1)  348/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  349/       0 :                     	dc.b $E0,direction+amsfms
(1)  350/       0 :                     	endm
(1)  351/       0 :                     
(1)  352/       0 :                     ; E1xx - Set channel detune to val
(1)  353/       0 :                     smpsDetune macro val
(1)  354/       0 :                     	dc.b	$E1,val
(1)  355/       0 :                     	endm
(1)  356/       0 :                     
(1)  357/       0 :                     ; E2xx - Useless
(1)  358/       0 :                     smpsNop macro val
(1)  359/       0 :                     	if SonicDriverVer<3
(1)  360/       0 :                     		dc.b	$E2,val
(1)  361/       0 :                     	endif
(1)  362/       0 :                     	endm
(1)  363/       0 :                     
(1)  364/       0 :                     ; Return (used after smpsCall)
(1)  365/       0 :                     smpsReturn macro val
(1)  366/       0 :                     	if SonicDriverVer>=3
(1)  367/       0 :                     		dc.b	$F9
(1)  368/       0 :                     	else
(1)  369/       0 :                     		dc.b	$E3
(1)  370/       0 :                     	endif
(1)  371/       0 :                     	endm
(1)  372/       0 :                     
(1)  373/       0 :                     ; Fade in previous song (ie. 1-Up)
(1)  374/       0 :                     smpsFade macro val
(1)  375/       0 :                     	if SonicDriverVer>=3
(1)  376/       0 :                     		dc.b	$E2
(1)  377/       0 :                     		if ("val"<>"")
(1)  378/       0 :                     			dc.b	val
(1)  379/       0 :                     		else
(1)  380/       0 :                     			dc.b	$FF
(1)  381/       0 :                     		endif
(1)  382/       0 :                     		if SourceDriver<3
(1)  383/       0 :                     			smpsStop
(1)  384/       0 :                     		endif
(1)  385/       0 :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(1)  386/       0 :                     		; This is one of those weird S3+ "fades" that we don't need
(1)  387/       0 :                     	else
(1)  388/       0 :                     		dc.b	$E4
(1)  389/       0 :                     	endif
(1)  390/       0 :                     	endm
(1)  391/       0 :                     
(1)  392/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  393/       0 :                     smpsChanTempoDiv macro val
(1)  394/       0 :                     	if SonicDriverVer>=5
(1)  395/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  396/       0 :                     		dc.b	$FF,$08,val
(1)  397/       0 :                     	elseif SonicDriverVer==3
(1)  398/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  399/       0 :                     	else
(1)  400/       0 :                     		dc.b	$E5,val
(1)  401/       0 :                     	endif
(1)  402/       0 :                     	endm
(1)  403/       0 :                     
(1)  404/       0 :                     ; E6xx - Alter Volume by xx
(1)  405/       0 :                     smpsAlterVol macro val
(1)  406/       0 :                     	dc.b	$E6,val
(1)  407/       0 :                     	endm
(1)  408/       0 :                     
(1)  409/       0 :                     ; E7 - Prevent attack of next note
(1)  410/       0 : =$E7                smpsNoAttack	EQU $E7
(1)  411/       0 :                     
(1)  412/       0 :                     ; E8xx - Set note fill to xx
(1)  413/       0 :                     smpsNoteFill macro val
(1)  414/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  415/       0 :                     		; Unique to Flamewing's modified driver
(1)  416/       0 :                     		dc.b	$FF,$0A,val
(1)  417/       0 :                     	else
(1)  418/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  419/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  420/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  421/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  422/       0 :                     		endif
(1)  423/       0 :                     		dc.b	$E8,val
(1)  424/       0 :                     	endif
(1)  425/       0 :                     	endm
(1)  426/       0 :                     
(1)  427/       0 :                     ; Add xx to channel pitch
(1)  428/       0 :                     smpsChangeTransposition macro val
(1)  429/       0 :                     	if SonicDriverVer>=3
(1)  430/       0 :                     		dc.b	$FB,val
(1)  431/       0 :                     	else
(1)  432/       0 :                     		dc.b	$E9,val
(1)  433/       0 :                     	endif
(1)  434/       0 :                     	endm
(1)  435/       0 :                     
(1)  436/       0 :                     ; Set music tempo modifier to xx
(1)  437/       0 :                     smpsSetTempoMod macro mod
(1)  438/       0 :                     	if SonicDriverVer>=3
(1)  439/       0 :                     		dc.b	$FF,$00
(1)  440/       0 :                     	else
(1)  441/       0 :                     		dc.b	$EA
(1)  442/       0 :                     	endif
(1)  443/       0 :                     	convertMainTempoMod mod
(1)  444/       0 :                     	endm
(1)  445/       0 :                     
(1)  446/       0 :                     ; Set music tempo divider to xx
(1)  447/       0 :                     smpsSetTempoDiv macro val
(1)  448/       0 :                     	if SonicDriverVer>=3
(1)  449/       0 :                     		dc.b	$FF,$04,val
(1)  450/       0 :                     	else
(1)  451/       0 :                     		dc.b	$EB,val
(1)  452/       0 :                     	endif
(1)  453/       0 :                     	endm
(1)  454/       0 :                     
(1)  455/       0 :                     ; ECxx - Set Volume to xx
(1)  456/       0 :                     smpsSetVol macro val
(1)  457/       0 :                     	if SonicDriverVer>=3
(1)  458/       0 :                     		dc.b	$E4,val
(1)  459/       0 :                     	else
(1)  460/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  461/       0 :                     	endif
(1)  462/       0 :                     	endm
(1)  463/       0 :                     
(1)  464/       0 :                     ; Works on all drivers
(1)  465/       0 :                     smpsPSGAlterVol macro vol
(1)  466/       0 :                     	dc.b	$EC,vol
(1)  467/       0 :                     	endm
(1)  468/       0 :                     
(1)  469/       0 :                     ; Clears pushing sound flag in S1
(1)  470/       0 :                     smpsClearPush macro
(1)  471/       0 :                     	if SonicDriverVer==1
(1)  472/       0 :                     		dc.b	$ED
(1)  473/       0 :                     	else
(1)  474/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  475/       0 :                     	endif
(1)  476/       0 :                     	endm
(1)  477/       0 :                     
(1)  478/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  479/       0 :                     smpsStopSpecial macro
(1)  480/       0 :                     	if SonicDriverVer==1
(1)  481/       0 :                     		dc.b	$EE
(1)  482/       0 :                     	else
(1)  483/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  484/       0 :                     		smpsStop
(1)  485/       0 :                     	endif
(1)  486/       0 :                     	endm
(1)  487/       0 :                     
(1)  488/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  489/       0 :                     smpsFMvoice macro voice,songID
(1)  490/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  491/       0 :                     		dc.b	$EF,voice|$80,songID+$81
(1)  492/       0 :                     	else
(1)  493/       0 :                     		dc.b	$EF,voice
(1)  494/       0 :                     	endif
(1)  495/       0 :                     	endm
(1)  496/       0 :                     
(1)  497/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  498/       0 :                     smpsModSet macro wait,speed,change,step
(1)  499/       0 :                     	dc.b	$F0
(1)  500/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  501/       0 :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(1)  502/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  503/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  504/       0 :                     	else
(1)  505/       0 :                     		dc.b	wait,speed,change,step
(1)  506/       0 :                     	endif
(1)  507/       0 :                     	;dc.b	speed,change,step
(1)  508/       0 :                     	endm
(1)  509/       0 :                     
(1)  510/       0 :                     ; Turn on Modulation
(1)  511/       0 :                     smpsModOn macro type
(1)  512/       0 :                     	if SonicDriverVer>=3
(1)  513/       0 :                     		if "type"<>""
(1)  514/       0 :                     			dc.b	$F4,type
(1)  515/       0 :                     		else
(1)  516/       0 :                     			dc.b	$F4,$80
(1)  517/       0 :                     		endif
(1)  518/       0 :                     	else
(1)  519/       0 :                     		dc.b	$F1
(1)  520/       0 :                     	endif
(1)  521/       0 :                     	endm
(1)  522/       0 :                     
(1)  523/       0 :                     ; F2 - End of channel
(1)  524/       0 :                     smpsStop macro
(1)  525/       0 :                     	dc.b	$F2
(1)  526/       0 :                     	endm
(1)  527/       0 :                     
(1)  528/       0 :                     ; F3xx - PSG waveform to xx
(1)  529/       0 :                     smpsPSGform macro form
(1)  530/       0 :                     	dc.b	$F3,form
(1)  531/       0 :                     	endm
(1)  532/       0 :                     
(1)  533/       0 :                     ; Turn off Modulation
(1)  534/       0 :                     smpsModOff macro
(1)  535/       0 :                     	if SonicDriverVer>=3
(1)  536/       0 :                     		dc.b	$FA
(1)  537/       0 :                     	else
(1)  538/       0 :                     		dc.b	$F4
(1)  539/       0 :                     	endif
(1)  540/       0 :                     	endm
(1)  541/       0 :                     
(1)  542/       0 :                     ; F5xx - PSG voice to xx
(1)  543/       0 :                     smpsPSGvoice macro voice
(1)  544/       0 :                     	dc.b	$F5,voice
(1)  545/       0 :                     	endm
(1)  546/       0 :                     
(1)  547/       0 :                     ; F6xxxx - Jump to xxxx
(1)  548/       0 :                     smpsJump macro loc
(1)  549/       0 :                     	dc.b	$F6
(1)  550/       0 :                     	if SonicDriverVer<>1
(1)  551/       0 :                     		dc.w	z80_ptr(loc)
(1)  552/       0 :                     	else
(1)  553/       0 :                     		dc.w	loc-*-1
(1)  554/       0 :                     	endif
(1)  555/       0 :                     	endm
(1)  556/       0 :                     
(1)  557/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  558/       0 :                     smpsLoop macro index,loops,loc
(1)  559/       0 :                     	dc.b	$F7
(1)  560/       0 :                     	dc.b	index,loops
(1)  561/       0 :                     	if SonicDriverVer<>1
(1)  562/       0 :                     		dc.w	z80_ptr(loc)
(1)  563/       0 :                     	else
(1)  564/       0 :                     		dc.w	loc-*-1
(1)  565/       0 :                     	endif
(1)  566/       0 :                     	endm
(1)  567/       0 :                     
(1)  568/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  569/       0 :                     smpsCall macro loc
(1)  570/       0 :                     	dc.b	$F8
(1)  571/       0 :                     	if SonicDriverVer<>1
(1)  572/       0 :                     		dc.w	z80_ptr(loc)
(1)  573/       0 :                     	else
(1)  574/       0 :                     		dc.w	loc-*-1
(1)  575/       0 :                     	endif
(1)  576/       0 :                     	endm
(1)  577/       0 :                     ; ---------------------------------------------------------------------------
(1)  578/       0 :                     ; Alter Volume
(1)  579/       0 :                     smpsFMAlterVol macro val1,val2
(1)  580/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  581/       0 :                     		dc.b	$E5,val1,val2
(1)  582/       0 :                     	else
(1)  583/       0 :                     		dc.b	$E6,val1
(1)  584/       0 :                     	endif
(1)  585/       0 :                     	endm
(1)  586/       0 :                     
(1)  587/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  589/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  590/       0 :                     smpsStopFM macro
(1)  591/       0 :                     	dc.b	$E3
(1)  592/       0 :                     	endm
(1)  593/       0 :                     
(1)  594/       0 :                     ; Spindash Rev
(1)  595/       0 :                     smpsSpindashRev macro
(1)  596/       0 :                     	dc.b	$E9
(1)  597/       0 :                     	endm
(1)  598/       0 :                     
(1)  599/       0 :                     smpsPlayDACSample macro sample
(1)  600/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  601/       0 :                     	endm
(1)  602/       0 :                     
(1)  603/       0 :                     smpsConditionalJump macro index,loc
(1)  604/       0 :                     	dc.b	$EB
(1)  605/       0 :                     	dc.b	index
(1)  606/       0 :                     	dc.w	z80_ptr(loc)
(1)  607/       0 :                     	endm
(1)  608/       0 :                     
(1)  609/       0 :                     ; Set note values to xx-$40
(1)  610/       0 :                     smpsSetNote macro val
(1)  611/       0 :                     	dc.b	$ED,val
(1)  612/       0 :                     	endm
(1)  613/       0 :                     
(1)  614/       0 :                     smpsFMICommand macro reg,val
(1)  615/       0 :                     	dc.b	$EE,reg,val
(1)  616/       0 :                     	endm
(1)  617/       0 :                     
(1)  618/       0 :                     ; Set Modulation
(1)  619/       0 :                     smpsModChange2 macro fmmod,psgmod
(1)  620/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  621/       0 :                     	endm
(1)  622/       0 :                     
(1)  623/       0 :                     ; Set Modulation
(1)  624/       0 :                     smpsModChange macro val
(1)  625/       0 :                     	dc.b	$F4,val
(1)  626/       0 :                     	endm
(1)  627/       0 :                     
(1)  628/       0 :                     ; FCxxxx - Jump to xxxx
(1)  629/       0 :                     smpsContinuousLoop macro loc
(1)  630/       0 :                     	dc.b	$FC
(1)  631/       0 :                     	dc.w	z80_ptr(loc)
(1)  632/       0 :                     	endm
(1)  633/       0 :                     
(1)  634/       0 :                     smpsAlternateSMPS macro flag
(1)  635/       0 :                     	dc.b	$FD,flag
(1)  636/       0 :                     	endm
(1)  637/       0 :                     
(1)  638/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  639/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  640/       0 :                     	endm
(1)  641/       0 :                     
(1)  642/       0 :                     smpsPlaySound macro index
(1)  643/       0 :                     	if SonicDriverVer>=5
(1)  644/       0 :                     		message "smpsPlaySound only plays SFX in Flamedriver; use smpsPlayMusic to play music or fade effects."
(1)  645/       0 :                     	endif
(1)  646/       0 :                     	dc.b	$FF,$01,index
(1)  647/       0 :                     	endm
(1)  648/       0 :                     
(1)  649/       0 :                     smpsHaltMusic macro flag
(1)  650/       0 :                     	dc.b	$FF,$02,flag
(1)  651/       0 :                     	endm
(1)  652/       0 :                     
(1)  653/       0 :                     smpsCopyData macro data,len
(1)  654/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  655/       0 :                     	dc.b	$FF,$03
(1)  656/       0 :                     	dc.w	little_endian(data)
(1)  657/       0 :                     	dc.b	len
(1)  658/       0 :                     	endm
(1)  659/       0 :                     
(1)  660/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  661/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  662/       0 :                     	endm
(1)  663/       0 :                     
(1)  664/       0 :                     smpsFMVolEnv macro tone,mask
(1)  665/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  666/       0 :                     	endm
(1)  667/       0 :                     
(1)  668/       0 :                     smpsResetSpindashRev macro val
(1)  669/       0 :                     	dc.b	$FF,$07
(1)  670/       0 :                     	endm
(1)  671/       0 :                     
(1)  672/       0 :                     	; Flags ported from other drivers.
(1)  690/       0 :                     
(1)  692/       0 :                     ; ---------------------------------------------------------------------------
(1)  693/       0 :                     ; S1/S2 only coordination flag
(1)  694/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  695/       0 :                     smpsMaxRelRate macro
(1)  696/       0 :                     	if SonicDriverVer>=3
(1)  697/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  698/       0 :                     		smpsFMICommand $88,$0F
(1)  699/       0 :                     		smpsFMICommand $8C,$0F
(1)  700/       0 :                     	else
(1)  701/       0 :                     		dc.b	$F9
(1)  702/       0 :                     	endif
(1)  703/       0 :                     	endm
(1)  704/       0 :                     ; ---------------------------------------------------------------------------
(1)  705/       0 :                     ; Backwards compatibility
(1)  706/       0 :                     smpsAlterNote macro
(1)  707/       0 :                     	smpsDetune	ALLARGS
(1)  708/       0 :                     	endm
(1)  709/       0 :                     
(1)  710/       0 :                     smpsAlterPitch macro
(1)  711/       0 :                     	smpsChangeTransposition	ALLARGS
(1)  712/       0 :                     	endm
(1)  713/       0 :                     
(1)  714/       0 :                     smpsFMFlutter macro
(1)  715/       0 :                     	smpsFMVolEnv	ALLARGS
(1)  716/       0 :                     	endm
(1)  717/       0 :                     
(1)  718/       0 :                     smpsWeirdD1LRR macro
(1)  719/       0 :                     	smpsMaxRelRate ALLARGS
(1)  720/       0 :                     	endm
(1)  721/       0 :                     
(1)  722/       0 :                     smpsSetvoice macro
(1)  723/       0 :                     	smpsFMvoice ALLARGS
(1)  724/       0 :                     	endm
(1)  725/       0 :                     ; ---------------------------------------------------------------------------
(1)  726/       0 :                     ; Macros for FM instruments
(1)  727/       0 :                     ; Voices - Feedback
(1)  728/       0 :                     smpsVcFeedback macro val
(1)  729/       0 :                     vcFeedback set val
(1)  730/       0 :                     	endm
(1)  731/       0 :                     
(1)  732/       0 :                     ; Voices - Algorithm
(1)  733/       0 :                     smpsVcAlgorithm macro val
(1)  734/       0 :                     vcAlgorithm set val
(1)  735/       0 :                     	endm
(1)  736/       0 :                     
(1)  737/       0 :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(1)  738/       0 :                     vcUnusedBits set val
(1)  739/       0 :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(1)  740/       0 :                     vcD1R1Unk set d1r1<<5
(1)  741/       0 :                     vcD1R2Unk set d1r2<<5
(1)  742/       0 :                     vcD1R3Unk set d1r3<<5
(1)  743/       0 :                     vcD1R4Unk set d1r4<<5
(1)  744/       0 :                     	else
(1)  745/       0 :                     vcD1R1Unk set 0
(1)  746/       0 :                     vcD1R2Unk set 0
(1)  747/       0 :                     vcD1R3Unk set 0
(1)  748/       0 :                     vcD1R4Unk set 0
(1)  749/       0 :                     	endif
(1)  750/       0 :                     	endm
(1)  751/       0 :                     
(1)  752/       0 :                     ; Voices - Detune
(1)  753/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  754/       0 :                     vcDT1 set op1
(1)  755/       0 :                     vcDT2 set op2
(1)  756/       0 :                     vcDT3 set op3
(1)  757/       0 :                     vcDT4 set op4
(1)  758/       0 :                     	endm
(1)  759/       0 :                     
(1)  760/       0 :                     ; Voices - Coarse-Frequency
(1)  761/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  762/       0 :                     vcCF1 set op1
(1)  763/       0 :                     vcCF2 set op2
(1)  764/       0 :                     vcCF3 set op3
(1)  765/       0 :                     vcCF4 set op4
(1)  766/       0 :                     	endm
(1)  767/       0 :                     
(1)  768/       0 :                     ; Voices - Rate Scale
(1)  769/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  770/       0 :                     vcRS1 set op1
(1)  771/       0 :                     vcRS2 set op2
(1)  772/       0 :                     vcRS3 set op3
(1)  773/       0 :                     vcRS4 set op4
(1)  774/       0 :                     	endm
(1)  775/       0 :                     
(1)  776/       0 :                     ; Voices - Attack Rate
(1)  777/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  778/       0 :                     vcAR1 set op1
(1)  779/       0 :                     vcAR2 set op2
(1)  780/       0 :                     vcAR3 set op3
(1)  781/       0 :                     vcAR4 set op4
(1)  782/       0 :                     	endm
(1)  783/       0 :                     
(1)  784/       0 :                     ; Voices - Amplitude Modulation
(1)  785/       0 :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(1)  786/       0 :                     ; were the Amplitude Modulation.
(1)  787/       0 :                     ; According to several docs, however, it's actually the high bit.
(1)  788/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  789/       0 :                     	if SourceSMPS2ASM==0
(1)  790/       0 :                     vcAM1 set op1<<5
(1)  791/       0 :                     vcAM2 set op2<<5
(1)  792/       0 :                     vcAM3 set op3<<5
(1)  793/       0 :                     vcAM4 set op4<<5
(1)  794/       0 :                     	else
(1)  795/       0 :                     vcAM1 set op1<<7
(1)  796/       0 :                     vcAM2 set op2<<7
(1)  797/       0 :                     vcAM3 set op3<<7
(1)  798/       0 :                     vcAM4 set op4<<7
(1)  799/       0 :                     	endif
(1)  800/       0 :                     	endm
(1)  801/       0 :                     
(1)  802/       0 :                     ; Voices - First Decay Rate
(1)  803/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  804/       0 :                     vcD1R1 set op1
(1)  805/       0 :                     vcD1R2 set op2
(1)  806/       0 :                     vcD1R3 set op3
(1)  807/       0 :                     vcD1R4 set op4
(1)  808/       0 :                     	endm
(1)  809/       0 :                     
(1)  810/       0 :                     ; Voices - Second Decay Rate
(1)  811/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  812/       0 :                     vcD2R1 set op1
(1)  813/       0 :                     vcD2R2 set op2
(1)  814/       0 :                     vcD2R3 set op3
(1)  815/       0 :                     vcD2R4 set op4
(1)  816/       0 :                     	endm
(1)  817/       0 :                     
(1)  818/       0 :                     ; Voices - Decay Level
(1)  819/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  820/       0 :                     vcDL1 set op1
(1)  821/       0 :                     vcDL2 set op2
(1)  822/       0 :                     vcDL3 set op3
(1)  823/       0 :                     vcDL4 set op4
(1)  824/       0 :                     	endm
(1)  825/       0 :                     
(1)  826/       0 :                     ; Voices - Release Rate
(1)  827/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  828/       0 :                     vcRR1 set op1
(1)  829/       0 :                     vcRR2 set op2
(1)  830/       0 :                     vcRR3 set op3
(1)  831/       0 :                     vcRR4 set op4
(1)  832/       0 :                     	endm
(1)  833/       0 :                     
(1)  834/       0 :                     ; Voices - Total Level
(1)  835/       0 :                     ; The original SMPS2ASM decides TL high bits automatically,
(1)  836/       0 :                     ; but later versions leave it up to the user.
(1)  837/       0 :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(1)  838/       0 :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(1)  839/       0 :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(1)  840/       0 :                     ; SMPS Z80 does the opposite.
(1)  841/       0 :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(1)  842/       0 :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(1)  843/       0 :                     ; what we do, so we just print a warning.
(1)  844/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  845/       0 :                     vcTL1 set op1
(1)  846/       0 :                     vcTL2 set op2
(1)  847/       0 :                     vcTL3 set op3
(1)  848/       0 :                     vcTL4 set op4
(1)  849/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  850/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  851/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  852/       0 :                     	if SourceSMPS2ASM==0
(1)  853/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  854/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  855/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  856/       0 :                     vcTLMask1 set $80
(1)  857/       0 :                     	else
(1)  858/       0 :                     vcTLMask4 set 0
(1)  859/       0 :                     vcTLMask3 set 0
(1)  860/       0 :                     vcTLMask2 set 0
(1)  861/       0 :                     vcTLMask1 set 0
(1)  862/       0 :                     	endif
(1)  863/       0 :                     
(1)  864/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  865/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  866/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  867/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  868/       0 :                     vcTLMask1 set $80
(1)  869/       0 :                     vcTL1 set vcTL1&$7F
(1)  870/       0 :                     vcTL2 set vcTL2&$7F
(1)  871/       0 :                     vcTL3 set vcTL3&$7F
(1)  872/       0 :                     vcTL4 set vcTL4&$7F
(1)  873/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&(((vcTL1&$80)<>$80)||((vcTL2&$80)<>((vcAlgorithm>=5)<<7))||((vcTL3&$80)<>((vcAlgorithm>=4)<<7))||((vcTL4&$80)<>((vcAlgorithm==7)<<7)))
(1)  874/       0 :                     		if MOMPASS==2
(1)  875/       0 :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  876/       0 :                     		endif
(1)  877/       0 :                     	endif
(1)  878/       0 :                     
(1)  879/       0 :                     	if SonicDriverVer==2
(1)  880/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  881/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  882/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  883/       0 :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  884/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  885/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  886/       0 :                     	else
(1)  887/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  888/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  889/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  890/       0 :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  891/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  892/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  893/       0 :                     	endif
(1)  894/       0 :                     	endm
(1)  895/       0 :                     
(1)  896/       0 :                     
   18/       0 :                        
   19/       0 :                        ;		MUSIC STARTS HERE
   20/       0 :                        
   21/       0 : (MACRO)                	align	$8000
   21/       0 :  (MACRO-2)                     cnop 0,$8000
   21/       0 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   21/    8000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   22/    8000 :                        
   23/    8000 :                        		include		"Music/Electoria.asm"
(1)    1/    8000 :                     Electoria_Header:
(1)    2/    8000 : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    8000 :                     
(1)    2/    8000 : =$3                 SourceDriver set 3
(1)    2/    8000 :                     
(1)    2/    8000 : =$0                 SourceSMPS2ASM set 0
(1)    2/    8000 :                     
(1)    2/    8000 : =$8000              songStart set *
(1)    2/    8000 :                     
(1)    2/    8000 :                     
(1)    3/    8000 : (MACRO)             	smpsHeaderVoice     Electoria_Voices
(1)    3/    8000 : 0F88                                dc.w    z80_ptr(ELECTORIA_VOICES)
(1)    4/    8002 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    8002 : 0603                        dc.b    $06,$03
(1)    5/    8004 : (MACRO)             	smpsHeaderTempo     $01, $19
(1)    5/    8004 : 01                          dc.b    $01
(1)    5/    8005 :  (MACRO-2)                  convertMainTempoMod $19
(1)    5/    8005 : 19                                  dc.b    $19
(1)    6/    8006 :                     
(1)    7/    8006 : (MACRO)             	smpsHeaderDAC       Electoria_DAC
(1)    7/    8006 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_DAC
(1)    7/    8006 : 4887                                dc.w    z80_ptr(ELECTORIA_DAC)
(1)    7/    8008 : 0000                                dc.w    $00
(1)    8/    800A : (MACRO)             	smpsHeaderFM        Electoria_FM1,	$00, $0E
(1)    8/    800A :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM1
(1)    8/    800A : 3080                                dc.w    z80_ptr(ELECTORIA_FM1)
(1)    8/    800C : 000E                        dc.b    $00,$0E
(1)    9/    800E : (MACRO)             	smpsHeaderFM        Electoria_FM2,	$00, $18
(1)    9/    800E :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM2
(1)    9/    800E : B280                                dc.w    z80_ptr(ELECTORIA_FM2)
(1)    9/    8010 : 0018                        dc.b    $00,$18
(1)   10/    8012 : (MACRO)             	smpsHeaderFM        Electoria_FM3,	$00, $18
(1)   10/    8012 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM3
(1)   10/    8012 : DD83                                dc.w    z80_ptr(ELECTORIA_FM3)
(1)   10/    8014 : 0018                        dc.b    $00,$18
(1)   11/    8016 : (MACRO)             	smpsHeaderFM        Electoria_FM4,	$00, $18
(1)   11/    8016 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM4
(1)   11/    8016 : E884                                dc.w    z80_ptr(ELECTORIA_FM4)
(1)   11/    8018 : 0018                        dc.b    $00,$18
(1)   12/    801A : (MACRO)             	smpsHeaderFM        Electoria_FM5,	$00, $18
(1)   12/    801A :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM5
(1)   12/    801A : 6F85                                dc.w    z80_ptr(ELECTORIA_FM5)
(1)   12/    801C : 0018                        dc.b    $00,$18
(1)   13/    801E : (MACRO)             	smpsHeaderPSG       Electoria_PSG1,	$00, $04, $00, sTone_0C
(1)   13/    801E :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_PSG1
(1)   13/    801E : C985                                dc.w    z80_ptr(ELECTORIA_PSG1)
(1)   13/    8020 :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/    8020 : 00                                  dc.b    $00
(1)   13/    8021 : 0400 0C                     dc.b    $04,$00,STONE_0C
(1)   14/    8024 : (MACRO)             	smpsHeaderPSG       Electoria_PSG2,	$F4, $04, $00, sTone_0C
(1)   14/    8024 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_PSG2
(1)   14/    8024 : 4E86                                dc.w    z80_ptr(ELECTORIA_PSG2)
(1)   14/    8026 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   14/    8026 : F4                                  dc.b    $F4
(1)   14/    8027 : 0400 0C                     dc.b    $04,$00,STONE_0C
(1)   15/    802A : (MACRO)             	smpsHeaderPSG       Electoria_PSG3,	$23, $01, $00, sTone_02
(1)   15/    802A :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_PSG3
(1)   15/    802A : FD86                                dc.w    z80_ptr(ELECTORIA_PSG3)
(1)   15/    802C :  (MACRO-2)                  PSGPitchConvert $23
(1)   15/    802C : 23                                  dc.b    $23
(1)   15/    802D : 0100 02                     dc.b    $01,$00,STONE_02
(1)   16/    8030 :                     
(1)   17/    8030 :                     ; FM1 Data
(1)   18/    8030 :                     Electoria_FM1:
(1)   19/    8030 : (MACRO)             	smpsSetvoice        $00
(1)   19/    8030 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    8030 : EF00                                dc.b    $EF,$00
(1)   20/    8032 : 8F06 9B9B 919D 9D91 	dc.b	nD1, $06, nD2, nD2, nE1, nE2, nE2, nE1, nE2, nE2, nG1, nG2
             803A : 9D9D 94A0         
(1)   21/    803E : A096 A28F 0C        	dc.b	nG2, nA1, nA2, nD1, $0C
(1)   22/    8043 :                     
(1)   23/    8043 :                     Electoria_Loop16:
(1)   24/    8043 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   24/    8043 : F8                          dc.b    $F8
(1)   24/    8044 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   25/    8046 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop16
(1)   25/    8046 : F7                          dc.b    $F7
(1)   25/    8047 : 0008                        dc.b    $00,$08
(1)   25/    8049 : 4380                                dc.w    z80_ptr(ELECTORIA_LOOP16)
(1)   26/    804B :                     
(1)   27/    804B :                     Electoria_Loop17:
(1)   28/    804B : (MACRO)             	smpsCall            Electoria_Call0B
(1)   28/    804B : F8                          dc.b    $F8
(1)   28/    804C : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   29/    804E : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop17
(1)   29/    804E : F7                          dc.b    $F7
(1)   29/    804F : 0008                        dc.b    $00,$08
(1)   29/    8051 : 4B80                                dc.w    z80_ptr(ELECTORIA_LOOP17)
(1)   30/    8053 : (MACRO)             	smpsAlterPitch      $FC
(1)   30/    8053 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)   30/    8053 : FBFC                                dc.b    $FB,$FC
(1)   31/    8055 :                     
(1)   32/    8055 :                     Electoria_Loop18:
(1)   33/    8055 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   33/    8055 : F8                          dc.b    $F8
(1)   33/    8056 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   34/    8058 : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop18
(1)   34/    8058 : F7                          dc.b    $F7
(1)   34/    8059 : 0007                        dc.b    $00,$07
(1)   34/    805B : 5580                                dc.w    z80_ptr(ELECTORIA_LOOP18)
(1)   35/    805D : (MACRO)             	smpsAlterPitch      $04
(1)   35/    805D :  (MACRO-2)                  smpsChangeTransposition $04
(1)   35/    805D : FB04                                dc.b    $FB,$04
(1)   36/    805F : 900C 9C06 8090 809C 	dc.b	nEb1, $0C, nEb2, $06, nRst, nEb1, nRst, nEb2, nEb1, nRst, nRst, nEb2
             8067 : 9080 809C         
(1)   37/    806B : 80                  	dc.b	nRst
(1)   38/    806C : (MACRO)             	smpsModSet          $01, $08, $EC, $00
(1)   38/    806C : F0                          dc.b    $F0
(1)   38/    806D : 0108 EC00                           dc.b    $01,$08,$EC,$00
(1)   38/    8071 :                             ;dc.b   $08,$EC,$00
(1)   39/    8071 : 9018                	dc.b	nEb1, $18
(1)   40/    8073 : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)   40/    8073 : F0                          dc.b    $F0
(1)   40/    8074 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)   40/    8078 :                             ;dc.b   $00,$00,$00
(1)   41/    8078 :                     
(1)   42/    8078 :                     Electoria_Loop19:
(1)   43/    8078 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   43/    8078 : F8                          dc.b    $F8
(1)   43/    8079 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   44/    807B : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop19
(1)   44/    807B : F7                          dc.b    $F7
(1)   44/    807C : 0007                        dc.b    $00,$07
(1)   44/    807E : 7880                                dc.w    z80_ptr(ELECTORIA_LOOP19)
(1)   45/    8080 : 8F0C 9B91 9D92 069E 	dc.b	nD1, $0C, nD2, nE1, nE2, nF1, $06, nF2, nF1, nRst, nD1, nD2
             8088 : 9280 8F9B         
(1)   46/    808C : 8F80                	dc.b	nD1, nRst
(1)   47/    808E :                     
(1)   48/    808E :                     Electoria_Loop1A:
(1)   49/    808E : (MACRO)             	smpsCall            Electoria_Call0B
(1)   49/    808E : F8                          dc.b    $F8
(1)   49/    808F : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   50/    8091 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop1A
(1)   50/    8091 : F7                          dc.b    $F7
(1)   50/    8092 : 0008                        dc.b    $00,$08
(1)   50/    8094 : 8E80                                dc.w    z80_ptr(ELECTORIA_LOOP1A)
(1)   51/    8096 :                     
(1)   52/    8096 :                     Electoria_Loop1B:
(1)   53/    8096 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   53/    8096 : F8                          dc.b    $F8
(1)   53/    8097 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   54/    8099 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop1B
(1)   54/    8099 : F7                          dc.b    $F7
(1)   54/    809A : 0008                        dc.b    $00,$08
(1)   54/    809C : 9680                                dc.w    z80_ptr(ELECTORIA_LOOP1B)
(1)   55/    809E : (MACRO)             	smpsJump            Electoria_Loop17
(1)   55/    809E : F6                          dc.b    $F6
(1)   55/    809F : 4B80                                dc.w    z80_ptr(ELECTORIA_LOOP17)
(1)   56/    80A1 :                     
(1)   57/    80A1 :                     Electoria_Call0B:
(1)   58/    80A1 : 940C A006 8094 0C80 	dc.b	nG1, $0C, nG2, $06, nRst, nG1, $0C, nRst, $06, nG1, nRst, nG1
             80A9 : 0694 8094         
(1)   59/    80AD : 940C 9293           	dc.b	nG1, $0C, nF1, nFs1
(1)   60/    80B1 : (MACRO)             	smpsReturn
(1)   60/    80B1 : F9                                  dc.b    $F9
(1)   61/    80B2 :                     
(1)   62/    80B2 :                     ; FM2 Data
(1)   63/    80B2 :                     Electoria_FM2:
(1)   64/    80B2 : (MACRO)             	smpsSetvoice        $03
(1)   64/    80B2 :  (MACRO-2)                  smpsFMvoice $03
(1)   64/    80B2 : EF03                                dc.b    $EF,$03
(1)   65/    80B4 : 8060                	dc.b	nRst, $60
(1)   66/    80B6 :                     
(1)   67/    80B6 :                     Electoria_Loop14:
(1)   68/    80B6 : (MACRO)             	smpsCall            Electoria_Call04
(1)   68/    80B6 : F8                          dc.b    $F8
(1)   68/    80B7 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)   69/    80B9 : (MACRO)             	smpsAlterPitch      $01
(1)   69/    80B9 :  (MACRO-2)                  smpsChangeTransposition $01
(1)   69/    80B9 : FB01                                dc.b    $FB,$01
(1)   70/    80BB : (MACRO)             	smpsCall            Electoria_Call04
(1)   70/    80BB : F8                          dc.b    $F8
(1)   70/    80BC : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)   71/    80BE : (MACRO)             	smpsAlterPitch      $FF
(1)   71/    80BE :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   71/    80BE : FBFF                                dc.b    $FB,$FF
(1)   72/    80C0 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop14
(1)   72/    80C0 : F7                          dc.b    $F7
(1)   72/    80C1 : 0004                        dc.b    $00,$04
(1)   72/    80C3 : B680                                dc.w    z80_ptr(ELECTORIA_LOOP14)
(1)   73/    80C5 : (MACRO)             	smpsFMAlterVol      $FA
(1)   73/    80C5 : E6FA                                dc.b    $E6,$FA
(1)   74/    80C7 :                     
(1)   75/    80C7 :                     Electoria_Jump01:
(1)   76/    80C7 : (MACRO)             	smpsSetvoice        $01
(1)   76/    80C7 :  (MACRO-2)                  smpsFMvoice $01
(1)   76/    80C7 : EF01                                dc.b    $EF,$01
(1)   77/    80C9 : (MACRO)             	smpsAlterPitch      $0C
(1)   77/    80C9 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   77/    80C9 : FB0C                                dc.b    $FB,$0C
(1)   78/    80CB : (MACRO)             	smpsFMAlterVol      $FB
(1)   78/    80CB : E6FB                                dc.b    $E6,$FB
(1)   79/    80CD : AF12 AC06 803C AA06 	dc.b	nBb3, $12, nG3, $06, nRst, $3C, nF3, $06, nG3, nC4, nRst, nC4
             80D5 : ACB1 80B1         
(1)   80/    80D9 : 80B1 0CB3 06AC E70C 	dc.b	nRst, nC4, $0C, nD4, $06, nG3, smpsNoAttack, $0C, nF3, nG3, $06, nRst
             80E1 : AAAC 0680         
(1)   81/    80E5 : AC0C 8060           	dc.b	nG3, $0C, nRst, $60
(1)   82/    80E9 : (MACRO)             	smpsPan             panLeft, $00
(1)   82/    80E9 : =$0                 panNone set $00
(1)   82/    80E9 : =$40                panRight set $40
(1)   82/    80E9 : =$80                panLeft set $80
(1)   82/    80E9 : =$C0                panCentre set $C0
(1)   82/    80E9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   82/    80E9 : E080                        dc.b $E0,PANLEFT+$00
(1)   83/    80EB : (MACRO)             	smpsAlterPitch      $F4
(1)   83/    80EB :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   83/    80EB : FBF4                                dc.b    $FB,$F4
(1)   84/    80ED : (MACRO)             	smpsSetvoice        $02
(1)   84/    80ED :  (MACRO-2)                  smpsFMvoice $02
(1)   84/    80ED : EF02                                dc.b    $EF,$02
(1)   85/    80EF : (MACRO)             	smpsFMAlterVol      $0A
(1)   85/    80EF : E60A                                dc.b    $E6,$0A
(1)   86/    80F1 : (MACRO)             	smpsCall            Electoria_Call06
(1)   86/    80F1 : F8                          dc.b    $F8
(1)   86/    80F2 : AE81                                dc.w    z80_ptr(ELECTORIA_CALL06)
(1)   87/    80F4 : (MACRO)             	smpsPan             panCenter, $00
(1)   87/    80F4 : =$0                 panNone set $00
(1)   87/    80F4 : =$40                panRight set $40
(1)   87/    80F4 : =$80                panLeft set $80
(1)   87/    80F4 : =$C0                panCentre set $C0
(1)   87/    80F4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   87/    80F4 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   88/    80F6 : (MACRO)             	smpsSetvoice        $01
(1)   88/    80F6 :  (MACRO-2)                  smpsFMvoice $01
(1)   88/    80F6 : EF01                                dc.b    $EF,$01
(1)   89/    80F8 : (MACRO)             	smpsAlterPitch      $0C
(1)   89/    80F8 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   89/    80F8 : FB0C                                dc.b    $FB,$0C
(1)   90/    80FA : (MACRO)             	smpsFMAlterVol      $F6
(1)   90/    80FA : E6F6                                dc.b    $E6,$F6
(1)   91/    80FC : AF0C E70C AC06 8080 	dc.b	nBb3, $0C, smpsNoAttack, $0C, nG3, $06, nRst, nRst, $3C, nF4, $0C, smpsNoAttack
             8104 : 3CB6 0CE7         
(1)   92/    8108 : 0680 B580 B3B5 80B3 	dc.b	$06, nRst, nE4, nRst, nD4, nE4, nRst, nD4, smpsNoAttack, nD4, nRst, nC4
             8110 : E7B3 80B1         
(1)   93/    8114 : 80AF B180 B0E7 60   	dc.b	nRst, nBb3, nC4, nRst, nB3, smpsNoAttack, $60
(1)   94/    811B : (MACRO)             	smpsPan             panLeft, $00
(1)   94/    811B : =$0                 panNone set $00
(1)   94/    811B : =$40                panRight set $40
(1)   94/    811B : =$80                panLeft set $80
(1)   94/    811B : =$C0                panCentre set $C0
(1)   94/    811B : =$C0                panCenter set $C0 ; silly Americans :U
(1)   94/    811B : E080                        dc.b $E0,PANLEFT+$00
(1)   95/    811D : (MACRO)             	smpsAlterPitch      $F4
(1)   95/    811D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   95/    811D : FBF4                                dc.b    $FB,$F4
(1)   96/    811F : (MACRO)             	smpsSetvoice        $02
(1)   96/    811F :  (MACRO-2)                  smpsFMvoice $02
(1)   96/    811F : EF02                                dc.b    $EF,$02
(1)   97/    8121 : (MACRO)             	smpsFMAlterVol      $0A
(1)   97/    8121 : E60A                                dc.b    $E6,$0A
(1)   98/    8123 : (MACRO)             	smpsCall            Electoria_Call07
(1)   98/    8123 : F8                          dc.b    $F8
(1)   98/    8124 : C381                                dc.w    z80_ptr(ELECTORIA_CALL07)
(1)   99/    8126 : (MACRO)             	smpsPan             panCenter, $00
(1)   99/    8126 : =$0                 panNone set $00
(1)   99/    8126 : =$40                panRight set $40
(1)   99/    8126 : =$80                panLeft set $80
(1)   99/    8126 : =$C0                panCentre set $C0
(1)   99/    8126 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   99/    8126 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  100/    8128 : (MACRO)             	smpsSetvoice        $01
(1)  100/    8128 :  (MACRO-2)                  smpsFMvoice $01
(1)  100/    8128 : EF01                                dc.b    $EF,$01
(1)  101/    812A : (MACRO)             	smpsFMAlterVol      $F6
(1)  101/    812A : E6F6                                dc.b    $E6,$F6
(1)  102/    812C : (MACRO)             	smpsCall            Electoria_Call08
(1)  102/    812C : F8                          dc.b    $F8
(1)  102/    812D : EE81                                dc.w    z80_ptr(ELECTORIA_CALL08)
(1)  103/    812F : 8030                	dc.b	nRst, $30
(1)  104/    8131 : (MACRO)             	smpsSetvoice        $02
(1)  104/    8131 :  (MACRO-2)                  smpsFMvoice $02
(1)  104/    8131 : EF02                                dc.b    $EF,$02
(1)  105/    8133 : (MACRO)             	smpsFMAlterVol      $0B
(1)  105/    8133 : E60B                                dc.b    $E6,$0B
(1)  106/    8135 : (MACRO)             	smpsCall            Electoria_Call09
(1)  106/    8135 : F8                          dc.b    $F8
(1)  106/    8136 : 5C82                                dc.w    z80_ptr(ELECTORIA_CALL09)
(1)  107/    8138 : B012 B34E 8060      	dc.b	nB3, $12, nD4, $4E, nRst, $60
(1)  108/    813E : (MACRO)             	smpsCall            Electoria_Call0A
(1)  108/    813E : F8                          dc.b    $F8
(1)  108/    813F : CB82                                dc.w    z80_ptr(ELECTORIA_CALL0A)
(1)  109/    8141 : B312 B84E BD18 BC06 	dc.b	nD4, $12, nG4, $4E, nC5, $18, nB4, $06
(1)  110/    8149 : (MACRO)             	smpsFMAlterVol      $0A
(1)  110/    8149 : E60A                                dc.b    $E6,$0A
(1)  111/    814B : (MACRO)             	smpsPan             panRight, $00
(1)  111/    814B : =$0                 panNone set $00
(1)  111/    814B : =$40                panRight set $40
(1)  111/    814B : =$80                panLeft set $80
(1)  111/    814B : =$C0                panCentre set $C0
(1)  111/    814B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  111/    814B : E040                        dc.b $E0,PANRIGHT+$00
(1)  112/    814D : BC                  	dc.b	nB4
(1)  113/    814E : (MACRO)             	smpsFMAlterVol      $F6
(1)  113/    814E : E6F6                                dc.b    $E6,$F6
(1)  114/    8150 : (MACRO)             	smpsPan             panCenter, $00
(1)  114/    8150 : =$0                 panNone set $00
(1)  114/    8150 : =$40                panRight set $40
(1)  114/    8150 : =$80                panLeft set $80
(1)  114/    8150 : =$C0                panCentre set $C0
(1)  114/    8150 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  114/    8150 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  115/    8152 : BA12                	dc.b	nA4, $12
(1)  116/    8154 : (MACRO)             	smpsFMAlterVol      $0A
(1)  116/    8154 : E60A                                dc.b    $E6,$0A
(1)  117/    8156 : (MACRO)             	smpsPan             panRight, $00
(1)  117/    8156 : =$0                 panNone set $00
(1)  117/    8156 : =$40                panRight set $40
(1)  117/    8156 : =$80                panLeft set $80
(1)  117/    8156 : =$C0                panCentre set $C0
(1)  117/    8156 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  117/    8156 : E040                        dc.b $E0,PANRIGHT+$00
(1)  118/    8158 : 06                  	dc.b	$06
(1)  119/    8159 : (MACRO)             	smpsFMAlterVol      $F6
(1)  119/    8159 : E6F6                                dc.b    $E6,$F6
(1)  120/    815B : (MACRO)             	smpsPan             panCenter, $00
(1)  120/    815B : =$0                 panNone set $00
(1)  120/    815B : =$40                panRight set $40
(1)  120/    815B : =$80                panLeft set $80
(1)  120/    815B : =$C0                panCentre set $C0
(1)  120/    815B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  120/    815B : E0C0                        dc.b $E0,PANCENTER+$00
(1)  121/    815D : BC12                	dc.b	nB4, $12
(1)  122/    815F : (MACRO)             	smpsFMAlterVol      $0A
(1)  122/    815F : E60A                                dc.b    $E6,$0A
(1)  123/    8161 : (MACRO)             	smpsPan             panRight, $00
(1)  123/    8161 : =$0                 panNone set $00
(1)  123/    8161 : =$40                panRight set $40
(1)  123/    8161 : =$80                panLeft set $80
(1)  123/    8161 : =$C0                panCentre set $C0
(1)  123/    8161 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  123/    8161 : E040                        dc.b $E0,PANRIGHT+$00
(1)  124/    8163 : 06                  	dc.b	$06
(1)  125/    8164 : (MACRO)             	smpsFMAlterVol      $F6
(1)  125/    8164 : E6F6                                dc.b    $E6,$F6
(1)  126/    8166 : (MACRO)             	smpsPan             panCenter, $00
(1)  126/    8166 : =$0                 panNone set $00
(1)  126/    8166 : =$40                panRight set $40
(1)  126/    8166 : =$80                panLeft set $80
(1)  126/    8166 : =$C0                panCentre set $C0
(1)  126/    8166 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  126/    8166 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  127/    8168 : B80C E760           	dc.b	nG4, $0C, smpsNoAttack, $60
(1)  128/    816C : (MACRO)             	smpsSetvoice        $03
(1)  128/    816C :  (MACRO-2)                  smpsFMvoice $03
(1)  128/    816C : EF03                                dc.b    $EF,$03
(1)  129/    816E : A060 6030 80        	dc.b	nG2, $60, $60, $30, nRst
(1)  130/    8173 :                     
(1)  131/    8173 :                     Electoria_Loop15:
(1)  132/    8173 : A060                	dc.b	nG2, $60
(1)  133/    8175 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop15
(1)  133/    8175 : F7                          dc.b    $F7
(1)  133/    8176 : 0004                        dc.b    $00,$04
(1)  133/    8178 : 7381                                dc.w    z80_ptr(ELECTORIA_LOOP15)
(1)  134/    817A : (MACRO)             	smpsSetvoice        $01
(1)  134/    817A :  (MACRO-2)                  smpsFMvoice $01
(1)  134/    817A : EF01                                dc.b    $EF,$01
(1)  135/    817C : (MACRO)             	smpsFMAlterVol      $FA
(1)  135/    817C : E6FA                                dc.b    $E6,$FA
(1)  136/    817E : (MACRO)             	smpsJump            Electoria_Jump01
(1)  136/    817E : F6                          dc.b    $F6
(1)  136/    817F : C780                                dc.w    z80_ptr(ELECTORIA_JUMP01)
(1)  137/    8181 :                     
(1)  138/    8181 :                     Electoria_Call04:
(1)  139/    8181 : 800C B00C           	dc.b	nRst, $0C, nB3, $0C
(1)  140/    8185 : (MACRO)             	smpsFMAlterVol      $0A
(1)  140/    8185 : E60A                                dc.b    $E6,$0A
(1)  141/    8187 : (MACRO)             	smpsPan             panLeft, $00
(1)  141/    8187 : =$0                 panNone set $00
(1)  141/    8187 : =$40                panRight set $40
(1)  141/    8187 : =$80                panLeft set $80
(1)  141/    8187 : =$C0                panCentre set $C0
(1)  141/    8187 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  141/    8187 : E080                        dc.b $E0,PANLEFT+$00
(1)  142/    8189 : 06                  	dc.b	$06
(1)  143/    818A : (MACRO)             	smpsFMAlterVol      $F6
(1)  143/    818A : E6F6                                dc.b    $E6,$F6
(1)  144/    818C : (MACRO)             	smpsPan             panCenter, $00
(1)  144/    818C : =$0                 panNone set $00
(1)  144/    818C : =$40                panRight set $40
(1)  144/    818C : =$80                panLeft set $80
(1)  144/    818C : =$C0                panCentre set $C0
(1)  144/    818C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  144/    818C : E0C0                        dc.b $E0,PANCENTER+$00
(1)  145/    818E : 0C                  	dc.b	$0C
(1)  146/    818F : (MACRO)             	smpsFMAlterVol      $0A
(1)  146/    818F : E60A                                dc.b    $E6,$0A
(1)  147/    8191 : (MACRO)             	smpsPan             panLeft, $00
(1)  147/    8191 : =$0                 panNone set $00
(1)  147/    8191 : =$40                panRight set $40
(1)  147/    8191 : =$80                panLeft set $80
(1)  147/    8191 : =$C0                panCentre set $C0
(1)  147/    8191 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  147/    8191 : E080                        dc.b $E0,PANLEFT+$00
(1)  148/    8193 : 06                  	dc.b	$06
(1)  149/    8194 : (MACRO)             	smpsFMAlterVol      $F6
(1)  149/    8194 : E6F6                                dc.b    $E6,$F6
(1)  150/    8196 : (MACRO)             	smpsPan             panCenter, $00
(1)  150/    8196 : =$0                 panNone set $00
(1)  150/    8196 : =$40                panRight set $40
(1)  150/    8196 : =$80                panLeft set $80
(1)  150/    8196 : =$C0                panCentre set $C0
(1)  150/    8196 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  150/    8196 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  151/    8198 : 0C                  	dc.b	$0C
(1)  152/    8199 : (MACRO)             	smpsFMAlterVol      $0A
(1)  152/    8199 : E60A                                dc.b    $E6,$0A
(1)  153/    819B : (MACRO)             	smpsPan             panLeft, $00
(1)  153/    819B : =$0                 panNone set $00
(1)  153/    819B : =$40                panRight set $40
(1)  153/    819B : =$80                panLeft set $80
(1)  153/    819B : =$C0                panCentre set $C0
(1)  153/    819B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  153/    819B : E080                        dc.b $E0,PANLEFT+$00
(1)  154/    819D : 06                  	dc.b	$06
(1)  155/    819E : (MACRO)             	smpsFMAlterVol      $F6
(1)  155/    819E : E6F6                                dc.b    $E6,$F6
(1)  156/    81A0 : (MACRO)             	smpsPan             panCenter, $00
(1)  156/    81A0 : =$0                 panNone set $00
(1)  156/    81A0 : =$40                panRight set $40
(1)  156/    81A0 : =$80                panLeft set $80
(1)  156/    81A0 : =$C0                panCentre set $C0
(1)  156/    81A0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  156/    81A0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  157/    81A2 : 0C                  	dc.b	$0C
(1)  158/    81A3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  158/    81A3 : E60A                                dc.b    $E6,$0A
(1)  159/    81A5 : (MACRO)             	smpsPan             panLeft, $00
(1)  159/    81A5 : =$0                 panNone set $00
(1)  159/    81A5 : =$40                panRight set $40
(1)  159/    81A5 : =$80                panLeft set $80
(1)  159/    81A5 : =$C0                panCentre set $C0
(1)  159/    81A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  159/    81A5 : E080                        dc.b $E0,PANLEFT+$00
(1)  160/    81A7 : 06                  	dc.b	$06
(1)  161/    81A8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  161/    81A8 : E6F6                                dc.b    $E6,$F6
(1)  162/    81AA : (MACRO)             	smpsPan             panCenter, $00
(1)  162/    81AA : =$0                 panNone set $00
(1)  162/    81AA : =$40                panRight set $40
(1)  162/    81AA : =$80                panLeft set $80
(1)  162/    81AA : =$C0                panCentre set $C0
(1)  162/    81AA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  162/    81AA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  163/    81AC : 0C                  	dc.b	$0C
(1)  164/    81AD : (MACRO)             	smpsReturn
(1)  164/    81AD : F9                                  dc.b    $F9
(1)  165/    81AE :                     
(1)  166/    81AE :                     Electoria_Call06:
(1)  167/    81AE : BD12                	dc.b	nC5, $12
(1)  168/    81B0 : (MACRO)             	smpsFMAlterVol      $0A
(1)  168/    81B0 : E60A                                dc.b    $E6,$0A
(1)  169/    81B2 : 06                  	dc.b	$06
(1)  170/    81B3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  170/    81B3 : E6F6                                dc.b    $E6,$F6
(1)  171/    81B5 : BC12 BD06 BAB8      	dc.b	nB4, $12, nC5, $06, nA4, nG4
(1)  172/    81BB : (MACRO)             	smpsFMAlterVol      $0A
(1)  172/    81BB : E60A                                dc.b    $E6,$0A
(1)  173/    81BD : B8                  	dc.b	nG4
(1)  174/    81BE : (MACRO)             	smpsFMAlterVol      $F6
(1)  174/    81BE : E6F6                                dc.b    $E6,$F6
(1)  175/    81C0 : B812                	dc.b	nG4, $12
(1)  176/    81C2 : (MACRO)             	smpsReturn
(1)  176/    81C2 : F9                                  dc.b    $F9
(1)  177/    81C3 :                     
(1)  178/    81C3 :                     Electoria_Call07:
(1)  179/    81C3 : B30C                	dc.b	nD4, $0C
(1)  180/    81C5 : (MACRO)             	smpsFMAlterVol      $0A
(1)  180/    81C5 : E60A                                dc.b    $E6,$0A
(1)  181/    81C7 : 06                  	dc.b	$06
(1)  182/    81C8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  182/    81C8 : E6F6                                dc.b    $E6,$F6
(1)  183/    81CA : B20C                	dc.b	nCs4, $0C
(1)  184/    81CC : (MACRO)             	smpsFMAlterVol      $0A
(1)  184/    81CC : E60A                                dc.b    $E6,$0A
(1)  185/    81CE : 06                  	dc.b	$06
(1)  186/    81CF : (MACRO)             	smpsFMAlterVol      $F6
(1)  186/    81CF : E6F6                                dc.b    $E6,$F6
(1)  187/    81D1 : B10C                	dc.b	nC4, $0C
(1)  188/    81D3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  188/    81D3 : E60A                                dc.b    $E6,$0A
(1)  189/    81D5 : 06                  	dc.b	$06
(1)  190/    81D6 : (MACRO)             	smpsFMAlterVol      $F6
(1)  190/    81D6 : E6F6                                dc.b    $E6,$F6
(1)  191/    81D8 : B00C                	dc.b	nB3, $0C
(1)  192/    81DA : (MACRO)             	smpsFMAlterVol      $0A
(1)  192/    81DA : E60A                                dc.b    $E6,$0A
(1)  193/    81DC : 06                  	dc.b	$06
(1)  194/    81DD : (MACRO)             	smpsFMAlterVol      $F6
(1)  194/    81DD : E6F6                                dc.b    $E6,$F6
(1)  195/    81DF : AF                  	dc.b	nBb3
(1)  196/    81E0 : (MACRO)             	smpsFMAlterVol      $0A
(1)  196/    81E0 : E60A                                dc.b    $E6,$0A
(1)  197/    81E2 : AF                  	dc.b	nBb3
(1)  198/    81E3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  198/    81E3 : E6F6                                dc.b    $E6,$F6
(1)  199/    81E5 : AE                  	dc.b	nA3
(1)  200/    81E6 : (MACRO)             	smpsFMAlterVol      $0A
(1)  200/    81E6 : E60A                                dc.b    $E6,$0A
(1)  201/    81E8 : AE                  	dc.b	nA3
(1)  202/    81E9 : (MACRO)             	smpsFMAlterVol      $F6
(1)  202/    81E9 : E6F6                                dc.b    $E6,$F6
(1)  203/    81EB : AC0C                	dc.b	nG3, $0C
(1)  204/    81ED : (MACRO)             	smpsReturn
(1)  204/    81ED : F9                                  dc.b    $F9
(1)  205/    81EE :                     
(1)  206/    81EE :                     Electoria_Call08:
(1)  207/    81EE : (MACRO)             	smpsAlterPitch      $0C
(1)  207/    81EE :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  207/    81EE : FB0C                                dc.b    $FB,$0C
(1)  208/    81F0 : AF06 80AF 80AF 80AF 	dc.b	nBb3, $06, nRst, nBb3, nRst, nBb3, nRst, nBb3, $0C, nG3, $06, nBb3
             81F8 : 0CAC 06AF         
(1)  209/    81FC : 80B1 80B3 E70C B106 	dc.b	nRst, nC4, nRst, nD4, smpsNoAttack, $0C, nC4, $06, nRst, nBb3, nRst, nC4
             8204 : 80AF 80B1         
(1)  210/    8208 : 80B3 0C80 06B6 12B3 	dc.b	nRst, nD4, $0C, nRst, $06, nF4, $12, nD4, $06, nRst, nC4, $0C
             8210 : 0680 B10C         
(1)  211/    8214 : 8006 B380 4880 0CAA 	dc.b	nRst, $06, nD4, nRst, $48, nRst, $0C, nF3, $06, nRst, nG3, nRst
             821C : 0680 AC80         
(1)  212/    8220 : AF80 B180 B380 B60C 	dc.b	nBb3, nRst, nC4, nRst, nD4, nRst, nF4, $0C, nD4, $06, nRst, nRst
             8228 : B306 8080         
(1)  213/    822C : 0CB3 0680 B680 B380 	dc.b	$0C, nD4, $06, nRst, nF4, nRst, nD4, nRst, nF4, $0C, nG4, $06
             8234 : B60C B806         
(1)  214/    8238 : AF80 B180 B3E7 0CB1 	dc.b	nBb3, nRst, nC4, nRst, nD4, smpsNoAttack, $0C, nC4, $06, nRst, nBb3, nRst
             8240 : 0680 AF80         
(1)  215/    8244 : B180 B30C 8006 B112 	dc.b	nC4, nRst, nD4, $0C, nRst, $06, nC4, $12, nF4, $06, nRst, nF3
             824C : B606 80AA         
(1)  216/    8250 : 6080 0CAF 12B1 0CB6 	dc.b	$60, nRst, $0C, nBb3, $12, nC4, $0C, nF4, $06
             8258 : 06               
(1)  217/    8259 : (MACRO)             	smpsAlterPitch      $F4
(1)  217/    8259 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  217/    8259 : FBF4                                dc.b    $FB,$F4
(1)  218/    825B : (MACRO)             	smpsReturn
(1)  218/    825B : F9                                  dc.b    $F9
(1)  219/    825C :                     
(1)  220/    825C :                     Electoria_Call09:
(1)  221/    825C : (MACRO)             	smpsCall            Electoria_Call13
(1)  221/    825C : F8                          dc.b    $F8
(1)  221/    825D : 3A83                                dc.w    z80_ptr(ELECTORIA_CALL13)
(1)  222/    825F : B30C E706           	dc.b	nD4, $0C, smpsNoAttack, $06
(1)  223/    8263 : (MACRO)             	smpsFMAlterVol      $0A
(1)  223/    8263 : E60A                                dc.b    $E6,$0A
(1)  224/    8265 : (MACRO)             	smpsPan             panRight, $00
(1)  224/    8265 : =$0                 panNone set $00
(1)  224/    8265 : =$40                panRight set $40
(1)  224/    8265 : =$80                panLeft set $80
(1)  224/    8265 : =$C0                panCentre set $C0
(1)  224/    8265 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  224/    8265 : E040                        dc.b $E0,PANRIGHT+$00
(1)  225/    8267 : B3                  	dc.b	nD4
(1)  226/    8268 : (MACRO)             	smpsFMAlterVol      $F6
(1)  226/    8268 : E6F6                                dc.b    $E6,$F6
(1)  227/    826A : (MACRO)             	smpsPan             panCenter, $00
(1)  227/    826A : =$0                 panNone set $00
(1)  227/    826A : =$40                panRight set $40
(1)  227/    826A : =$80                panLeft set $80
(1)  227/    826A : =$C0                panCentre set $C0
(1)  227/    826A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  227/    826A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  228/    826C : B318 B006           	dc.b	nD4, $18, nB3, $06
(1)  229/    8270 : (MACRO)             	smpsFMAlterVol      $0A
(1)  229/    8270 : E60A                                dc.b    $E6,$0A
(1)  230/    8272 : (MACRO)             	smpsPan             panRight, $00
(1)  230/    8272 : =$0                 panNone set $00
(1)  230/    8272 : =$40                panRight set $40
(1)  230/    8272 : =$80                panLeft set $80
(1)  230/    8272 : =$C0                panCentre set $C0
(1)  230/    8272 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  230/    8272 : E040                        dc.b $E0,PANRIGHT+$00
(1)  231/    8274 : B0                  	dc.b	nB3
(1)  232/    8275 : (MACRO)             	smpsFMAlterVol      $F6
(1)  232/    8275 : E6F6                                dc.b    $E6,$F6
(1)  233/    8277 : (MACRO)             	smpsPan             panCenter, $00
(1)  233/    8277 : =$0                 panNone set $00
(1)  233/    8277 : =$40                panRight set $40
(1)  233/    8277 : =$80                panLeft set $80
(1)  233/    8277 : =$C0                panCentre set $C0
(1)  233/    8277 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  233/    8277 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  234/    8279 : B312 B50C           	dc.b	nD4, $12, nE4, $0C
(1)  235/    827D : (MACRO)             	smpsFMAlterVol      $0A
(1)  235/    827D : E60A                                dc.b    $E6,$0A
(1)  236/    827F : (MACRO)             	smpsPan             panRight, $00
(1)  236/    827F : =$0                 panNone set $00
(1)  236/    827F : =$40                panRight set $40
(1)  236/    827F : =$80                panLeft set $80
(1)  236/    827F : =$C0                panCentre set $C0
(1)  236/    827F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  236/    827F : E040                        dc.b $E0,PANRIGHT+$00
(1)  237/    8281 : 06                  	dc.b	$06
(1)  238/    8282 : (MACRO)             	smpsFMAlterVol      $F6
(1)  238/    8282 : E6F6                                dc.b    $E6,$F6
(1)  239/    8284 : (MACRO)             	smpsPan             panCenter, $00
(1)  239/    8284 : =$0                 panNone set $00
(1)  239/    8284 : =$40                panRight set $40
(1)  239/    8284 : =$80                panLeft set $80
(1)  239/    8284 : =$C0                panCentre set $C0
(1)  239/    8284 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  239/    8284 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  240/    8286 : B60C E706           	dc.b	nF4, $0C, smpsNoAttack, $06
(1)  241/    828A : (MACRO)             	smpsFMAlterVol      $0A
(1)  241/    828A : E60A                                dc.b    $E6,$0A
(1)  242/    828C : (MACRO)             	smpsPan             panRight, $00
(1)  242/    828C : =$0                 panNone set $00
(1)  242/    828C : =$40                panRight set $40
(1)  242/    828C : =$80                panLeft set $80
(1)  242/    828C : =$C0                panCentre set $C0
(1)  242/    828C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  242/    828C : E040                        dc.b $E0,PANRIGHT+$00
(1)  243/    828E : B6                  	dc.b	nF4
(1)  244/    828F : (MACRO)             	smpsFMAlterVol      $F6
(1)  244/    828F : E6F6                                dc.b    $E6,$F6
(1)  245/    8291 : (MACRO)             	smpsPan             panCenter, $00
(1)  245/    8291 : =$0                 panNone set $00
(1)  245/    8291 : =$40                panRight set $40
(1)  245/    8291 : =$80                panLeft set $80
(1)  245/    8291 : =$C0                panCentre set $C0
(1)  245/    8291 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  245/    8291 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  246/    8293 : B5                  	dc.b	nE4
(1)  247/    8294 : (MACRO)             	smpsFMAlterVol      $0A
(1)  247/    8294 : E60A                                dc.b    $E6,$0A
(1)  248/    8296 : (MACRO)             	smpsPan             panRight, $00
(1)  248/    8296 : =$0                 panNone set $00
(1)  248/    8296 : =$40                panRight set $40
(1)  248/    8296 : =$80                panLeft set $80
(1)  248/    8296 : =$C0                panCentre set $C0
(1)  248/    8296 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  248/    8296 : E040                        dc.b $E0,PANRIGHT+$00
(1)  249/    8298 : B5                  	dc.b	nE4
(1)  250/    8299 : (MACRO)             	smpsFMAlterVol      $F6
(1)  250/    8299 : E6F6                                dc.b    $E6,$F6
(1)  251/    829B : (MACRO)             	smpsPan             panCenter, $00
(1)  251/    829B : =$0                 panNone set $00
(1)  251/    829B : =$40                panRight set $40
(1)  251/    829B : =$80                panLeft set $80
(1)  251/    829B : =$C0                panCentre set $C0
(1)  251/    829B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  251/    829B : E0C0                        dc.b $E0,PANCENTER+$00
(1)  252/    829D : B6B5                	dc.b	nF4, nE4
(1)  253/    829F : (MACRO)             	smpsFMAlterVol      $0A
(1)  253/    829F : E60A                                dc.b    $E6,$0A
(1)  254/    82A1 : (MACRO)             	smpsPan             panRight, $00
(1)  254/    82A1 : =$0                 panNone set $00
(1)  254/    82A1 : =$40                panRight set $40
(1)  254/    82A1 : =$80                panLeft set $80
(1)  254/    82A1 : =$C0                panCentre set $C0
(1)  254/    82A1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  254/    82A1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  255/    82A3 : B5                  	dc.b	nE4
(1)  256/    82A4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  256/    82A4 : E6F6                                dc.b    $E6,$F6
(1)  257/    82A6 : (MACRO)             	smpsPan             panCenter, $00
(1)  257/    82A6 : =$0                 panNone set $00
(1)  257/    82A6 : =$40                panRight set $40
(1)  257/    82A6 : =$80                panLeft set $80
(1)  257/    82A6 : =$C0                panCentre set $C0
(1)  257/    82A6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  257/    82A6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  258/    82A8 : B30C                	dc.b	nD4, $0C
(1)  259/    82AA : (MACRO)             	smpsFMAlterVol      $0A
(1)  259/    82AA : E60A                                dc.b    $E6,$0A
(1)  260/    82AC : (MACRO)             	smpsPan             panRight, $00
(1)  260/    82AC : =$0                 panNone set $00
(1)  260/    82AC : =$40                panRight set $40
(1)  260/    82AC : =$80                panLeft set $80
(1)  260/    82AC : =$C0                panCentre set $C0
(1)  260/    82AC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  260/    82AC : E040                        dc.b $E0,PANRIGHT+$00
(1)  261/    82AE : 06                  	dc.b	$06
(1)  262/    82AF : (MACRO)             	smpsFMAlterVol      $F6
(1)  262/    82AF : E6F6                                dc.b    $E6,$F6
(1)  263/    82B1 : (MACRO)             	smpsPan             panCenter, $00
(1)  263/    82B1 : =$0                 panNone set $00
(1)  263/    82B1 : =$40                panRight set $40
(1)  263/    82B1 : =$80                panLeft set $80
(1)  263/    82B1 : =$C0                panCentre set $C0
(1)  263/    82B1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  263/    82B1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  264/    82B3 : B1                  	dc.b	nC4
(1)  265/    82B4 : (MACRO)             	smpsFMAlterVol      $0A
(1)  265/    82B4 : E60A                                dc.b    $E6,$0A
(1)  266/    82B6 : (MACRO)             	smpsPan             panRight, $00
(1)  266/    82B6 : =$0                 panNone set $00
(1)  266/    82B6 : =$40                panRight set $40
(1)  266/    82B6 : =$80                panLeft set $80
(1)  266/    82B6 : =$C0                panCentre set $C0
(1)  266/    82B6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  266/    82B6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  267/    82B8 : B1                  	dc.b	nC4
(1)  268/    82B9 : (MACRO)             	smpsFMAlterVol      $F6
(1)  268/    82B9 : E6F6                                dc.b    $E6,$F6
(1)  269/    82BB : (MACRO)             	smpsPan             panCenter, $00
(1)  269/    82BB : =$0                 panNone set $00
(1)  269/    82BB : =$40                panRight set $40
(1)  269/    82BB : =$80                panLeft set $80
(1)  269/    82BB : =$C0                panCentre set $C0
(1)  269/    82BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  269/    82BB : E0C0                        dc.b $E0,PANCENTER+$00
(1)  270/    82BD : B10C B306           	dc.b	nC4, $0C, nD4, $06
(1)  271/    82C1 : (MACRO)             	smpsFMAlterVol      $0A
(1)  271/    82C1 : E60A                                dc.b    $E6,$0A
(1)  272/    82C3 : (MACRO)             	smpsPan             panRight, $00
(1)  272/    82C3 : =$0                 panNone set $00
(1)  272/    82C3 : =$40                panRight set $40
(1)  272/    82C3 : =$80                panLeft set $80
(1)  272/    82C3 : =$C0                panCentre set $C0
(1)  272/    82C3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  272/    82C3 : E040                        dc.b $E0,PANRIGHT+$00
(1)  273/    82C5 : B3                  	dc.b	nD4
(1)  274/    82C6 : (MACRO)             	smpsFMAlterVol      $F6
(1)  274/    82C6 : E6F6                                dc.b    $E6,$F6
(1)  275/    82C8 : (MACRO)             	smpsPan             panCenter, $00
(1)  275/    82C8 : =$0                 panNone set $00
(1)  275/    82C8 : =$40                panRight set $40
(1)  275/    82C8 : =$80                panLeft set $80
(1)  275/    82C8 : =$C0                panCentre set $C0
(1)  275/    82C8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  275/    82C8 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  276/    82CA : (MACRO)             	smpsReturn
(1)  276/    82CA : F9                                  dc.b    $F9
(1)  277/    82CB :                     
(1)  278/    82CB :                     Electoria_Call0A:
(1)  279/    82CB : (MACRO)             	smpsCall            Electoria_Call13
(1)  279/    82CB : F8                          dc.b    $F8
(1)  279/    82CC : 3A83                                dc.w    z80_ptr(ELECTORIA_CALL13)
(1)  280/    82CE : B60C E706           	dc.b	nF4, $0C, smpsNoAttack, $06
(1)  281/    82D2 : (MACRO)             	smpsFMAlterVol      $0A
(1)  281/    82D2 : E60A                                dc.b    $E6,$0A
(1)  282/    82D4 : (MACRO)             	smpsPan             panRight, $00
(1)  282/    82D4 : =$0                 panNone set $00
(1)  282/    82D4 : =$40                panRight set $40
(1)  282/    82D4 : =$80                panLeft set $80
(1)  282/    82D4 : =$C0                panCentre set $C0
(1)  282/    82D4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  282/    82D4 : E040                        dc.b $E0,PANRIGHT+$00
(1)  283/    82D6 : B6                  	dc.b	nF4
(1)  284/    82D7 : (MACRO)             	smpsFMAlterVol      $F6
(1)  284/    82D7 : E6F6                                dc.b    $E6,$F6
(1)  285/    82D9 : (MACRO)             	smpsPan             panCenter, $00
(1)  285/    82D9 : =$0                 panNone set $00
(1)  285/    82D9 : =$40                panRight set $40
(1)  285/    82D9 : =$80                panLeft set $80
(1)  285/    82D9 : =$C0                panCentre set $C0
(1)  285/    82D9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  285/    82D9 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  286/    82DB : B618 B306           	dc.b	nF4, $18, nD4, $06
(1)  287/    82DF : (MACRO)             	smpsFMAlterVol      $0A
(1)  287/    82DF : E60A                                dc.b    $E6,$0A
(1)  288/    82E1 : (MACRO)             	smpsPan             panRight, $00
(1)  288/    82E1 : =$0                 panNone set $00
(1)  288/    82E1 : =$40                panRight set $40
(1)  288/    82E1 : =$80                panLeft set $80
(1)  288/    82E1 : =$C0                panCentre set $C0
(1)  288/    82E1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  288/    82E1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  289/    82E3 : B3                  	dc.b	nD4
(1)  290/    82E4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  290/    82E4 : E6F6                                dc.b    $E6,$F6
(1)  291/    82E6 : (MACRO)             	smpsPan             panCenter, $00
(1)  291/    82E6 : =$0                 panNone set $00
(1)  291/    82E6 : =$40                panRight set $40
(1)  291/    82E6 : =$80                panLeft set $80
(1)  291/    82E6 : =$C0                panCentre set $C0
(1)  291/    82E6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  291/    82E6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  292/    82E8 : B612 B80C           	dc.b	nF4, $12, nG4, $0C
(1)  293/    82EC : (MACRO)             	smpsFMAlterVol      $0A
(1)  293/    82EC : E60A                                dc.b    $E6,$0A
(1)  294/    82EE : (MACRO)             	smpsPan             panRight, $00
(1)  294/    82EE : =$0                 panNone set $00
(1)  294/    82EE : =$40                panRight set $40
(1)  294/    82EE : =$80                panLeft set $80
(1)  294/    82EE : =$C0                panCentre set $C0
(1)  294/    82EE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  294/    82EE : E040                        dc.b $E0,PANRIGHT+$00
(1)  295/    82F0 : 06                  	dc.b	$06
(1)  296/    82F1 : (MACRO)             	smpsFMAlterVol      $F6
(1)  296/    82F1 : E6F6                                dc.b    $E6,$F6
(1)  297/    82F3 : (MACRO)             	smpsPan             panCenter, $00
(1)  297/    82F3 : =$0                 panNone set $00
(1)  297/    82F3 : =$40                panRight set $40
(1)  297/    82F3 : =$80                panLeft set $80
(1)  297/    82F3 : =$C0                panCentre set $C0
(1)  297/    82F3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  297/    82F3 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  298/    82F5 : BC0C E706           	dc.b	nB4, $0C, smpsNoAttack, $06
(1)  299/    82F9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  299/    82F9 : E60A                                dc.b    $E6,$0A
(1)  300/    82FB : (MACRO)             	smpsPan             panRight, $00
(1)  300/    82FB : =$0                 panNone set $00
(1)  300/    82FB : =$40                panRight set $40
(1)  300/    82FB : =$80                panLeft set $80
(1)  300/    82FB : =$C0                panCentre set $C0
(1)  300/    82FB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  300/    82FB : E040                        dc.b $E0,PANRIGHT+$00
(1)  301/    82FD : BC                  	dc.b	nB4
(1)  302/    82FE : (MACRO)             	smpsFMAlterVol      $F6
(1)  302/    82FE : E6F6                                dc.b    $E6,$F6
(1)  303/    8300 : (MACRO)             	smpsPan             panCenter, $00
(1)  303/    8300 : =$0                 panNone set $00
(1)  303/    8300 : =$40                panRight set $40
(1)  303/    8300 : =$80                panLeft set $80
(1)  303/    8300 : =$C0                panCentre set $C0
(1)  303/    8300 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  303/    8300 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  304/    8302 : BD                  	dc.b	nC5
(1)  305/    8303 : (MACRO)             	smpsFMAlterVol      $0A
(1)  305/    8303 : E60A                                dc.b    $E6,$0A
(1)  306/    8305 : (MACRO)             	smpsPan             panRight, $00
(1)  306/    8305 : =$0                 panNone set $00
(1)  306/    8305 : =$40                panRight set $40
(1)  306/    8305 : =$80                panLeft set $80
(1)  306/    8305 : =$C0                panCentre set $C0
(1)  306/    8305 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  306/    8305 : E040                        dc.b $E0,PANRIGHT+$00
(1)  307/    8307 : BD                  	dc.b	nC5
(1)  308/    8308 : (MACRO)             	smpsFMAlterVol      $F6
(1)  308/    8308 : E6F6                                dc.b    $E6,$F6
(1)  309/    830A : (MACRO)             	smpsPan             panCenter, $00
(1)  309/    830A : =$0                 panNone set $00
(1)  309/    830A : =$40                panRight set $40
(1)  309/    830A : =$80                panLeft set $80
(1)  309/    830A : =$C0                panCentre set $C0
(1)  309/    830A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  309/    830A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  310/    830C : BCBA                	dc.b	nB4, nA4
(1)  311/    830E : (MACRO)             	smpsFMAlterVol      $0A
(1)  311/    830E : E60A                                dc.b    $E6,$0A
(1)  312/    8310 : (MACRO)             	smpsPan             panRight, $00
(1)  312/    8310 : =$0                 panNone set $00
(1)  312/    8310 : =$40                panRight set $40
(1)  312/    8310 : =$80                panLeft set $80
(1)  312/    8310 : =$C0                panCentre set $C0
(1)  312/    8310 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  312/    8310 : E040                        dc.b $E0,PANRIGHT+$00
(1)  313/    8312 : BA                  	dc.b	nA4
(1)  314/    8313 : (MACRO)             	smpsFMAlterVol      $F6
(1)  314/    8313 : E6F6                                dc.b    $E6,$F6
(1)  315/    8315 : (MACRO)             	smpsPan             panCenter, $00
(1)  315/    8315 : =$0                 panNone set $00
(1)  315/    8315 : =$40                panRight set $40
(1)  315/    8315 : =$80                panLeft set $80
(1)  315/    8315 : =$C0                panCentre set $C0
(1)  315/    8315 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  315/    8315 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  316/    8317 : BF0C                	dc.b	nD5, $0C
(1)  317/    8319 : (MACRO)             	smpsFMAlterVol      $0A
(1)  317/    8319 : E60A                                dc.b    $E6,$0A
(1)  318/    831B : (MACRO)             	smpsPan             panRight, $00
(1)  318/    831B : =$0                 panNone set $00
(1)  318/    831B : =$40                panRight set $40
(1)  318/    831B : =$80                panLeft set $80
(1)  318/    831B : =$C0                panCentre set $C0
(1)  318/    831B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  318/    831B : E040                        dc.b $E0,PANRIGHT+$00
(1)  319/    831D : 06                  	dc.b	$06
(1)  320/    831E : (MACRO)             	smpsFMAlterVol      $F6
(1)  320/    831E : E6F6                                dc.b    $E6,$F6
(1)  321/    8320 : (MACRO)             	smpsPan             panCenter, $00
(1)  321/    8320 : =$0                 panNone set $00
(1)  321/    8320 : =$40                panRight set $40
(1)  321/    8320 : =$80                panLeft set $80
(1)  321/    8320 : =$C0                panCentre set $C0
(1)  321/    8320 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  321/    8320 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  322/    8322 : B6                  	dc.b	nF4
(1)  323/    8323 : (MACRO)             	smpsFMAlterVol      $0A
(1)  323/    8323 : E60A                                dc.b    $E6,$0A
(1)  324/    8325 : (MACRO)             	smpsPan             panRight, $00
(1)  324/    8325 : =$0                 panNone set $00
(1)  324/    8325 : =$40                panRight set $40
(1)  324/    8325 : =$80                panLeft set $80
(1)  324/    8325 : =$C0                panCentre set $C0
(1)  324/    8325 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  324/    8325 : E040                        dc.b $E0,PANRIGHT+$00
(1)  325/    8327 : B6                  	dc.b	nF4
(1)  326/    8328 : (MACRO)             	smpsFMAlterVol      $F6
(1)  326/    8328 : E6F6                                dc.b    $E6,$F6
(1)  327/    832A : (MACRO)             	smpsPan             panCenter, $00
(1)  327/    832A : =$0                 panNone set $00
(1)  327/    832A : =$40                panRight set $40
(1)  327/    832A : =$80                panLeft set $80
(1)  327/    832A : =$C0                panCentre set $C0
(1)  327/    832A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  327/    832A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  328/    832C : B60C B806           	dc.b	nF4, $0C, nG4, $06
(1)  329/    8330 : (MACRO)             	smpsFMAlterVol      $0A
(1)  329/    8330 : E60A                                dc.b    $E6,$0A
(1)  330/    8332 : (MACRO)             	smpsPan             panRight, $00
(1)  330/    8332 : =$0                 panNone set $00
(1)  330/    8332 : =$40                panRight set $40
(1)  330/    8332 : =$80                panLeft set $80
(1)  330/    8332 : =$C0                panCentre set $C0
(1)  330/    8332 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  330/    8332 : E040                        dc.b $E0,PANRIGHT+$00
(1)  331/    8334 : B8                  	dc.b	nG4
(1)  332/    8335 : (MACRO)             	smpsFMAlterVol      $F6
(1)  332/    8335 : E6F6                                dc.b    $E6,$F6
(1)  333/    8337 : (MACRO)             	smpsPan             panCenter, $00
(1)  333/    8337 : =$0                 panNone set $00
(1)  333/    8337 : =$40                panRight set $40
(1)  333/    8337 : =$80                panLeft set $80
(1)  333/    8337 : =$C0                panCentre set $C0
(1)  333/    8337 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  333/    8337 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  334/    8339 : (MACRO)             	smpsReturn
(1)  334/    8339 : F9                                  dc.b    $F9
(1)  335/    833A :                     
(1)  336/    833A :                     Electoria_Call13:
(1)  337/    833A : 800C B6B8 0680 06   	dc.b	nRst, $0C, nF4, nG4, $06, nRst, $06
(1)  338/    8341 : (MACRO)             	smpsFMAlterVol      $0A
(1)  338/    8341 : E60A                                dc.b    $E6,$0A
(1)  339/    8343 : (MACRO)             	smpsPan             panRight, $00
(1)  339/    8343 : =$0                 panNone set $00
(1)  339/    8343 : =$40                panRight set $40
(1)  339/    8343 : =$80                panLeft set $80
(1)  339/    8343 : =$C0                panCentre set $C0
(1)  339/    8343 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  339/    8343 : E040                        dc.b $E0,PANRIGHT+$00
(1)  340/    8345 : B880                	dc.b	nG4, nRst
(1)  341/    8347 : (MACRO)             	smpsFMAlterVol      $F6
(1)  341/    8347 : E6F6                                dc.b    $E6,$F6
(1)  342/    8349 : (MACRO)             	smpsPan             panCenter, $00
(1)  342/    8349 : =$0                 panNone set $00
(1)  342/    8349 : =$40                panRight set $40
(1)  342/    8349 : =$80                panLeft set $80
(1)  342/    8349 : =$C0                panCentre set $C0
(1)  342/    8349 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  342/    8349 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  343/    834B : BC12 B806           	dc.b	nB4, $12, nG4, $06
(1)  344/    834F : (MACRO)             	smpsFMAlterVol      $0A
(1)  344/    834F : E60A                                dc.b    $E6,$0A
(1)  345/    8351 : (MACRO)             	smpsPan             panRight, $00
(1)  345/    8351 : =$0                 panNone set $00
(1)  345/    8351 : =$40                panRight set $40
(1)  345/    8351 : =$80                panLeft set $80
(1)  345/    8351 : =$C0                panCentre set $C0
(1)  345/    8351 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  345/    8351 : E040                        dc.b $E0,PANRIGHT+$00
(1)  346/    8353 : 0680                	dc.b	$06, nRst
(1)  347/    8355 : (MACRO)             	smpsFMAlterVol      $F6
(1)  347/    8355 : E6F6                                dc.b    $E6,$F6
(1)  348/    8357 : (MACRO)             	smpsPan             panCenter, $00
(1)  348/    8357 : =$0                 panNone set $00
(1)  348/    8357 : =$40                panRight set $40
(1)  348/    8357 : =$80                panLeft set $80
(1)  348/    8357 : =$C0                panCentre set $C0
(1)  348/    8357 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  348/    8357 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  349/    8359 : BD0C E70C BC06      	dc.b	nC5, $0C, smpsNoAttack, $0C, nB4, $06
(1)  350/    835F : (MACRO)             	smpsFMAlterVol      $0A
(1)  350/    835F : E60A                                dc.b    $E6,$0A
(1)  351/    8361 : (MACRO)             	smpsPan             panRight, $00
(1)  351/    8361 : =$0                 panNone set $00
(1)  351/    8361 : =$40                panRight set $40
(1)  351/    8361 : =$80                panLeft set $80
(1)  351/    8361 : =$C0                panCentre set $C0
(1)  351/    8361 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  351/    8361 : E040                        dc.b $E0,PANRIGHT+$00
(1)  352/    8363 : BC                  	dc.b	nB4
(1)  353/    8364 : (MACRO)             	smpsFMAlterVol      $F6
(1)  353/    8364 : E6F6                                dc.b    $E6,$F6
(1)  354/    8366 : (MACRO)             	smpsPan             panCenter, $00
(1)  354/    8366 : =$0                 panNone set $00
(1)  354/    8366 : =$40                panRight set $40
(1)  354/    8366 : =$80                panLeft set $80
(1)  354/    8366 : =$C0                panCentre set $C0
(1)  354/    8366 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  354/    8366 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  355/    8368 : BDBF                	dc.b	nC5, nD5
(1)  356/    836A : (MACRO)             	smpsFMAlterVol      $0A
(1)  356/    836A : E60A                                dc.b    $E6,$0A
(1)  357/    836C : (MACRO)             	smpsPan             panRight, $00
(1)  357/    836C : =$0                 panNone set $00
(1)  357/    836C : =$40                panRight set $40
(1)  357/    836C : =$80                panLeft set $80
(1)  357/    836C : =$C0                panCentre set $C0
(1)  357/    836C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  357/    836C : E040                        dc.b $E0,PANRIGHT+$00
(1)  358/    836E : BF                  	dc.b	nD5
(1)  359/    836F : (MACRO)             	smpsFMAlterVol      $F6
(1)  359/    836F : E6F6                                dc.b    $E6,$F6
(1)  360/    8371 : (MACRO)             	smpsPan             panCenter, $00
(1)  360/    8371 : =$0                 panNone set $00
(1)  360/    8371 : =$40                panRight set $40
(1)  360/    8371 : =$80                panLeft set $80
(1)  360/    8371 : =$C0                panCentre set $C0
(1)  360/    8371 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  360/    8371 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  361/    8373 : BD0C                	dc.b	nC5, $0C
(1)  362/    8375 : (MACRO)             	smpsFMAlterVol      $0A
(1)  362/    8375 : E60A                                dc.b    $E6,$0A
(1)  363/    8377 : (MACRO)             	smpsPan             panRight, $00
(1)  363/    8377 : =$0                 panNone set $00
(1)  363/    8377 : =$40                panRight set $40
(1)  363/    8377 : =$80                panLeft set $80
(1)  363/    8377 : =$C0                panCentre set $C0
(1)  363/    8377 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  363/    8377 : E040                        dc.b $E0,PANRIGHT+$00
(1)  364/    8379 : 06                  	dc.b	$06
(1)  365/    837A : (MACRO)             	smpsFMAlterVol      $F6
(1)  365/    837A : E6F6                                dc.b    $E6,$F6
(1)  366/    837C : (MACRO)             	smpsPan             panCenter, $00
(1)  366/    837C : =$0                 panNone set $00
(1)  366/    837C : =$40                panRight set $40
(1)  366/    837C : =$80                panLeft set $80
(1)  366/    837C : =$C0                panCentre set $C0
(1)  366/    837C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  366/    837C : E0C0                        dc.b $E0,PANCENTER+$00
(1)  367/    837E : BC0C                	dc.b	nB4, $0C
(1)  368/    8380 : (MACRO)             	smpsFMAlterVol      $0A
(1)  368/    8380 : E60A                                dc.b    $E6,$0A
(1)  369/    8382 : (MACRO)             	smpsPan             panRight, $00
(1)  369/    8382 : =$0                 panNone set $00
(1)  369/    8382 : =$40                panRight set $40
(1)  369/    8382 : =$80                panLeft set $80
(1)  369/    8382 : =$C0                panCentre set $C0
(1)  369/    8382 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  369/    8382 : E040                        dc.b $E0,PANRIGHT+$00
(1)  370/    8384 : 06                  	dc.b	$06
(1)  371/    8385 : (MACRO)             	smpsFMAlterVol      $F6
(1)  371/    8385 : E6F6                                dc.b    $E6,$F6
(1)  372/    8387 : (MACRO)             	smpsPan             panCenter, $00
(1)  372/    8387 : =$0                 panNone set $00
(1)  372/    8387 : =$40                panRight set $40
(1)  372/    8387 : =$80                panLeft set $80
(1)  372/    8387 : =$C0                panCentre set $C0
(1)  372/    8387 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  372/    8387 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  373/    8389 : BA12                	dc.b	nA4, $12
(1)  374/    838B : (MACRO)             	smpsFMAlterVol      $0A
(1)  374/    838B : E60A                                dc.b    $E6,$0A
(1)  375/    838D : (MACRO)             	smpsPan             panRight, $00
(1)  375/    838D : =$0                 panNone set $00
(1)  375/    838D : =$40                panRight set $40
(1)  375/    838D : =$80                panLeft set $80
(1)  375/    838D : =$C0                panCentre set $C0
(1)  375/    838D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  375/    838D : E040                        dc.b $E0,PANRIGHT+$00
(1)  376/    838F : 0C                  	dc.b	$0C
(1)  377/    8390 : (MACRO)             	smpsFMAlterVol      $F6
(1)  377/    8390 : E6F6                                dc.b    $E6,$F6
(1)  378/    8392 : (MACRO)             	smpsPan             panCenter, $00
(1)  378/    8392 : =$0                 panNone set $00
(1)  378/    8392 : =$40                panRight set $40
(1)  378/    8392 : =$80                panLeft set $80
(1)  378/    8392 : =$C0                panCentre set $C0
(1)  378/    8392 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  378/    8392 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  379/    8394 : B6B8 0680 06        	dc.b	nF4, nG4, $06, nRst, $06
(1)  380/    8399 : (MACRO)             	smpsFMAlterVol      $0A
(1)  380/    8399 : E60A                                dc.b    $E6,$0A
(1)  381/    839B : (MACRO)             	smpsPan             panRight, $00
(1)  381/    839B : =$0                 panNone set $00
(1)  381/    839B : =$40                panRight set $40
(1)  381/    839B : =$80                panLeft set $80
(1)  381/    839B : =$C0                panCentre set $C0
(1)  381/    839B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  381/    839B : E040                        dc.b $E0,PANRIGHT+$00
(1)  382/    839D : B880                	dc.b	nG4, nRst
(1)  383/    839F : (MACRO)             	smpsFMAlterVol      $F6
(1)  383/    839F : E6F6                                dc.b    $E6,$F6
(1)  384/    83A1 : (MACRO)             	smpsPan             panCenter, $00
(1)  384/    83A1 : =$0                 panNone set $00
(1)  384/    83A1 : =$40                panRight set $40
(1)  384/    83A1 : =$80                panLeft set $80
(1)  384/    83A1 : =$C0                panCentre set $C0
(1)  384/    83A1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  384/    83A1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  385/    83A3 : BC12 B806           	dc.b	nB4, $12, nG4, $06
(1)  386/    83A7 : (MACRO)             	smpsFMAlterVol      $0A
(1)  386/    83A7 : E60A                                dc.b    $E6,$0A
(1)  387/    83A9 : (MACRO)             	smpsPan             panRight, $00
(1)  387/    83A9 : =$0                 panNone set $00
(1)  387/    83A9 : =$40                panRight set $40
(1)  387/    83A9 : =$80                panLeft set $80
(1)  387/    83A9 : =$C0                panCentre set $C0
(1)  387/    83A9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  387/    83A9 : E040                        dc.b $E0,PANRIGHT+$00
(1)  388/    83AB : 0C                  	dc.b	$0C
(1)  389/    83AC : (MACRO)             	smpsFMAlterVol      $F6
(1)  389/    83AC : E6F6                                dc.b    $E6,$F6
(1)  390/    83AE : (MACRO)             	smpsPan             panCenter, $00
(1)  390/    83AE : =$0                 panNone set $00
(1)  390/    83AE : =$40                panRight set $40
(1)  390/    83AE : =$80                panLeft set $80
(1)  390/    83AE : =$C0                panCentre set $C0
(1)  390/    83AE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  390/    83AE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  391/    83B0 : B6E7 06             	dc.b	nF4, smpsNoAttack, $06
(1)  392/    83B3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  392/    83B3 : E60A                                dc.b    $E6,$0A
(1)  393/    83B5 : (MACRO)             	smpsPan             panRight, $00
(1)  393/    83B5 : =$0                 panNone set $00
(1)  393/    83B5 : =$40                panRight set $40
(1)  393/    83B5 : =$80                panLeft set $80
(1)  393/    83B5 : =$C0                panCentre set $C0
(1)  393/    83B5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  393/    83B5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  394/    83B7 : B6                  	dc.b	nF4
(1)  395/    83B8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  395/    83B8 : E6F6                                dc.b    $E6,$F6
(1)  396/    83BA : (MACRO)             	smpsPan             panCenter, $00
(1)  396/    83BA : =$0                 panNone set $00
(1)  396/    83BA : =$40                panRight set $40
(1)  396/    83BA : =$80                panLeft set $80
(1)  396/    83BA : =$C0                panCentre set $C0
(1)  396/    83BA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  396/    83BA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  397/    83BC : B8                  	dc.b	nG4
(1)  398/    83BD : (MACRO)             	smpsFMAlterVol      $0A
(1)  398/    83BD : E60A                                dc.b    $E6,$0A
(1)  399/    83BF : (MACRO)             	smpsPan             panRight, $00
(1)  399/    83BF : =$0                 panNone set $00
(1)  399/    83BF : =$40                panRight set $40
(1)  399/    83BF : =$80                panLeft set $80
(1)  399/    83BF : =$C0                panCentre set $C0
(1)  399/    83BF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  399/    83BF : E040                        dc.b $E0,PANRIGHT+$00
(1)  400/    83C1 : B8                  	dc.b	nG4
(1)  401/    83C2 : (MACRO)             	smpsFMAlterVol      $F6
(1)  401/    83C2 : E6F6                                dc.b    $E6,$F6
(1)  402/    83C4 : (MACRO)             	smpsPan             panCenter, $00
(1)  402/    83C4 : =$0                 panNone set $00
(1)  402/    83C4 : =$40                panRight set $40
(1)  402/    83C4 : =$80                panLeft set $80
(1)  402/    83C4 : =$C0                panCentre set $C0
(1)  402/    83C4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  402/    83C4 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  403/    83C6 : B6B5                	dc.b	nF4, nE4
(1)  404/    83C8 : (MACRO)             	smpsFMAlterVol      $0A
(1)  404/    83C8 : E60A                                dc.b    $E6,$0A
(1)  405/    83CA : (MACRO)             	smpsPan             panRight, $00
(1)  405/    83CA : =$0                 panNone set $00
(1)  405/    83CA : =$40                panRight set $40
(1)  405/    83CA : =$80                panLeft set $80
(1)  405/    83CA : =$C0                panCentre set $C0
(1)  405/    83CA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  405/    83CA : E040                        dc.b $E0,PANRIGHT+$00
(1)  406/    83CC : B5                  	dc.b	nE4
(1)  407/    83CD : (MACRO)             	smpsFMAlterVol      $F6
(1)  407/    83CD : E6F6                                dc.b    $E6,$F6
(1)  408/    83CF : (MACRO)             	smpsPan             panCenter, $00
(1)  408/    83CF : =$0                 panNone set $00
(1)  408/    83CF : =$40                panRight set $40
(1)  408/    83CF : =$80                panLeft set $80
(1)  408/    83CF : =$C0                panCentre set $C0
(1)  408/    83CF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  408/    83CF : E0C0                        dc.b $E0,PANCENTER+$00
(1)  409/    83D1 : B31E                	dc.b	nD4, $1E
(1)  410/    83D3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  410/    83D3 : E60A                                dc.b    $E6,$0A
(1)  411/    83D5 : (MACRO)             	smpsPan             panRight, $00
(1)  411/    83D5 : =$0                 panNone set $00
(1)  411/    83D5 : =$40                panRight set $40
(1)  411/    83D5 : =$80                panLeft set $80
(1)  411/    83D5 : =$C0                panCentre set $C0
(1)  411/    83D5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  411/    83D5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  412/    83D7 : 0C                  	dc.b	$0C
(1)  413/    83D8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  413/    83D8 : E6F6                                dc.b    $E6,$F6
(1)  414/    83DA : (MACRO)             	smpsPan             panCenter, $00
(1)  414/    83DA : =$0                 panNone set $00
(1)  414/    83DA : =$40                panRight set $40
(1)  414/    83DA : =$80                panLeft set $80
(1)  414/    83DA : =$C0                panCentre set $C0
(1)  414/    83DA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  414/    83DA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  415/    83DC : (MACRO)             	smpsReturn
(1)  415/    83DC : F9                                  dc.b    $F9
(1)  416/    83DD :                     
(1)  417/    83DD :                     ; FM3 Data
(1)  418/    83DD :                     Electoria_FM3:
(1)  419/    83DD : (MACRO)             	smpsSetvoice        $03
(1)  419/    83DD :  (MACRO-2)                  smpsFMvoice $03
(1)  419/    83DD : EF03                                dc.b    $EF,$03
(1)  420/    83DF : 8060                	dc.b	nRst, $60
(1)  421/    83E1 : (MACRO)             	smpsAlterPitch      $FA
(1)  421/    83E1 :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  421/    83E1 : FBFA                                dc.b    $FB,$FA
(1)  422/    83E3 :                     
(1)  423/    83E3 :                     Electoria_Loop11:
(1)  424/    83E3 : (MACRO)             	smpsCall            Electoria_Call04
(1)  424/    83E3 : F8                          dc.b    $F8
(1)  424/    83E4 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  425/    83E6 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop11
(1)  425/    83E6 : F7                          dc.b    $F7
(1)  425/    83E7 : 0008                        dc.b    $00,$08
(1)  425/    83E9 : E383                                dc.w    z80_ptr(ELECTORIA_LOOP11)
(1)  426/    83EB : (MACRO)             	smpsAlterPitch      $06
(1)  426/    83EB :  (MACRO-2)                  smpsChangeTransposition $06
(1)  426/    83EB : FB06                                dc.b    $FB,$06
(1)  427/    83ED : (MACRO)             	smpsFMAlterVol      $FC
(1)  427/    83ED : E6FC                                dc.b    $E6,$FC
(1)  428/    83EF :                     
(1)  429/    83EF :                     Electoria_Jump00:
(1)  430/    83EF : (MACRO)             	smpsSetvoice        $01
(1)  430/    83EF :  (MACRO-2)                  smpsFMvoice $01
(1)  430/    83EF : EF01                                dc.b    $EF,$01
(1)  431/    83F1 : (MACRO)             	smpsPan             panLeft, $00
(1)  431/    83F1 : =$0                 panNone set $00
(1)  431/    83F1 : =$40                panRight set $40
(1)  431/    83F1 : =$80                panLeft set $80
(1)  431/    83F1 : =$C0                panCentre set $C0
(1)  431/    83F1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  431/    83F1 : E080                        dc.b $E0,PANLEFT+$00
(1)  432/    83F3 : (MACRO)             	smpsModSet          $01, $01, $02, $03
(1)  432/    83F3 : F0                          dc.b    $F0
(1)  432/    83F4 : 0101 0203                           dc.b    $01,$01,$02,$03
(1)  432/    83F8 :                             ;dc.b   $01,$02,$03
(1)  433/    83F8 : (MACRO)             	smpsAlterPitch      $0C
(1)  433/    83F8 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  433/    83F8 : FB0C                                dc.b    $FB,$0C
(1)  434/    83FA : 8006 AF12 AC06 803C 	dc.b	nRst, $06, nBb3, $12, nG3, $06, nRst, $3C, nF3, $06, nG3, nC4
             8402 : AA06 ACB1         
(1)  435/    8406 : 80B1 80B1 0CB3 06AC 	dc.b	nRst, nC4, nRst, nC4, $0C, nD4, $06, nG3, smpsNoAttack, $0C, nF3, nG3
             840E : E70C AAAC         
(1)  436/    8412 : 0680 AC0C 805A      	dc.b	$06, nRst, nG3, $0C, nRst, $5A
(1)  437/    8418 : (MACRO)             	smpsSetvoice        $02
(1)  437/    8418 :  (MACRO-2)                  smpsFMvoice $02
(1)  437/    8418 : EF02                                dc.b    $EF,$02
(1)  438/    841A : (MACRO)             	smpsFMAlterVol      $03
(1)  438/    841A : E603                                dc.b    $E6,$03
(1)  439/    841C : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  439/    841C : F0                          dc.b    $F0
(1)  439/    841D : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  439/    8421 :                             ;dc.b   $00,$00,$00
(1)  440/    8421 : (MACRO)             	smpsPan             panRight, $00
(1)  440/    8421 : =$0                 panNone set $00
(1)  440/    8421 : =$40                panRight set $40
(1)  440/    8421 : =$80                panLeft set $80
(1)  440/    8421 : =$C0                panCentre set $C0
(1)  440/    8421 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  440/    8421 : E040                        dc.b $E0,PANRIGHT+$00
(1)  441/    8423 : (MACRO)             	smpsAlterPitch      $E8
(1)  441/    8423 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  441/    8423 : FBE8                                dc.b    $FB,$E8
(1)  442/    8425 : (MACRO)             	smpsCall            Electoria_Call06
(1)  442/    8425 : F8                          dc.b    $F8
(1)  442/    8426 : AE81                                dc.w    z80_ptr(ELECTORIA_CALL06)
(1)  443/    8428 : (MACRO)             	smpsModSet          $01, $01, $01, $05
(1)  443/    8428 : F0                          dc.b    $F0
(1)  443/    8429 : 0101 0105                           dc.b    $01,$01,$01,$05
(1)  443/    842D :                             ;dc.b   $01,$01,$05
(1)  444/    842D : (MACRO)             	smpsPan             panLeft, $00
(1)  444/    842D : =$0                 panNone set $00
(1)  444/    842D : =$40                panRight set $40
(1)  444/    842D : =$80                panLeft set $80
(1)  444/    842D : =$C0                panCentre set $C0
(1)  444/    842D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  444/    842D : E080                        dc.b $E0,PANLEFT+$00
(1)  445/    842F : (MACRO)             	smpsAlterPitch      $18
(1)  445/    842F :  (MACRO-2)                  smpsChangeTransposition $18
(1)  445/    842F : FB18                                dc.b    $FB,$18
(1)  446/    8431 : (MACRO)             	smpsSetvoice        $01
(1)  446/    8431 :  (MACRO-2)                  smpsFMvoice $01
(1)  446/    8431 : EF01                                dc.b    $EF,$01
(1)  447/    8433 : (MACRO)             	smpsFMAlterVol      $FD
(1)  447/    8433 : E6FD                                dc.b    $E6,$FD
(1)  448/    8435 : 8006 AF0C E70C AC06 	dc.b	nRst, $06, nBb3, $0C, smpsNoAttack, $0C, nG3, $06, nRst, nRst, $3C, nF4
             843D : 8080 3CB6         
(1)  449/    8441 : 0CE7 0680 B580 B3B5 	dc.b	$0C, smpsNoAttack, $06, nRst, nE4, nRst, nD4, nE4, nRst, nD4, smpsNoAttack, nD4
             8449 : 80B3 E7B3         
(1)  450/    844D : 80B1 80AF B180 B0E7 	dc.b	nRst, nC4, nRst, nBb3, nC4, nRst, nB3, smpsNoAttack, $5A
             8455 : 5A               
(1)  451/    8456 : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  451/    8456 : F0                          dc.b    $F0
(1)  451/    8457 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  451/    845B :                             ;dc.b   $00,$00,$00
(1)  452/    845B : (MACRO)             	smpsPan             panRight, $00
(1)  452/    845B : =$0                 panNone set $00
(1)  452/    845B : =$40                panRight set $40
(1)  452/    845B : =$80                panLeft set $80
(1)  452/    845B : =$C0                panCentre set $C0
(1)  452/    845B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  452/    845B : E040                        dc.b $E0,PANRIGHT+$00
(1)  453/    845D : (MACRO)             	smpsAlterPitch      $E8
(1)  453/    845D :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  453/    845D : FBE8                                dc.b    $FB,$E8
(1)  454/    845F : (MACRO)             	smpsSetvoice        $02
(1)  454/    845F :  (MACRO-2)                  smpsFMvoice $02
(1)  454/    845F : EF02                                dc.b    $EF,$02
(1)  455/    8461 : (MACRO)             	smpsFMAlterVol      $03
(1)  455/    8461 : E603                                dc.b    $E6,$03
(1)  456/    8463 : (MACRO)             	smpsCall            Electoria_Call07
(1)  456/    8463 : F8                          dc.b    $F8
(1)  456/    8464 : C381                                dc.w    z80_ptr(ELECTORIA_CALL07)
(1)  457/    8466 : (MACRO)             	smpsPan             panLeft, $00
(1)  457/    8466 : =$0                 panNone set $00
(1)  457/    8466 : =$40                panRight set $40
(1)  457/    8466 : =$80                panLeft set $80
(1)  457/    8466 : =$C0                panCentre set $C0
(1)  457/    8466 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  457/    8466 : E080                        dc.b $E0,PANLEFT+$00
(1)  458/    8468 : (MACRO)             	smpsSetvoice        $01
(1)  458/    8468 :  (MACRO-2)                  smpsFMvoice $01
(1)  458/    8468 : EF01                                dc.b    $EF,$01
(1)  459/    846A : (MACRO)             	smpsFMAlterVol      $FD
(1)  459/    846A : E6FD                                dc.b    $E6,$FD
(1)  460/    846C : (MACRO)             	smpsAlterPitch      $0C
(1)  460/    846C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  460/    846C : FB0C                                dc.b    $FB,$0C
(1)  461/    846E : (MACRO)             	smpsModSet          $01, $01, $02, $03
(1)  461/    846E : F0                          dc.b    $F0
(1)  461/    846F : 0101 0203                           dc.b    $01,$01,$02,$03
(1)  461/    8473 :                             ;dc.b   $01,$02,$03
(1)  462/    8473 : 8006                	dc.b	nRst, $06
(1)  463/    8475 : (MACRO)             	smpsCall            Electoria_Call08
(1)  463/    8475 : F8                          dc.b    $F8
(1)  463/    8476 : EE81                                dc.w    z80_ptr(ELECTORIA_CALL08)
(1)  464/    8478 : 802A                	dc.b	nRst, $2A
(1)  465/    847A : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  465/    847A : F0                          dc.b    $F0
(1)  465/    847B : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  465/    847F :                             ;dc.b   $00,$00,$00
(1)  466/    847F : (MACRO)             	smpsAlterPitch      $F4
(1)  466/    847F :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  466/    847F : FBF4                                dc.b    $FB,$F4
(1)  467/    8481 : (MACRO)             	smpsSetvoice        $02
(1)  467/    8481 :  (MACRO-2)                  smpsFMvoice $02
(1)  467/    8481 : EF02                                dc.b    $EF,$02
(1)  468/    8483 : (MACRO)             	smpsFMAlterVol      $04
(1)  468/    8483 : E604                                dc.b    $E6,$04
(1)  469/    8485 : (MACRO)             	smpsPan             panCenter, $00
(1)  469/    8485 : =$0                 panNone set $00
(1)  469/    8485 : =$40                panRight set $40
(1)  469/    8485 : =$80                panLeft set $80
(1)  469/    8485 : =$C0                panCentre set $C0
(1)  469/    8485 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  469/    8485 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  470/    8487 : (MACRO)             	smpsAlterPitch      $F4
(1)  470/    8487 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  470/    8487 : FBF4                                dc.b    $FB,$F4
(1)  471/    8489 : (MACRO)             	smpsCall            Electoria_Call09
(1)  471/    8489 : F8                          dc.b    $F8
(1)  471/    848A : 5C82                                dc.w    z80_ptr(ELECTORIA_CALL09)
(1)  472/    848C : (MACRO)             	smpsAlterPitch      $0C
(1)  472/    848C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  472/    848C : FB0C                                dc.b    $FB,$0C
(1)  473/    848E : A412 AC4E 8060      	dc.b	nB2, $12, nG3, $4E, nRst, $60
(1)  474/    8494 : (MACRO)             	smpsAlterPitch      $F4
(1)  474/    8494 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  474/    8494 : FBF4                                dc.b    $FB,$F4
(1)  475/    8496 : (MACRO)             	smpsCall            Electoria_Call0A
(1)  475/    8496 : F8                          dc.b    $F8
(1)  475/    8497 : CB82                                dc.w    z80_ptr(ELECTORIA_CALL0A)
(1)  476/    8499 : (MACRO)             	smpsAlterPitch      $0C
(1)  476/    8499 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  476/    8499 : FB0C                                dc.b    $FB,$0C
(1)  477/    849B : B012 B34E B118 B006 	dc.b	nB3, $12, nD4, $4E, nC4, $18, nB3, $06
(1)  478/    84A3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  478/    84A3 : E60A                                dc.b    $E6,$0A
(1)  479/    84A5 : (MACRO)             	smpsPan             panRight, $00
(1)  479/    84A5 : =$0                 panNone set $00
(1)  479/    84A5 : =$40                panRight set $40
(1)  479/    84A5 : =$80                panLeft set $80
(1)  479/    84A5 : =$C0                panCentre set $C0
(1)  479/    84A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  479/    84A5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  480/    84A7 : B0                  	dc.b	nB3
(1)  481/    84A8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  481/    84A8 : E6F6                                dc.b    $E6,$F6
(1)  482/    84AA : (MACRO)             	smpsPan             panCenter, $00
(1)  482/    84AA : =$0                 panNone set $00
(1)  482/    84AA : =$40                panRight set $40
(1)  482/    84AA : =$80                panLeft set $80
(1)  482/    84AA : =$C0                panCentre set $C0
(1)  482/    84AA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  482/    84AA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  483/    84AC : AE12                	dc.b	nA3, $12
(1)  484/    84AE : (MACRO)             	smpsFMAlterVol      $0A
(1)  484/    84AE : E60A                                dc.b    $E6,$0A
(1)  485/    84B0 : (MACRO)             	smpsPan             panRight, $00
(1)  485/    84B0 : =$0                 panNone set $00
(1)  485/    84B0 : =$40                panRight set $40
(1)  485/    84B0 : =$80                panLeft set $80
(1)  485/    84B0 : =$C0                panCentre set $C0
(1)  485/    84B0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  485/    84B0 : E040                        dc.b $E0,PANRIGHT+$00
(1)  486/    84B2 : 06                  	dc.b	$06
(1)  487/    84B3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  487/    84B3 : E6F6                                dc.b    $E6,$F6
(1)  488/    84B5 : (MACRO)             	smpsPan             panCenter, $00
(1)  488/    84B5 : =$0                 panNone set $00
(1)  488/    84B5 : =$40                panRight set $40
(1)  488/    84B5 : =$80                panLeft set $80
(1)  488/    84B5 : =$C0                panCentre set $C0
(1)  488/    84B5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  488/    84B5 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  489/    84B7 : B012                	dc.b	nB3, $12
(1)  490/    84B9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  490/    84B9 : E60A                                dc.b    $E6,$0A
(1)  491/    84BB : (MACRO)             	smpsPan             panRight, $00
(1)  491/    84BB : =$0                 panNone set $00
(1)  491/    84BB : =$40                panRight set $40
(1)  491/    84BB : =$80                panLeft set $80
(1)  491/    84BB : =$C0                panCentre set $C0
(1)  491/    84BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  491/    84BB : E040                        dc.b $E0,PANRIGHT+$00
(1)  492/    84BD : 06                  	dc.b	$06
(1)  493/    84BE : (MACRO)             	smpsFMAlterVol      $F6
(1)  493/    84BE : E6F6                                dc.b    $E6,$F6
(1)  494/    84C0 : (MACRO)             	smpsPan             panCenter, $00
(1)  494/    84C0 : =$0                 panNone set $00
(1)  494/    84C0 : =$40                panRight set $40
(1)  494/    84C0 : =$80                panLeft set $80
(1)  494/    84C0 : =$C0                panCentre set $C0
(1)  494/    84C0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  494/    84C0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  495/    84C2 : B30C E760           	dc.b	nD4, $0C, smpsNoAttack, $60
(1)  496/    84C6 : (MACRO)             	smpsSetvoice        $03
(1)  496/    84C6 :  (MACRO-2)                  smpsFMvoice $03
(1)  496/    84C6 : EF03                                dc.b    $EF,$03
(1)  497/    84C8 : (MACRO)             	smpsAlterPitch      $03
(1)  497/    84C8 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  497/    84C8 : FB03                                dc.b    $FB,$03
(1)  498/    84CA :                     
(1)  499/    84CA :                     Electoria_Loop12:
(1)  500/    84CA : (MACRO)             	smpsCall            Electoria_Call04
(1)  500/    84CA : F8                          dc.b    $F8
(1)  500/    84CB : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  501/    84CD : (MACRO)             	smpsLoop            $00, $02, Electoria_Loop12
(1)  501/    84CD : F7                          dc.b    $F7
(1)  501/    84CE : 0002                        dc.b    $00,$02
(1)  501/    84D0 : CA84                                dc.w    z80_ptr(ELECTORIA_LOOP12)
(1)  502/    84D2 : (MACRO)             	smpsAlterPitch      $FF
(1)  502/    84D2 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  502/    84D2 : FBFF                                dc.b    $FB,$FF
(1)  503/    84D4 : (MACRO)             	smpsCall            Electoria_Call05
(1)  503/    84D4 : F8                          dc.b    $F8
(1)  503/    84D5 : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  504/    84D7 : (MACRO)             	smpsAlterPitch      $01
(1)  504/    84D7 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  504/    84D7 : FB01                                dc.b    $FB,$01
(1)  505/    84D9 :                     
(1)  506/    84D9 :                     Electoria_Loop13:
(1)  507/    84D9 : (MACRO)             	smpsCall            Electoria_Call04
(1)  507/    84D9 : F8                          dc.b    $F8
(1)  507/    84DA : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  508/    84DC : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop13
(1)  508/    84DC : F7                          dc.b    $F7
(1)  508/    84DD : 0004                        dc.b    $00,$04
(1)  508/    84DF : D984                                dc.w    z80_ptr(ELECTORIA_LOOP13)
(1)  509/    84E1 : (MACRO)             	smpsAlterPitch      $09
(1)  509/    84E1 :  (MACRO-2)                  smpsChangeTransposition $09
(1)  509/    84E1 : FB09                                dc.b    $FB,$09
(1)  510/    84E3 : (MACRO)             	smpsFMAlterVol      $FF
(1)  510/    84E3 : E6FF                                dc.b    $E6,$FF
(1)  511/    84E5 : (MACRO)             	smpsJump            Electoria_Jump00
(1)  511/    84E5 : F6                          dc.b    $F6
(1)  511/    84E6 : EF83                                dc.w    z80_ptr(ELECTORIA_JUMP00)
(1)  512/    84E8 :                     
(1)  513/    84E8 :                     ; FM4 Data
(1)  514/    84E8 :                     Electoria_FM4:
(1)  515/    84E8 : (MACRO)             	smpsSetvoice        $03
(1)  515/    84E8 :  (MACRO-2)                  smpsFMvoice $03
(1)  515/    84E8 : EF03                                dc.b    $EF,$03
(1)  516/    84EA : 8060                	dc.b	nRst, $60
(1)  517/    84EC : (MACRO)             	smpsAlterPitch      $F7
(1)  517/    84EC :  (MACRO-2)                  smpsChangeTransposition $F7
(1)  517/    84EC : FBF7                                dc.b    $FB,$F7
(1)  518/    84EE :                     
(1)  519/    84EE :                     Electoria_Loop0B:
(1)  520/    84EE : (MACRO)             	smpsCall            Electoria_Call04
(1)  520/    84EE : F8                          dc.b    $F8
(1)  520/    84EF : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  521/    84F1 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop0B
(1)  521/    84F1 : F7                          dc.b    $F7
(1)  521/    84F2 : 0008                        dc.b    $00,$08
(1)  521/    84F4 : EE84                                dc.w    z80_ptr(ELECTORIA_LOOP0B)
(1)  522/    84F6 : (MACRO)             	smpsAlterPitch      $09
(1)  522/    84F6 :  (MACRO-2)                  smpsChangeTransposition $09
(1)  522/    84F6 : FB09                                dc.b    $FB,$09
(1)  523/    84F8 :                     
(1)  524/    84F8 :                     Electoria_Loop0C:
(1)  525/    84F8 : (MACRO)             	smpsCall            Electoria_Call04
(1)  525/    84F8 : F8                          dc.b    $F8
(1)  525/    84F9 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  526/    84FB : (MACRO)             	smpsAlterPitch      $01
(1)  526/    84FB :  (MACRO-2)                  smpsChangeTransposition $01
(1)  526/    84FB : FB01                                dc.b    $FB,$01
(1)  527/    84FD : (MACRO)             	smpsCall            Electoria_Call04
(1)  527/    84FD : F8                          dc.b    $F8
(1)  527/    84FE : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  528/    8500 : (MACRO)             	smpsAlterPitch      $FF
(1)  528/    8500 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  528/    8500 : FBFF                                dc.b    $FB,$FF
(1)  529/    8502 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop0C
(1)  529/    8502 : F7                          dc.b    $F7
(1)  529/    8503 : 0004                        dc.b    $00,$04
(1)  529/    8505 : F884                                dc.w    z80_ptr(ELECTORIA_LOOP0C)
(1)  530/    8507 :                     
(1)  531/    8507 :                     Electoria_Loop0D:
(1)  532/    8507 : (MACRO)             	smpsAlterPitch      $FF
(1)  532/    8507 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  532/    8507 : FBFF                                dc.b    $FB,$FF
(1)  533/    8509 : (MACRO)             	smpsCall            Electoria_Call04
(1)  533/    8509 : F8                          dc.b    $F8
(1)  533/    850A : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  534/    850C : (MACRO)             	smpsAlterPitch      $02
(1)  534/    850C :  (MACRO-2)                  smpsChangeTransposition $02
(1)  534/    850C : FB02                                dc.b    $FB,$02
(1)  535/    850E : (MACRO)             	smpsCall            Electoria_Call04
(1)  535/    850E : F8                          dc.b    $F8
(1)  535/    850F : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  536/    8511 : (MACRO)             	smpsAlterPitch      $FF
(1)  536/    8511 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  536/    8511 : FBFF                                dc.b    $FB,$FF
(1)  537/    8513 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop0D
(1)  537/    8513 : F7                          dc.b    $F7
(1)  537/    8514 : 0003                        dc.b    $00,$03
(1)  537/    8516 : 0785                                dc.w    z80_ptr(ELECTORIA_LOOP0D)
(1)  538/    8518 : (MACRO)             	smpsAlterPitch      $FF
(1)  538/    8518 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  538/    8518 : FBFF                                dc.b    $FB,$FF
(1)  539/    851A : (MACRO)             	smpsCall            Electoria_Call04
(1)  539/    851A : F8                          dc.b    $F8
(1)  539/    851B : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  540/    851D : (MACRO)             	smpsAlterPitch      $01
(1)  540/    851D :  (MACRO-2)                  smpsChangeTransposition $01
(1)  540/    851D : FB01                                dc.b    $FB,$01
(1)  541/    851F : (MACRO)             	smpsCall            Electoria_Call05
(1)  541/    851F : F8                          dc.b    $F8
(1)  541/    8520 : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  542/    8522 :                     
(1)  543/    8522 :                     Electoria_Loop0E:
(1)  544/    8522 : (MACRO)             	smpsCall            Electoria_Call04
(1)  544/    8522 : F8                          dc.b    $F8
(1)  544/    8523 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  545/    8525 : (MACRO)             	smpsAlterPitch      $01
(1)  545/    8525 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  545/    8525 : FB01                                dc.b    $FB,$01
(1)  546/    8527 : (MACRO)             	smpsCall            Electoria_Call04
(1)  546/    8527 : F8                          dc.b    $F8
(1)  546/    8528 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  547/    852A : (MACRO)             	smpsAlterPitch      $FF
(1)  547/    852A :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  547/    852A : FBFF                                dc.b    $FB,$FF
(1)  548/    852C : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop0E
(1)  548/    852C : F7                          dc.b    $F7
(1)  548/    852D : 0003                        dc.b    $00,$03
(1)  548/    852F : 2285                                dc.w    z80_ptr(ELECTORIA_LOOP0E)
(1)  549/    8531 : (MACRO)             	smpsCall            Electoria_Call04
(1)  549/    8531 : F8                          dc.b    $F8
(1)  549/    8532 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  550/    8534 : 8060                	dc.b	nRst, $60
(1)  551/    8536 :                     
(1)  552/    8536 :                     Electoria_Loop0F:
(1)  553/    8536 : (MACRO)             	smpsCall            Electoria_Call04
(1)  553/    8536 : F8                          dc.b    $F8
(1)  553/    8537 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  554/    8539 : (MACRO)             	smpsAlterPitch      $01
(1)  554/    8539 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  554/    8539 : FB01                                dc.b    $FB,$01
(1)  555/    853B : (MACRO)             	smpsCall            Electoria_Call04
(1)  555/    853B : F8                          dc.b    $F8
(1)  555/    853C : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  556/    853E : (MACRO)             	smpsAlterPitch      $FF
(1)  556/    853E :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  556/    853E : FBFF                                dc.b    $FB,$FF
(1)  557/    8540 : (MACRO)             	smpsLoop            $00, $05, Electoria_Loop0F
(1)  557/    8540 : F7                          dc.b    $F7
(1)  557/    8541 : 0005                        dc.b    $00,$05
(1)  557/    8543 : 3685                                dc.w    z80_ptr(ELECTORIA_LOOP0F)
(1)  558/    8545 : (MACRO)             	smpsCall            Electoria_Call04
(1)  558/    8545 : F8                          dc.b    $F8
(1)  558/    8546 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  559/    8548 : (MACRO)             	smpsCall            Electoria_Call05
(1)  559/    8548 : F8                          dc.b    $F8
(1)  559/    8549 : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  560/    854B :                     
(1)  561/    854B :                     Electoria_Loop10:
(1)  562/    854B : (MACRO)             	smpsCall            Electoria_Call04
(1)  562/    854B : F8                          dc.b    $F8
(1)  562/    854C : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  563/    854E : (MACRO)             	smpsAlterPitch      $01
(1)  563/    854E :  (MACRO-2)                  smpsChangeTransposition $01
(1)  563/    854E : FB01                                dc.b    $FB,$01
(1)  564/    8550 : (MACRO)             	smpsCall            Electoria_Call04
(1)  564/    8550 : F8                          dc.b    $F8
(1)  564/    8551 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  565/    8553 : (MACRO)             	smpsAlterPitch      $FF
(1)  565/    8553 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  565/    8553 : FBFF                                dc.b    $FB,$FF
(1)  566/    8555 : (MACRO)             	smpsLoop            $00, $02, Electoria_Loop10
(1)  566/    8555 : F7                          dc.b    $F7
(1)  566/    8556 : 0002                        dc.b    $00,$02
(1)  566/    8558 : 4B85                                dc.w    z80_ptr(ELECTORIA_LOOP10)
(1)  567/    855A : (MACRO)             	smpsJump            Electoria_Loop0C
(1)  567/    855A : F6                          dc.b    $F6
(1)  567/    855B : F884                                dc.w    z80_ptr(ELECTORIA_LOOP0C)
(1)  568/    855D :                     
(1)  569/    855D :                     Electoria_Call05:
(1)  570/    855D : 800C B10C           	dc.b	nRst, $0C, nC4, $0C
(1)  571/    8561 : (MACRO)             	smpsFMAlterVol      $0A
(1)  571/    8561 : E60A                                dc.b    $E6,$0A
(1)  572/    8563 : (MACRO)             	smpsPan             panLeft, $00
(1)  572/    8563 : =$0                 panNone set $00
(1)  572/    8563 : =$40                panRight set $40
(1)  572/    8563 : =$80                panLeft set $80
(1)  572/    8563 : =$C0                panCentre set $C0
(1)  572/    8563 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  572/    8563 : E080                        dc.b $E0,PANLEFT+$00
(1)  573/    8565 : 06                  	dc.b	$06
(1)  574/    8566 : (MACRO)             	smpsFMAlterVol      $F6
(1)  574/    8566 : E6F6                                dc.b    $E6,$F6
(1)  575/    8568 : (MACRO)             	smpsPan             panCenter, $00
(1)  575/    8568 : =$0                 panNone set $00
(1)  575/    8568 : =$40                panRight set $40
(1)  575/    8568 : =$80                panLeft set $80
(1)  575/    8568 : =$C0                panCentre set $C0
(1)  575/    8568 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  575/    8568 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  576/    856A : 0C06 8030           	dc.b	$0C, $06, nRst, $30
(1)  577/    856E : (MACRO)             	smpsReturn
(1)  577/    856E : F9                                  dc.b    $F9
(1)  578/    856F :                     
(1)  579/    856F :                     ; FM5 Data
(1)  580/    856F :                     Electoria_FM5:
(1)  581/    856F : (MACRO)             	smpsSetvoice        $03
(1)  581/    856F :  (MACRO-2)                  smpsFMvoice $03
(1)  581/    856F : EF03                                dc.b    $EF,$03
(1)  582/    8571 : 8060                	dc.b	nRst, $60
(1)  583/    8573 :                     
(1)  584/    8573 :                     Electoria_Loop05:
(1)  585/    8573 : A060                	dc.b	nG2, $60
(1)  586/    8575 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop05
(1)  586/    8575 : F7                          dc.b    $F7
(1)  586/    8576 : 0008                        dc.b    $00,$08
(1)  586/    8578 : 7385                                dc.w    z80_ptr(ELECTORIA_LOOP05)
(1)  587/    857A : (MACRO)             	smpsAlterPitch      $FA
(1)  587/    857A :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  587/    857A : FBFA                                dc.b    $FB,$FA
(1)  588/    857C :                     
(1)  589/    857C :                     Electoria_Loop06:
(1)  590/    857C : (MACRO)             	smpsCall            Electoria_Call04
(1)  590/    857C : F8                          dc.b    $F8
(1)  590/    857D : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  591/    857F : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop06
(1)  591/    857F : F7                          dc.b    $F7
(1)  591/    8580 : 0008                        dc.b    $00,$08
(1)  591/    8582 : 7C85                                dc.w    z80_ptr(ELECTORIA_LOOP06)
(1)  592/    8584 : (MACRO)             	smpsAlterPitch      $06
(1)  592/    8584 :  (MACRO-2)                  smpsChangeTransposition $06
(1)  592/    8584 : FB06                                dc.b    $FB,$06
(1)  593/    8586 :                     
(1)  594/    8586 :                     Electoria_Loop07:
(1)  595/    8586 : (MACRO)             	smpsAlterPitch      $FC
(1)  595/    8586 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  595/    8586 : FBFC                                dc.b    $FB,$FC
(1)  596/    8588 : (MACRO)             	smpsCall            Electoria_Call04
(1)  596/    8588 : F8                          dc.b    $F8
(1)  596/    8589 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  597/    858B : (MACRO)             	smpsAlterPitch      $02
(1)  597/    858B :  (MACRO-2)                  smpsChangeTransposition $02
(1)  597/    858B : FB02                                dc.b    $FB,$02
(1)  598/    858D : (MACRO)             	smpsCall            Electoria_Call04
(1)  598/    858D : F8                          dc.b    $F8
(1)  598/    858E : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  599/    8590 : (MACRO)             	smpsAlterPitch      $02
(1)  599/    8590 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  599/    8590 : FB02                                dc.b    $FB,$02
(1)  600/    8592 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop07
(1)  600/    8592 : F7                          dc.b    $F7
(1)  600/    8593 : 0003                        dc.b    $00,$03
(1)  600/    8595 : 8685                                dc.w    z80_ptr(ELECTORIA_LOOP07)
(1)  601/    8597 : (MACRO)             	smpsAlterPitch      $FC
(1)  601/    8597 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  601/    8597 : FBFC                                dc.b    $FB,$FC
(1)  602/    8599 : (MACRO)             	smpsCall            Electoria_Call04
(1)  602/    8599 : F8                          dc.b    $F8
(1)  602/    859A : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  603/    859C : (MACRO)             	smpsAlterPitch      $01
(1)  603/    859C :  (MACRO-2)                  smpsChangeTransposition $01
(1)  603/    859C : FB01                                dc.b    $FB,$01
(1)  604/    859E : (MACRO)             	smpsCall            Electoria_Call05
(1)  604/    859E : F8                          dc.b    $F8
(1)  604/    859F : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  605/    85A1 : (MACRO)             	smpsAlterPitch      $03
(1)  605/    85A1 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  605/    85A1 : FB03                                dc.b    $FB,$03
(1)  606/    85A3 : (MACRO)             	smpsAlterPitch      $FA
(1)  606/    85A3 :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  606/    85A3 : FBFA                                dc.b    $FB,$FA
(1)  607/    85A5 :                     
(1)  608/    85A5 :                     Electoria_Loop08:
(1)  609/    85A5 : (MACRO)             	smpsCall            Electoria_Call04
(1)  609/    85A5 : F8                          dc.b    $F8
(1)  609/    85A6 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  610/    85A8 : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop08
(1)  610/    85A8 : F7                          dc.b    $F7
(1)  610/    85A9 : 0007                        dc.b    $00,$07
(1)  610/    85AB : A585                                dc.w    z80_ptr(ELECTORIA_LOOP08)
(1)  611/    85AD : 8060                	dc.b	nRst, $60
(1)  612/    85AF :                     
(1)  613/    85AF :                     Electoria_Loop09:
(1)  614/    85AF : (MACRO)             	smpsCall            Electoria_Call04
(1)  614/    85AF : F8                          dc.b    $F8
(1)  614/    85B0 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  615/    85B2 : (MACRO)             	smpsLoop            $00, $0B, Electoria_Loop09
(1)  615/    85B2 : F7                          dc.b    $F7
(1)  615/    85B3 : 000B                        dc.b    $00,$0B
(1)  615/    85B5 : AF85                                dc.w    z80_ptr(ELECTORIA_LOOP09)
(1)  616/    85B7 : (MACRO)             	smpsAlterPitch      $FF
(1)  616/    85B7 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  616/    85B7 : FBFF                                dc.b    $FB,$FF
(1)  617/    85B9 : (MACRO)             	smpsCall            Electoria_Call05
(1)  617/    85B9 : F8                          dc.b    $F8
(1)  617/    85BA : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  618/    85BC : (MACRO)             	smpsAlterPitch      $01
(1)  618/    85BC :  (MACRO-2)                  smpsChangeTransposition $01
(1)  618/    85BC : FB01                                dc.b    $FB,$01
(1)  619/    85BE :                     
(1)  620/    85BE :                     Electoria_Loop0A:
(1)  621/    85BE : (MACRO)             	smpsCall            Electoria_Call04
(1)  621/    85BE : F8                          dc.b    $F8
(1)  621/    85BF : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  622/    85C1 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop0A
(1)  622/    85C1 : F7                          dc.b    $F7
(1)  622/    85C2 : 0004                        dc.b    $00,$04
(1)  622/    85C4 : BE85                                dc.w    z80_ptr(ELECTORIA_LOOP0A)
(1)  623/    85C6 : (MACRO)             	smpsJump            Electoria_Loop06
(1)  623/    85C6 : F6                          dc.b    $F6
(1)  623/    85C7 : 7C85                                dc.w    z80_ptr(ELECTORIA_LOOP06)
(1)  624/    85C9 :                     
(1)  625/    85C9 :                     ; PSG1 Data
(1)  626/    85C9 :                     Electoria_PSG1:
(1)  627/    85C9 : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  627/    85C9 : F50C                        dc.b    $F5,STONE_0C
(1)  628/    85CB : 8060                	dc.b	nRst, $60
(1)  629/    85CD :                     
(1)  630/    85CD :                     Electoria_Loop26:
(1)  631/    85CD : (MACRO)             	smpsCall            Electoria_Call12
(1)  631/    85CD : F8                          dc.b    $F8
(1)  631/    85CE : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  632/    85D0 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop26
(1)  632/    85D0 : F7                          dc.b    $F7
(1)  632/    85D1 : 0008                        dc.b    $00,$08
(1)  632/    85D3 : CD85                                dc.w    z80_ptr(ELECTORIA_LOOP26)
(1)  633/    85D5 :                     
(1)  634/    85D5 :                     Electoria_Loop27:
(1)  635/    85D5 : (MACRO)             	smpsCall            Electoria_Call12
(1)  635/    85D5 : F8                          dc.b    $F8
(1)  635/    85D6 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  636/    85D8 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop27
(1)  636/    85D8 : F7                          dc.b    $F7
(1)  636/    85D9 : 0008                        dc.b    $00,$08
(1)  636/    85DB : D585                                dc.w    z80_ptr(ELECTORIA_LOOP27)
(1)  637/    85DD :                     
(1)  638/    85DD :                     Electoria_Loop28:
(1)  639/    85DD : (MACRO)             	smpsAlterPitch      $FC
(1)  639/    85DD :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  639/    85DD : FBFC                                dc.b    $FB,$FC
(1)  640/    85DF : (MACRO)             	smpsCall            Electoria_Call12
(1)  640/    85DF : F8                          dc.b    $F8
(1)  640/    85E0 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  641/    85E2 : (MACRO)             	smpsAlterPitch      $04
(1)  641/    85E2 :  (MACRO-2)                  smpsChangeTransposition $04
(1)  641/    85E2 : FB04                                dc.b    $FB,$04
(1)  642/    85E4 : 9C06 9CA8 A29C A8A2 	dc.b	nEb2, $06, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2
             85EC : 9CA8 A29C         
(1)  643/    85F0 : A8A2 9CA8 A2        	dc.b	nEb3, nA2, nEb2, nEb3, nA2
(1)  644/    85F5 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop28
(1)  644/    85F5 : F7                          dc.b    $F7
(1)  644/    85F6 : 0003                        dc.b    $00,$03
(1)  644/    85F8 : DD85                                dc.w    z80_ptr(ELECTORIA_LOOP28)
(1)  645/    85FA : (MACRO)             	smpsAlterPitch      $FC
(1)  645/    85FA :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  645/    85FA : FBFC                                dc.b    $FB,$FC
(1)  646/    85FC : (MACRO)             	smpsCall            Electoria_Call12
(1)  646/    85FC : F8                          dc.b    $F8
(1)  646/    85FD : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  647/    85FF : (MACRO)             	smpsAlterPitch      $04
(1)  647/    85FF :  (MACRO-2)                  smpsChangeTransposition $04
(1)  647/    85FF : FB04                                dc.b    $FB,$04
(1)  648/    8601 : 9C06 9CA8 A29C A8A2 	dc.b	nEb2, $06, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2, nRst, $30
             8609 : 9C80 30            
(1)  649/    860C :                     
(1)  650/    860C :                     Electoria_Loop29:
(1)  651/    860C : (MACRO)             	smpsCall            Electoria_Call12
(1)  651/    860C : F8                          dc.b    $F8
(1)  651/    860D : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  652/    860F : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop29
(1)  652/    860F : F7                          dc.b    $F7
(1)  652/    8610 : 0007                        dc.b    $00,$07
(1)  652/    8612 : 0C86                                dc.w    z80_ptr(ELECTORIA_LOOP29)
(1)  653/    8614 : 8060                	dc.b	nRst, $60
(1)  654/    8616 :                     
(1)  655/    8616 :                     Electoria_Loop2A:
(1)  656/    8616 : (MACRO)             	smpsCall            Electoria_Call12
(1)  656/    8616 : F8                          dc.b    $F8
(1)  656/    8617 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  657/    8619 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop2A
(1)  657/    8619 : F7                          dc.b    $F7
(1)  657/    861A : 0008                        dc.b    $00,$08
(1)  657/    861C : 1686                                dc.w    z80_ptr(ELECTORIA_LOOP2A)
(1)  658/    861E :                     
(1)  659/    861E :                     Electoria_Loop2B:
(1)  660/    861E : (MACRO)             	smpsCall            Electoria_Call12
(1)  660/    861E : F8                          dc.b    $F8
(1)  660/    861F : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  661/    8621 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop2B
(1)  661/    8621 : F7                          dc.b    $F7
(1)  661/    8622 : 0003                        dc.b    $00,$03
(1)  661/    8624 : 1E86                                dc.w    z80_ptr(ELECTORIA_LOOP2B)
(1)  662/    8626 : A006 A0AC A7A0 ACA7 	dc.b	nG2, $06, nG2, nG3, nD3, nG2, nG3, nD3, nG2, nRst, $30
             862E : A080 30            
(1)  663/    8631 :                     
(1)  664/    8631 :                     Electoria_Loop2C:
(1)  665/    8631 : (MACRO)             	smpsCall            Electoria_Call12
(1)  665/    8631 : F8                          dc.b    $F8
(1)  665/    8632 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  666/    8634 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop2C
(1)  666/    8634 : F7                          dc.b    $F7
(1)  666/    8635 : 0004                        dc.b    $00,$04
(1)  666/    8637 : 3186                                dc.w    z80_ptr(ELECTORIA_LOOP2C)
(1)  667/    8639 : (MACRO)             	smpsJump            Electoria_Loop27
(1)  667/    8639 : F6                          dc.b    $F6
(1)  667/    863A : D585                                dc.w    z80_ptr(ELECTORIA_LOOP27)
(1)  668/    863C :                     
(1)  669/    863C :                     Electoria_Call12:
(1)  670/    863C : A006 A0AC A7A0 ACA7 	dc.b	nG2, $06, nG2, nG3, nD3, nG2, nG3, nD3, nG2, nG3, nD3, nG2
             8644 : A0AC A7A0         
(1)  671/    8648 : ACA7 A0AC A7        	dc.b	nG3, nD3, nG2, nG3, nD3
(1)  672/    864D : (MACRO)             	smpsReturn
(1)  672/    864D : F9                                  dc.b    $F9
(1)  673/    864E :                     
(1)  674/    864E :                     ; PSG2 Data
(1)  675/    864E :                     Electoria_PSG2:
(1)  676/    864E : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  676/    864E : F50C                        dc.b    $F5,STONE_0C
(1)  677/    8650 : 8060                	dc.b	nRst, $60
(1)  678/    8652 : (MACRO)             	smpsAlterPitch      $0C
(1)  678/    8652 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  678/    8652 : FB0C                                dc.b    $FB,$0C
(1)  679/    8654 :                     
(1)  680/    8654 :                     Electoria_Loop20:
(1)  681/    8654 : (MACRO)             	smpsCall            Electoria_Call0E
(1)  681/    8654 : F8                          dc.b    $F8
(1)  681/    8655 : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  682/    8657 : (MACRO)             	smpsCall            Electoria_Call0F
(1)  682/    8657 : F8                          dc.b    $F8
(1)  682/    8658 : CC86                                dc.w    z80_ptr(ELECTORIA_CALL0F)
(1)  683/    865A : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop20
(1)  683/    865A : F7                          dc.b    $F7
(1)  683/    865B : 0004                        dc.b    $00,$04
(1)  683/    865D : 5486                                dc.w    z80_ptr(ELECTORIA_LOOP20)
(1)  684/    865F : (MACRO)             	smpsAlterPitch      $F4
(1)  684/    865F :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  684/    865F : FBF4                                dc.b    $FB,$F4
(1)  685/    8661 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  685/    8661 : ECFF                        dc.b    $EC,$FF
(1)  686/    8663 :                     
(1)  687/    8663 :                     Electoria_Loop21:
(1)  688/    8663 : (MACRO)             	smpsPSGvoice        sTone_03
(1)  688/    8663 : F503                        dc.b    $F5,STONE_03
(1)  689/    8665 : (MACRO)             	smpsCall            Electoria_Call10
(1)  689/    8665 : F8                          dc.b    $F8
(1)  689/    8666 : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  690/    8668 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop21
(1)  690/    8668 : F7                          dc.b    $F7
(1)  690/    8669 : 0008                        dc.b    $00,$08
(1)  690/    866B : 6386                                dc.w    z80_ptr(ELECTORIA_LOOP21)
(1)  691/    866D : (MACRO)             	smpsAlterPitch      $03
(1)  691/    866D :  (MACRO-2)                  smpsChangeTransposition $03
(1)  691/    866D : FB03                                dc.b    $FB,$03
(1)  692/    866F :                     
(1)  693/    866F :                     Electoria_Loop22:
(1)  694/    866F : (MACRO)             	smpsCall            Electoria_Call10
(1)  694/    866F : F8                          dc.b    $F8
(1)  694/    8670 : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  695/    8672 : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop22
(1)  695/    8672 : F7                          dc.b    $F7
(1)  695/    8673 : 0007                        dc.b    $00,$07
(1)  695/    8675 : 6F86                                dc.w    z80_ptr(ELECTORIA_LOOP22)
(1)  696/    8677 : (MACRO)             	smpsAlterPitch      $FD
(1)  696/    8677 :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  696/    8677 : FBFD                                dc.b    $FB,$FD
(1)  697/    8679 : (MACRO)             	smpsCall            Electoria_Call11
(1)  697/    8679 : F8                          dc.b    $F8
(1)  697/    867A : F286                                dc.w    z80_ptr(ELECTORIA_CALL11)
(1)  698/    867C :                     
(1)  699/    867C :                     Electoria_Loop23:
(1)  700/    867C : (MACRO)             	smpsCall            Electoria_Call10
(1)  700/    867C : F8                          dc.b    $F8
(1)  700/    867D : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  701/    867F : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop23
(1)  701/    867F : F7                          dc.b    $F7
(1)  701/    8680 : 0007                        dc.b    $00,$07
(1)  701/    8682 : 7C86                                dc.w    z80_ptr(ELECTORIA_LOOP23)
(1)  702/    8684 : 8060                	dc.b	nRst, $60
(1)  703/    8686 :                     
(1)  704/    8686 :                     Electoria_Loop24:
(1)  705/    8686 : (MACRO)             	smpsCall            Electoria_Call10
(1)  705/    8686 : F8                          dc.b    $F8
(1)  705/    8687 : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  706/    8689 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop24
(1)  706/    8689 : F7                          dc.b    $F7
(1)  706/    868A : 0008                        dc.b    $00,$08
(1)  706/    868C : 8686                                dc.w    z80_ptr(ELECTORIA_LOOP24)
(1)  707/    868E : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  707/    868E : F50C                        dc.b    $F5,STONE_0C
(1)  708/    8690 : (MACRO)             	smpsAlterPitch      $0C
(1)  708/    8690 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  708/    8690 : FB0C                                dc.b    $FB,$0C
(1)  709/    8692 : (MACRO)             	smpsPSGAlterVol     $01
(1)  709/    8692 : EC01                        dc.b    $EC,$01
(1)  710/    8694 : (MACRO)             	smpsCall            Electoria_Call0E
(1)  710/    8694 : F8                          dc.b    $F8
(1)  710/    8695 : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  711/    8697 : (MACRO)             	smpsCall            Electoria_Call0F
(1)  711/    8697 : F8                          dc.b    $F8
(1)  711/    8698 : CC86                                dc.w    z80_ptr(ELECTORIA_CALL0F)
(1)  712/    869A : (MACRO)             	smpsCall            Electoria_Call0E
(1)  712/    869A : F8                          dc.b    $F8
(1)  712/    869B : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  713/    869D : AA06 AC80 B180 80AA 	dc.b	nF3, $06, nG3, nRst, nC4, nRst, nRst, nF3, nG3, nRst, $30
             86A5 : AC80 30            
(1)  714/    86A8 :                     
(1)  715/    86A8 :                     Electoria_Loop25:
(1)  716/    86A8 : (MACRO)             	smpsCall            Electoria_Call0E
(1)  716/    86A8 : F8                          dc.b    $F8
(1)  716/    86A9 : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  717/    86AB : (MACRO)             	smpsCall            Electoria_Call0F
(1)  717/    86AB : F8                          dc.b    $F8
(1)  717/    86AC : CC86                                dc.w    z80_ptr(ELECTORIA_CALL0F)
(1)  718/    86AE : (MACRO)             	smpsLoop            $00, $02, Electoria_Loop25
(1)  718/    86AE : F7                          dc.b    $F7
(1)  718/    86AF : 0002                        dc.b    $00,$02
(1)  718/    86B1 : A886                                dc.w    z80_ptr(ELECTORIA_LOOP25)
(1)  719/    86B3 : (MACRO)             	smpsAlterPitch      $F4
(1)  719/    86B3 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  719/    86B3 : FBF4                                dc.b    $FB,$F4
(1)  720/    86B5 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  720/    86B5 : ECFF                        dc.b    $EC,$FF
(1)  721/    86B7 : (MACRO)             	smpsJump            Electoria_Loop21
(1)  721/    86B7 : F6                          dc.b    $F6
(1)  721/    86B8 : 6386                                dc.w    z80_ptr(ELECTORIA_LOOP21)
(1)  722/    86BA :                     
(1)  723/    86BA :                     Electoria_Call0E:
(1)  724/    86BA : AA06 AC80 B080 80AA 	dc.b	nF3, $06, nG3, nRst, nB3, nRst, nRst, nF3, nG3, nRst, nB3, nRst
             86C2 : AC80 B080         
(1)  725/    86C6 : AAAC 80B0 80        	dc.b	nF3, nG3, nRst, nB3, nRst
(1)  726/    86CB : (MACRO)             	smpsReturn
(1)  726/    86CB : F9                                  dc.b    $F9
(1)  727/    86CC :                     
(1)  728/    86CC :                     Electoria_Call0F:
(1)  729/    86CC : AA06 AC80 B180 80AA 	dc.b	nF3, $06, nG3, nRst, nC4, nRst, nRst, nF3, nG3, nRst, nC4, nRst
             86D4 : AC80 B180         
(1)  730/    86D8 : AAAC 80B1 80        	dc.b	nF3, nG3, nRst, nC4, nRst
(1)  731/    86DD : (MACRO)             	smpsReturn
(1)  731/    86DD : F9                                  dc.b    $F9
(1)  732/    86DE :                     
(1)  733/    86DE :                     Electoria_Call10:
(1)  734/    86DE : 800C A780 06A7 0C80 	dc.b	nRst, $0C, nD3, nRst, $06, nD3, $0C, nRst, $06, nD3, $0C, nRst
             86E6 : 06A7 0C80         
(1)  735/    86EA : 06A7 0C80 06A7 0C   	dc.b	$06, nD3, $0C, nRst, $06, nD3, $0C
(1)  736/    86F1 : (MACRO)             	smpsReturn
(1)  736/    86F1 : F9                                  dc.b    $F9
(1)  737/    86F2 :                     
(1)  738/    86F2 :                     Electoria_Call11:
(1)  739/    86F2 : 800C AA80 06AA 0C06 	dc.b	nRst, $0C, nF3, nRst, $06, nF3, $0C, $06, nRst, $30
             86FA : 8030               
(1)  740/    86FC : (MACRO)             	smpsReturn
(1)  740/    86FC : F9                                  dc.b    $F9
(1)  741/    86FD :                     
(1)  742/    86FD :                     ; PSG3 Data
(1)  743/    86FD :                     Electoria_PSG3:
(1)  744/    86FD : (MACRO)             	smpsPSGform         $E7
(1)  744/    86FD : F3E7                        dc.b    $F3,$E7
(1)  745/    86FF :                     
(1)  746/    86FF :                     Electoria_Loop1C:
(1)  747/    86FF : (MACRO)             	smpsCall            Electoria_Call0C
(1)  747/    86FF : F8                          dc.b    $F8
(1)  747/    8700 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  748/    8702 : (MACRO)             	smpsLoop            $01, $09, Electoria_Loop1C
(1)  748/    8702 : F7                          dc.b    $F7
(1)  748/    8703 : 0109                        dc.b    $01,$09
(1)  748/    8705 : FF86                                dc.w    z80_ptr(ELECTORIA_LOOP1C)
(1)  749/    8707 :                     
(1)  750/    8707 :                     Electoria_Loop1D:
(1)  751/    8707 : (MACRO)             	smpsCall            Electoria_Call0C
(1)  751/    8707 : F8                          dc.b    $F8
(1)  751/    8708 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  752/    870A : (MACRO)             	smpsLoop            $01, $0F, Electoria_Loop1D
(1)  752/    870A : F7                          dc.b    $F7
(1)  752/    870B : 010F                        dc.b    $01,$0F
(1)  752/    870D : 0787                                dc.w    z80_ptr(ELECTORIA_LOOP1D)
(1)  753/    870F : (MACRO)             	smpsCall            Electoria_Call0D
(1)  753/    870F : F8                          dc.b    $F8
(1)  753/    8710 : 3587                                dc.w    z80_ptr(ELECTORIA_CALL0D)
(1)  754/    8712 :                     
(1)  755/    8712 :                     Electoria_Loop1E:
(1)  756/    8712 : (MACRO)             	smpsCall            Electoria_Call0C
(1)  756/    8712 : F8                          dc.b    $F8
(1)  756/    8713 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  757/    8715 : (MACRO)             	smpsLoop            $01, $13, Electoria_Loop1E
(1)  757/    8715 : F7                          dc.b    $F7
(1)  757/    8716 : 0113                        dc.b    $01,$13
(1)  757/    8718 : 1287                                dc.w    z80_ptr(ELECTORIA_LOOP1E)
(1)  758/    871A : (MACRO)             	smpsCall            Electoria_Call0D
(1)  758/    871A : F8                          dc.b    $F8
(1)  758/    871B : 3587                                dc.w    z80_ptr(ELECTORIA_CALL0D)
(1)  759/    871D :                     
(1)  760/    871D :                     Electoria_Loop1F:
(1)  761/    871D : (MACRO)             	smpsCall            Electoria_Call0C
(1)  761/    871D : F8                          dc.b    $F8
(1)  761/    871E : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  762/    8720 : (MACRO)             	smpsLoop            $01, $04, Electoria_Loop1F
(1)  762/    8720 : F7                          dc.b    $F7
(1)  762/    8721 : 0104                        dc.b    $01,$04
(1)  762/    8723 : 1D87                                dc.w    z80_ptr(ELECTORIA_LOOP1F)
(1)  763/    8725 : (MACRO)             	smpsJump            Electoria_Loop1D
(1)  763/    8725 : F6                          dc.b    $F6
(1)  763/    8726 : 0787                                dc.w    z80_ptr(ELECTORIA_LOOP1D)
(1)  764/    8728 :                     
(1)  765/    8728 :                     Electoria_Call0C:
(1)  766/    8728 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  766/    8728 : F502                        dc.b    $F5,STONE_02
(1)  767/    872A : B10C                	dc.b	(nMaxPSG2-$23)&$FF, $0C
(1)  768/    872C : (MACRO)             	smpsPSGvoice        sTone_05
(1)  768/    872C : F505                        dc.b    $F5,STONE_05
(1)  769/    872E : B1                  	dc.b	(nMaxPSG2-$23)&$FF
(1)  770/    872F : (MACRO)             	smpsLoop            $00, $04, Electoria_Call0C
(1)  770/    872F : F7                          dc.b    $F7
(1)  770/    8730 : 0004                        dc.b    $00,$04
(1)  770/    8732 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  771/    8734 : (MACRO)             	smpsReturn
(1)  771/    8734 : F9                                  dc.b    $F9
(1)  772/    8735 :                     
(1)  773/    8735 :                     Electoria_Call0D:
(1)  774/    8735 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  774/    8735 : F502                        dc.b    $F5,STONE_02
(1)  775/    8737 : B10C                	dc.b	(nMaxPSG2-$23)&$FF, $0C
(1)  776/    8739 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  776/    8739 : F505                        dc.b    $F5,STONE_05
(1)  777/    873B : 0C                  	dc.b	$0C
(1)  778/    873C : (MACRO)             	smpsPSGvoice        sTone_02
(1)  778/    873C : F502                        dc.b    $F5,STONE_02
(1)  779/    873E : 0C                  	dc.b	$0C
(1)  780/    873F : (MACRO)             	smpsPSGvoice        sTone_05
(1)  780/    873F : F505                        dc.b    $F5,STONE_05
(1)  781/    8741 : 06                  	dc.b	$06
(1)  782/    8742 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  782/    8742 : F502                        dc.b    $F5,STONE_02
(1)  783/    8744 : 0680 30             	dc.b	$06, nRst, $30
(1)  784/    8747 : (MACRO)             	smpsReturn
(1)  784/    8747 : F9                                  dc.b    $F9
(1)  785/    8748 :                     
(1)  786/    8748 :                     ; DAC Data
(1)  787/    8748 :                     Electoria_DAC:
(1)  788/    8748 : 8206 8082 8280 8282 	dc.b	dHighTom, $06, nRst, dHighTom, dHighTom, nRst, dHighTom, dHighTom, dSnareS3, dHighTom, dMidTomS3, dLowTomS3
             8750 : 8182 8384         
(1)  789/    8754 : 8282 8485 82        	dc.b	dHighTom, dHighTom, dLowTomS3, dFloorTomS3, dHighTom
(1)  790/    8759 :                     
(1)  791/    8759 :                     Electoria_Loop00:
(1)  792/    8759 : (MACRO)             	smpsCall            Electoria_Call00
(1)  792/    8759 : F8                          dc.b    $F8
(1)  792/    875A : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  793/    875C : (MACRO)             	smpsCall            Electoria_Call01
(1)  793/    875C : F8                          dc.b    $F8
(1)  793/    875D : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  794/    875F : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop00
(1)  794/    875F : F7                          dc.b    $F7
(1)  794/    8760 : 0003                        dc.b    $00,$03
(1)  794/    8762 : 5987                                dc.w    z80_ptr(ELECTORIA_LOOP00)
(1)  795/    8764 : (MACRO)             	smpsCall            Electoria_Call00
(1)  795/    8764 : F8                          dc.b    $F8
(1)  795/    8765 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  796/    8767 : (MACRO)             	smpsCall            Electoria_Call02
(1)  796/    8767 : F8                          dc.b    $F8
(1)  796/    8768 : F587                                dc.w    z80_ptr(ELECTORIA_CALL02)
(1)  797/    876A :                     
(1)  798/    876A :                     Electoria_Loop01:
(1)  799/    876A : (MACRO)             	smpsCall            Electoria_Call00
(1)  799/    876A : F8                          dc.b    $F8
(1)  799/    876B : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  800/    876D : (MACRO)             	smpsCall            Electoria_Call01
(1)  800/    876D : F8                          dc.b    $F8
(1)  800/    876E : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  801/    8770 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop01
(1)  801/    8770 : F7                          dc.b    $F7
(1)  801/    8771 : 0003                        dc.b    $00,$03
(1)  801/    8773 : 6A87                                dc.w    z80_ptr(ELECTORIA_LOOP01)
(1)  802/    8775 : (MACRO)             	smpsCall            Electoria_Call00
(1)  802/    8775 : F8                          dc.b    $F8
(1)  802/    8776 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  803/    8778 : (MACRO)             	smpsCall            Electoria_Call03
(1)  803/    8778 : F8                          dc.b    $F8
(1)  803/    8779 : 0288                                dc.w    z80_ptr(ELECTORIA_CALL03)
(1)  804/    877B :                     
(1)  805/    877B :                     Electoria_Loop02:
(1)  806/    877B : (MACRO)             	smpsCall            Electoria_Call00
(1)  806/    877B : F8                          dc.b    $F8
(1)  806/    877C : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  807/    877E : (MACRO)             	smpsCall            Electoria_Call01
(1)  807/    877E : F8                          dc.b    $F8
(1)  807/    877F : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  808/    8781 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop02
(1)  808/    8781 : F7                          dc.b    $F7
(1)  808/    8782 : 0003                        dc.b    $00,$03
(1)  808/    8784 : 7B87                                dc.w    z80_ptr(ELECTORIA_LOOP02)
(1)  809/    8786 : (MACRO)             	smpsCall            Electoria_Call00
(1)  809/    8786 : F8                          dc.b    $F8
(1)  809/    8787 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  810/    8789 : 8204 8282 8206 8282 	dc.b	dHighTom, $04, dHighTom, dHighTom, dHighTom, $06, dHighTom, dHighTom, dHighTom, dHighTom, dHighTom, nRst
             8791 : 8282 8280         
(1)  811/    8795 : 30                  	dc.b	$30
(1)  812/    8796 :                     
(1)  813/    8796 :                     Electoria_Loop03:
(1)  814/    8796 : (MACRO)             	smpsCall            Electoria_Call00
(1)  814/    8796 : F8                          dc.b    $F8
(1)  814/    8797 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  815/    8799 : (MACRO)             	smpsCall            Electoria_Call01
(1)  815/    8799 : F8                          dc.b    $F8
(1)  815/    879A : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  816/    879C : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop03
(1)  816/    879C : F7                          dc.b    $F7
(1)  816/    879D : 0003                        dc.b    $00,$03
(1)  816/    879F : 9687                                dc.w    z80_ptr(ELECTORIA_LOOP03)
(1)  817/    87A1 : (MACRO)             	smpsCall            Electoria_Call00
(1)  817/    87A1 : F8                          dc.b    $F8
(1)  817/    87A2 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  818/    87A4 : (MACRO)             	smpsCall            Electoria_Call02
(1)  818/    87A4 : F8                          dc.b    $F8
(1)  818/    87A5 : F587                                dc.w    z80_ptr(ELECTORIA_CALL02)
(1)  819/    87A7 :                     
(1)  820/    87A7 :                     Electoria_Loop04:
(1)  821/    87A7 : (MACRO)             	smpsCall            Electoria_Call00
(1)  821/    87A7 : F8                          dc.b    $F8
(1)  821/    87A8 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  822/    87AA : (MACRO)             	smpsCall            Electoria_Call01
(1)  822/    87AA : F8                          dc.b    $F8
(1)  822/    87AB : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  823/    87AD : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop04
(1)  823/    87AD : F7                          dc.b    $F7
(1)  823/    87AE : 0003                        dc.b    $00,$03
(1)  823/    87B0 : A787                                dc.w    z80_ptr(ELECTORIA_LOOP04)
(1)  824/    87B2 : (MACRO)             	smpsCall            Electoria_Call00
(1)  824/    87B2 : F8                          dc.b    $F8
(1)  824/    87B3 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  825/    87B5 : (MACRO)             	smpsCall            Electoria_Call03
(1)  825/    87B5 : F8                          dc.b    $F8
(1)  825/    87B6 : 0288                                dc.w    z80_ptr(ELECTORIA_CALL03)
(1)  826/    87B8 : (MACRO)             	smpsCall            Electoria_Call00
(1)  826/    87B8 : F8                          dc.b    $F8
(1)  826/    87B9 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  827/    87BB : (MACRO)             	smpsCall            Electoria_Call01
(1)  827/    87BB : F8                          dc.b    $F8
(1)  827/    87BC : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  828/    87BE : (MACRO)             	smpsCall            Electoria_Call00
(1)  828/    87BE : F8                          dc.b    $F8
(1)  828/    87BF : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  829/    87C1 : 8106 8212 8281 0680 	dc.b	dSnareS3, $06, dHighTom, $12, dHighTom, dSnareS3, $06, nRst, $30
             87C9 : 30               
(1)  830/    87CA : (MACRO)             	smpsCall            Electoria_Call00
(1)  830/    87CA : F8                          dc.b    $F8
(1)  830/    87CB : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  831/    87CD : (MACRO)             	smpsCall            Electoria_Call01
(1)  831/    87CD : F8                          dc.b    $F8
(1)  831/    87CE : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  832/    87D0 : (MACRO)             	smpsCall            Electoria_Call00
(1)  832/    87D0 : F8                          dc.b    $F8
(1)  832/    87D1 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  833/    87D3 : (MACRO)             	smpsCall            Electoria_Call02
(1)  833/    87D3 : F8                          dc.b    $F8
(1)  833/    87D4 : F587                                dc.w    z80_ptr(ELECTORIA_CALL02)
(1)  834/    87D6 : (MACRO)             	smpsJump            Electoria_Loop01
(1)  834/    87D6 : F6                          dc.b    $F6
(1)  834/    87D7 : 6A87                                dc.w    z80_ptr(ELECTORIA_LOOP01)
(1)  835/    87D9 :                     
(1)  836/    87D9 :                     Electoria_Call00:
(1)  837/    87D9 : 810C 8182 8006 8280 	dc.b	dSnareS3, $0C, dSnareS3, dHighTom, nRst, $06, dHighTom, nRst, dHighTom, dSnareS3, nRst, dHighTom
             87E1 : 8281 8082         
(1)  838/    87E5 : 18                  	dc.b	$18
(1)  839/    87E6 : (MACRO)             	smpsReturn
(1)  839/    87E6 : F9                                  dc.b    $F9
(1)  840/    87E7 :                     
(1)  841/    87E7 :                     Electoria_Call01:
(1)  842/    87E7 : 8106 8212 8281 0680 	dc.b	dSnareS3, $06, dHighTom, $12, dHighTom, dSnareS3, $06, nRst, dHighTom, dSnareS3, nRst, dHighTom
             87EF : 8281 8082         
(1)  843/    87F3 : 18                  	dc.b	$18
(1)  844/    87F4 : (MACRO)             	smpsReturn
(1)  844/    87F4 : F9                                  dc.b    $F9
(1)  845/    87F5 :                     
(1)  846/    87F5 :                     Electoria_Call02:
(1)  847/    87F5 : 840C 0C0C 0606 8084 	dc.b	dLowTomS3, $0C, $0C, $0C, $06, $06, nRst, dLowTomS3, dLowTomS3, $0C, dLowTomS3, dLowTomS3
             87FD : 840C 8484         
(1)  848/    8801 : (MACRO)             	smpsReturn
(1)  848/    8801 : F9                                  dc.b    $F9
(1)  849/    8802 :                     
(1)  850/    8802 :                     Electoria_Call03:
(1)  851/    8802 : 8006 8212 8218 8006 	dc.b	nRst, $06, dHighTom, $12, dHighTom, $18, nRst, $06, dHighTom, $12, dHighTom, $18
             880A : 8212 8218         
(1)  852/    880E : (MACRO)             	smpsReturn
(1)  852/    880E : F9                                  dc.b    $F9
(1)  853/    880F :                     
(1)  854/    880F :                     Electoria_Voices:
(1)  855/    880F :                     ;	Voice $00
(1)  856/    880F :                     ;	$3B
(1)  857/    880F :                     ;	$12, $11, $13, $01, 	$1F, $1F, $1F, $1E, 	$02, $0C, $13, $07
(1)  858/    880F :                     ;	$12, $0A, $05, $07, 	$0F, $3F, $5F, $3F, 	$16, $10, $15, $80
(1)  859/    880F : (MACRO)             	smpsVcAlgorithm     $03
(1)  859/    880F : =$3                 vcAlgorithm set $03
(1)  860/    880F : (MACRO)             	smpsVcFeedback      $07
(1)  860/    880F : =$7                 vcFeedback set $07
(1)  861/    880F : (MACRO)             	smpsVcUnusedBits    $00
(1)  861/    880F : =$0                 vcUnusedBits set $00
(1)  861/    880F : =$0                 vcD1R1Unk set 0
(1)  861/    880F : =$0                 vcD1R2Unk set 0
(1)  861/    880F : =$0                 vcD1R3Unk set 0
(1)  861/    880F : =$0                 vcD1R4Unk set 0
(1)  862/    880F : (MACRO)             	smpsVcDetune        $00, $01, $01, $01
(1)  862/    880F : =$0                 vcDT1 set $00
(1)  862/    880F : =$1                 vcDT2 set $01
(1)  862/    880F : =$1                 vcDT3 set $01
(1)  862/    880F : =$1                 vcDT4 set $01
(1)  863/    880F : (MACRO)             	smpsVcCoarseFreq    $01, $03, $01, $02
(1)  863/    880F : =$1                 vcCF1 set $01
(1)  863/    880F : =$3                 vcCF2 set $03
(1)  863/    880F : =$1                 vcCF3 set $01
(1)  863/    880F : =$2                 vcCF4 set $02
(1)  864/    880F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  864/    880F : =$0                 vcRS1 set $00
(1)  864/    880F : =$0                 vcRS2 set $00
(1)  864/    880F : =$0                 vcRS3 set $00
(1)  864/    880F : =$0                 vcRS4 set $00
(1)  865/    880F : (MACRO)             	smpsVcAttackRate    $1E, $1F, $1F, $1F
(1)  865/    880F : =$1E                vcAR1 set $1E
(1)  865/    880F : =$1F                vcAR2 set $1F
(1)  865/    880F : =$1F                vcAR3 set $1F
(1)  865/    880F : =$1F                vcAR4 set $1F
(1)  866/    880F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  866/    880F : =$0                 vcAM1 set $00<<5
(1)  866/    880F : =$0                 vcAM2 set $00<<5
(1)  866/    880F : =$0                 vcAM3 set $00<<5
(1)  866/    880F : =$0                 vcAM4 set $00<<5
(1)  867/    880F : (MACRO)             	smpsVcDecayRate1    $07, $13, $0C, $02
(1)  867/    880F : =$7                 vcD1R1 set $07
(1)  867/    880F : =$13                vcD1R2 set $13
(1)  867/    880F : =$C                 vcD1R3 set $0C
(1)  867/    880F : =$2                 vcD1R4 set $02
(1)  868/    880F : (MACRO)             	smpsVcDecayRate2    $07, $05, $0A, $12
(1)  868/    880F : =$7                 vcD2R1 set $07
(1)  868/    880F : =$5                 vcD2R2 set $05
(1)  868/    880F : =$A                 vcD2R3 set $0A
(1)  868/    880F : =$12                vcD2R4 set $12
(1)  869/    880F : (MACRO)             	smpsVcDecayLevel    $03, $05, $03, $00
(1)  869/    880F : =$3                 vcDL1 set $03
(1)  869/    880F : =$5                 vcDL2 set $05
(1)  869/    880F : =$3                 vcDL3 set $03
(1)  869/    880F : =$0                 vcDL4 set $00
(1)  870/    880F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  870/    880F : =$F                 vcRR1 set $0F
(1)  870/    880F : =$F                 vcRR2 set $0F
(1)  870/    880F : =$F                 vcRR3 set $0F
(1)  870/    880F : =$F                 vcRR4 set $0F
(1)  871/    880F : (MACRO)             	smpsVcTotalLevel    $00, $15, $10, $16
(1)  871/    880F : =$0                 vcTL1 set $00
(1)  871/    880F : =$15                vcTL2 set $15
(1)  871/    880F : =$10                vcTL3 set $10
(1)  871/    880F : =$16                vcTL4 set $16
(1)  871/    880F : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  871/    8810 :                     ;   0     1     2     3     4     5     6     7
(1)  871/    8810 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  871/    8810 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  871/    8810 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  871/    8810 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  871/    8810 : =$80                vcTLMask1 set $80
(1)  871/    8810 :                     
(1)  871/    8810 :                     
(1)  871/    8810 : 1211 1301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  871/    8814 : 1F1F 1F1E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  871/    8818 : 020C 1307                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  871/    881C : 120A 0507                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  871/    8820 : 0F3F 5F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  871/    8824 : 1610 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  872/    8828 :                     
(1)  873/    8828 :                     ;	Voice $01
(1)  874/    8828 :                     ;	$3C
(1)  875/    8828 :                     ;	$01, $02, $0F, $04, 	$8D, $52, $9F, $1F, 	$09, $00, $00, $0D
(1)  876/    8828 :                     ;	$00, $00, $00, $00, 	$2F, $0F, $0F, $FF, 	$17, $86, $1F, $86
(1)  877/    8828 : (MACRO)             	smpsVcAlgorithm     $04
(1)  877/    8828 : =$4                 vcAlgorithm set $04
(1)  878/    8828 : (MACRO)             	smpsVcFeedback      $07
(1)  878/    8828 : =$7                 vcFeedback set $07
(1)  879/    8828 : (MACRO)             	smpsVcUnusedBits    $00
(1)  879/    8828 : =$0                 vcUnusedBits set $00
(1)  879/    8828 : =$0                 vcD1R1Unk set 0
(1)  879/    8828 : =$0                 vcD1R2Unk set 0
(1)  879/    8828 : =$0                 vcD1R3Unk set 0
(1)  879/    8828 : =$0                 vcD1R4Unk set 0
(1)  880/    8828 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  880/    8828 : =$0                 vcDT1 set $00
(1)  880/    8828 : =$0                 vcDT2 set $00
(1)  880/    8828 : =$0                 vcDT3 set $00
(1)  880/    8828 : =$0                 vcDT4 set $00
(1)  881/    8828 : (MACRO)             	smpsVcCoarseFreq    $04, $0F, $02, $01
(1)  881/    8828 : =$4                 vcCF1 set $04
(1)  881/    8828 : =$F                 vcCF2 set $0F
(1)  881/    8828 : =$2                 vcCF3 set $02
(1)  881/    8828 : =$1                 vcCF4 set $01
(1)  882/    8828 : (MACRO)             	smpsVcRateScale     $00, $02, $01, $02
(1)  882/    8828 : =$0                 vcRS1 set $00
(1)  882/    8828 : =$2                 vcRS2 set $02
(1)  882/    8828 : =$1                 vcRS3 set $01
(1)  882/    8828 : =$2                 vcRS4 set $02
(1)  883/    8828 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $12, $0D
(1)  883/    8828 : =$1F                vcAR1 set $1F
(1)  883/    8828 : =$1F                vcAR2 set $1F
(1)  883/    8828 : =$12                vcAR3 set $12
(1)  883/    8828 : =$D                 vcAR4 set $0D
(1)  884/    8828 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  884/    8828 : =$0                 vcAM1 set $00<<5
(1)  884/    8828 : =$0                 vcAM2 set $00<<5
(1)  884/    8828 : =$0                 vcAM3 set $00<<5
(1)  884/    8828 : =$0                 vcAM4 set $00<<5
(1)  885/    8828 : (MACRO)             	smpsVcDecayRate1    $0D, $00, $00, $09
(1)  885/    8828 : =$D                 vcD1R1 set $0D
(1)  885/    8828 : =$0                 vcD1R2 set $00
(1)  885/    8828 : =$0                 vcD1R3 set $00
(1)  885/    8828 : =$9                 vcD1R4 set $09
(1)  886/    8828 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  886/    8828 : =$0                 vcD2R1 set $00
(1)  886/    8828 : =$0                 vcD2R2 set $00
(1)  886/    8828 : =$0                 vcD2R3 set $00
(1)  886/    8828 : =$0                 vcD2R4 set $00
(1)  887/    8828 : (MACRO)             	smpsVcDecayLevel    $0F, $00, $00, $02
(1)  887/    8828 : =$F                 vcDL1 set $0F
(1)  887/    8828 : =$0                 vcDL2 set $00
(1)  887/    8828 : =$0                 vcDL3 set $00
(1)  887/    8828 : =$2                 vcDL4 set $02
(1)  888/    8828 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  888/    8828 : =$F                 vcRR1 set $0F
(1)  888/    8828 : =$F                 vcRR2 set $0F
(1)  888/    8828 : =$F                 vcRR3 set $0F
(1)  888/    8828 : =$F                 vcRR4 set $0F
(1)  889/    8828 : (MACRO)             	smpsVcTotalLevel    $06, $1F, $06, $17
(1)  889/    8828 : =$6                 vcTL1 set $06
(1)  889/    8828 : =$1F                vcTL2 set $1F
(1)  889/    8828 : =$6                 vcTL3 set $06
(1)  889/    8828 : =$17                vcTL4 set $17
(1)  889/    8828 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  889/    8829 :                     ;   0     1     2     3     4     5     6     7
(1)  889/    8829 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  889/    8829 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  889/    8829 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  889/    8829 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  889/    8829 : =$80                vcTLMask1 set $80
(1)  889/    8829 :                     
(1)  889/    8829 :                     
(1)  889/    8829 : 0102 0F04                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  889/    882D : 8D52 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  889/    8831 : 0900 000D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  889/    8835 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  889/    8839 : 2F0F 0FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  889/    883D : 1786 1F86                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  890/    8841 :                     
(1)  891/    8841 :                     ;	Voice $02
(1)  892/    8841 :                     ;	$2C
(1)  893/    8841 :                     ;	$22, $04, $02, $14, 	$51, $52, $50, $52, 	$0D, $00, $06, $04
(1)  894/    8841 :                     ;	$03, $05, $02, $00, 	$16, $18, $26, $18, 	$0F, $80, $12, $80
(1)  895/    8841 : (MACRO)             	smpsVcAlgorithm     $04
(1)  895/    8841 : =$4                 vcAlgorithm set $04
(1)  896/    8841 : (MACRO)             	smpsVcFeedback      $05
(1)  896/    8841 : =$5                 vcFeedback set $05
(1)  897/    8841 : (MACRO)             	smpsVcUnusedBits    $00
(1)  897/    8841 : =$0                 vcUnusedBits set $00
(1)  897/    8841 : =$0                 vcD1R1Unk set 0
(1)  897/    8841 : =$0                 vcD1R2Unk set 0
(1)  897/    8841 : =$0                 vcD1R3Unk set 0
(1)  897/    8841 : =$0                 vcD1R4Unk set 0
(1)  898/    8841 : (MACRO)             	smpsVcDetune        $01, $00, $00, $02
(1)  898/    8841 : =$1                 vcDT1 set $01
(1)  898/    8841 : =$0                 vcDT2 set $00
(1)  898/    8841 : =$0                 vcDT3 set $00
(1)  898/    8841 : =$2                 vcDT4 set $02
(1)  899/    8841 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $04, $02
(1)  899/    8841 : =$4                 vcCF1 set $04
(1)  899/    8841 : =$2                 vcCF2 set $02
(1)  899/    8841 : =$4                 vcCF3 set $04
(1)  899/    8841 : =$2                 vcCF4 set $02
(1)  900/    8841 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  900/    8841 : =$1                 vcRS1 set $01
(1)  900/    8841 : =$1                 vcRS2 set $01
(1)  900/    8841 : =$1                 vcRS3 set $01
(1)  900/    8841 : =$1                 vcRS4 set $01
(1)  901/    8841 : (MACRO)             	smpsVcAttackRate    $12, $10, $12, $11
(1)  901/    8841 : =$12                vcAR1 set $12
(1)  901/    8841 : =$10                vcAR2 set $10
(1)  901/    8841 : =$12                vcAR3 set $12
(1)  901/    8841 : =$11                vcAR4 set $11
(1)  902/    8841 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  902/    8841 : =$0                 vcAM1 set $00<<5
(1)  902/    8841 : =$0                 vcAM2 set $00<<5
(1)  902/    8841 : =$0                 vcAM3 set $00<<5
(1)  902/    8841 : =$0                 vcAM4 set $00<<5
(1)  903/    8841 : (MACRO)             	smpsVcDecayRate1    $04, $06, $00, $0D
(1)  903/    8841 : =$4                 vcD1R1 set $04
(1)  903/    8841 : =$6                 vcD1R2 set $06
(1)  903/    8841 : =$0                 vcD1R3 set $00
(1)  903/    8841 : =$D                 vcD1R4 set $0D
(1)  904/    8841 : (MACRO)             	smpsVcDecayRate2    $00, $02, $05, $03
(1)  904/    8841 : =$0                 vcD2R1 set $00
(1)  904/    8841 : =$2                 vcD2R2 set $02
(1)  904/    8841 : =$5                 vcD2R3 set $05
(1)  904/    8841 : =$3                 vcD2R4 set $03
(1)  905/    8841 : (MACRO)             	smpsVcDecayLevel    $01, $02, $01, $01
(1)  905/    8841 : =$1                 vcDL1 set $01
(1)  905/    8841 : =$2                 vcDL2 set $02
(1)  905/    8841 : =$1                 vcDL3 set $01
(1)  905/    8841 : =$1                 vcDL4 set $01
(1)  906/    8841 : (MACRO)             	smpsVcReleaseRate   $08, $06, $08, $06
(1)  906/    8841 : =$8                 vcRR1 set $08
(1)  906/    8841 : =$6                 vcRR2 set $06
(1)  906/    8841 : =$8                 vcRR3 set $08
(1)  906/    8841 : =$6                 vcRR4 set $06
(1)  907/    8841 : (MACRO)             	smpsVcTotalLevel    $00, $12, $00, $0F
(1)  907/    8841 : =$0                 vcTL1 set $00
(1)  907/    8841 : =$12                vcTL2 set $12
(1)  907/    8841 : =$0                 vcTL3 set $00
(1)  907/    8841 : =$F                 vcTL4 set $0F
(1)  907/    8841 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  907/    8842 :                     ;   0     1     2     3     4     5     6     7
(1)  907/    8842 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  907/    8842 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  907/    8842 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  907/    8842 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  907/    8842 : =$80                vcTLMask1 set $80
(1)  907/    8842 :                     
(1)  907/    8842 :                     
(1)  907/    8842 : 2204 0214                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  907/    8846 : 5152 5052                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  907/    884A : 0D00 0604                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  907/    884E : 0305 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  907/    8852 : 1618 2618                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  907/    8856 : 0F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  908/    885A :                     
(1)  909/    885A :                     ;	Voice $03
(1)  910/    885A :                     ;	$41
(1)  911/    885A :                     ;	$18, $12, $02, $12, 	$5F, $5F, $5F, $5F, 	$0C, $0B, $0B, $0B
(1)  912/    885A :                     ;	$09, $08, $10, $0A, 	$AF, $FF, $FF, $FF, 	$1D, $23, $1B, $80
(1)  913/    885A : (MACRO)             	smpsVcAlgorithm     $01
(1)  913/    885A : =$1                 vcAlgorithm set $01
(1)  914/    885A : (MACRO)             	smpsVcFeedback      $00
(1)  914/    885A : =$0                 vcFeedback set $00
(1)  915/    885A : (MACRO)             	smpsVcUnusedBits    $01
(1)  915/    885A : =$1                 vcUnusedBits set $01
(1)  915/    885A : =$0                 vcD1R1Unk set 0
(1)  915/    885A : =$0                 vcD1R2Unk set 0
(1)  915/    885A : =$0                 vcD1R3Unk set 0
(1)  915/    885A : =$0                 vcD1R4Unk set 0
(1)  916/    885A : (MACRO)             	smpsVcDetune        $01, $00, $01, $01
(1)  916/    885A : =$1                 vcDT1 set $01
(1)  916/    885A : =$0                 vcDT2 set $00
(1)  916/    885A : =$1                 vcDT3 set $01
(1)  916/    885A : =$1                 vcDT4 set $01
(1)  917/    885A : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $08
(1)  917/    885A : =$2                 vcCF1 set $02
(1)  917/    885A : =$2                 vcCF2 set $02
(1)  917/    885A : =$2                 vcCF3 set $02
(1)  917/    885A : =$8                 vcCF4 set $08
(1)  918/    885A : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  918/    885A : =$1                 vcRS1 set $01
(1)  918/    885A : =$1                 vcRS2 set $01
(1)  918/    885A : =$1                 vcRS3 set $01
(1)  918/    885A : =$1                 vcRS4 set $01
(1)  919/    885A : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  919/    885A : =$1F                vcAR1 set $1F
(1)  919/    885A : =$1F                vcAR2 set $1F
(1)  919/    885A : =$1F                vcAR3 set $1F
(1)  919/    885A : =$1F                vcAR4 set $1F
(1)  920/    885A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  920/    885A : =$0                 vcAM1 set $00<<5
(1)  920/    885A : =$0                 vcAM2 set $00<<5
(1)  920/    885A : =$0                 vcAM3 set $00<<5
(1)  920/    885A : =$0                 vcAM4 set $00<<5
(1)  921/    885A : (MACRO)             	smpsVcDecayRate1    $0B, $0B, $0B, $0C
(1)  921/    885A : =$B                 vcD1R1 set $0B
(1)  921/    885A : =$B                 vcD1R2 set $0B
(1)  921/    885A : =$B                 vcD1R3 set $0B
(1)  921/    885A : =$C                 vcD1R4 set $0C
(1)  922/    885A : (MACRO)             	smpsVcDecayRate2    $0A, $10, $08, $09
(1)  922/    885A : =$A                 vcD2R1 set $0A
(1)  922/    885A : =$10                vcD2R2 set $10
(1)  922/    885A : =$8                 vcD2R3 set $08
(1)  922/    885A : =$9                 vcD2R4 set $09
(1)  923/    885A : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0A
(1)  923/    885A : =$F                 vcDL1 set $0F
(1)  923/    885A : =$F                 vcDL2 set $0F
(1)  923/    885A : =$F                 vcDL3 set $0F
(1)  923/    885A : =$A                 vcDL4 set $0A
(1)  924/    885A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  924/    885A : =$F                 vcRR1 set $0F
(1)  924/    885A : =$F                 vcRR2 set $0F
(1)  924/    885A : =$F                 vcRR3 set $0F
(1)  924/    885A : =$F                 vcRR4 set $0F
(1)  925/    885A : (MACRO)             	smpsVcTotalLevel    $00, $1B, $23, $1D
(1)  925/    885A : =$0                 vcTL1 set $00
(1)  925/    885A : =$1B                vcTL2 set $1B
(1)  925/    885A : =$23                vcTL3 set $23
(1)  925/    885A : =$1D                vcTL4 set $1D
(1)  925/    885A : 41                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  925/    885B :                     ;   0     1     2     3     4     5     6     7
(1)  925/    885B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  925/    885B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  925/    885B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  925/    885B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  925/    885B : =$80                vcTLMask1 set $80
(1)  925/    885B :                     
(1)  925/    885B :                     
(1)  925/    885B : 1812 0212                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  925/    885F : 5F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  925/    8863 : 0C0B 0B0B                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  925/    8867 : 0908 100A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  925/    886B : AFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  925/    886F : 1D23 1B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  926/    8873 :                     
(1)  927/    8873 :                     
   24/    8873 :                        		include		"Music/Walkin.asm"
(1)    1/    8873 :                     Walkin_Header:
(1)    2/    8873 : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    8873 :                     
(1)    2/    8873 : =$3                 SourceDriver set 3
(1)    2/    8873 :                     
(1)    2/    8873 : =$0                 SourceSMPS2ASM set 0
(1)    2/    8873 :                     
(1)    2/    8873 : =$8873              songStart set *
(1)    2/    8873 :                     
(1)    2/    8873 :                     
(1)    3/    8873 : (MACRO)             	smpsHeaderVoice     Walkin_Voices
(1)    3/    8873 : 5C8B                                dc.w    z80_ptr(WALKIN_VOICES)
(1)    4/    8875 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    8875 : 0603                        dc.b    $06,$03
(1)    5/    8877 : (MACRO)             	smpsHeaderTempo     $01, $35
(1)    5/    8877 : 01                          dc.b    $01
(1)    5/    8878 :  (MACRO-2)                  convertMainTempoMod $35
(1)    5/    8878 : 35                                  dc.b    $35
(1)    6/    8879 :                     
(1)    7/    8879 : (MACRO)             	smpsHeaderDAC       Walkin_DAC
(1)    7/    8879 :  (MACRO-2)                  CheckedChannelPointer WALKIN_DAC
(1)    7/    8879 : 2F8B                                dc.w    z80_ptr(WALKIN_DAC)
(1)    7/    887B : 0000                                dc.w    $00
(1)    8/    887D : (MACRO)             	smpsHeaderFM        Walkin_FM1,	$00, $10
(1)    8/    887D :  (MACRO-2)                  CheckedChannelPointer WALKIN_FM1
(1)    8/    887D : A388                                dc.w    z80_ptr(WALKIN_FM1)
(1)    8/    887F : 0010                        dc.b    $00,$10
(1)    9/    8881 : (MACRO)             	smpsHeaderFM        Walkin_FM2,	$00, $10
(1)    9/    8881 :  (MACRO-2)                  CheckedChannelPointer WALKIN_FM2
(1)    9/    8881 : E588                                dc.w    z80_ptr(WALKIN_FM2)
(1)    9/    8883 : 0010                        dc.b    $00,$10
(1)   10/    8885 : (MACRO)             	smpsHeaderFM        Walkin_FM3,	$0C, $15
(1)   10/    8885 :  (MACRO-2)                  CheckedChannelPointer WALKIN_FM3
(1)   10/    8885 : 7C89                                dc.w    z80_ptr(WALKIN_FM3)
(1)   10/    8887 : 0C15                        dc.b    $0C,$15
(1)   11/    8889 : (MACRO)             	smpsHeaderFM        Walkin_FM4,	$0C, $15
(1)   11/    8889 :  (MACRO-2)                  CheckedChannelPointer WALKIN_FM4
(1)   11/    8889 : 198A                                dc.w    z80_ptr(WALKIN_FM4)
(1)   11/    888B : 0C15                        dc.b    $0C,$15
(1)   12/    888D : (MACRO)             	smpsHeaderFM        Walkin_FM5,	$00, $12
(1)   12/    888D :  (MACRO-2)                  CheckedChannelPointer WALKIN_FM5
(1)   12/    888D : 968A                                dc.w    z80_ptr(WALKIN_FM5)
(1)   12/    888F : 0012                        dc.b    $00,$12
(1)   13/    8891 : (MACRO)             	smpsHeaderPSG       Walkin_PSG1,	$F4, $04, $00, $00
(1)   13/    8891 :  (MACRO-2)                  CheckedChannelPointer WALKIN_PSG1
(1)   13/    8891 : CF8A                                dc.w    z80_ptr(WALKIN_PSG1)
(1)   13/    8893 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   13/    8893 : F4                                  dc.b    $F4
(1)   13/    8894 : 0400 00                     dc.b    $04,$00,$00
(1)   14/    8897 : (MACRO)             	smpsHeaderPSG       Walkin_PSG2,	$E8, $04, $00, $00
(1)   14/    8897 :  (MACRO-2)                  CheckedChannelPointer WALKIN_PSG2
(1)   14/    8897 : E28A                                dc.w    z80_ptr(WALKIN_PSG2)
(1)   14/    8899 :  (MACRO-2)                  PSGPitchConvert $E8
(1)   14/    8899 : E8                                  dc.b    $E8
(1)   14/    889A : 0400 00                     dc.b    $04,$00,$00
(1)   15/    889D : (MACRO)             	smpsHeaderPSG       Walkin_PSG3,	$23, $01, $00, $00
(1)   15/    889D :  (MACRO-2)                  CheckedChannelPointer WALKIN_PSG3
(1)   15/    889D : 0B8B                                dc.w    z80_ptr(WALKIN_PSG3)
(1)   15/    889F :  (MACRO-2)                  PSGPitchConvert $23
(1)   15/    889F : 23                                  dc.b    $23
(1)   15/    88A0 : 0100 00                     dc.b    $01,$00,$00
(1)   16/    88A3 :                     
(1)   17/    88A3 :                     ; FM1 Data
(1)   18/    88A3 :                     Walkin_FM1:
(1)   19/    88A3 : (MACRO)             	smpsSetvoice        $00
(1)   19/    88A3 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    88A3 : EF00                                dc.b    $EF,$00
(1)   20/    88A5 : 8018                	dc.b	nRst, $18
(1)   21/    88A7 : (MACRO)             	smpsModSet          $03, $01, $F6, $00
(1)   21/    88A7 : F0                          dc.b    $F0
(1)   21/    88A8 : 0301 F600                           dc.b    $03,$01,$F6,$00
(1)   21/    88AC :                             ;dc.b   $01,$F6,$00
(1)   22/    88AC : 94                  	dc.b	nG1
(1)   23/    88AD : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)   23/    88AD : F0                          dc.b    $F0
(1)   23/    88AE : 0000 0000                           dc.b    $00,$00,$00,$00
(1)   23/    88B2 :                             ;dc.b   $00,$00,$00
(1)   24/    88B2 :                     
(1)   25/    88B2 :                     Walkin_Jump02:
(1)   26/    88B2 : (MACRO)             	smpsCall            Walkin_Call05
(1)   26/    88B2 : F8                          dc.b    $F8
(1)   26/    88B3 : C588                                dc.w    z80_ptr(WALKIN_CALL05)
(1)   27/    88B5 : (MACRO)             	smpsCall            Walkin_Call05
(1)   27/    88B5 : F8                          dc.b    $F8
(1)   27/    88B6 : C588                                dc.w    z80_ptr(WALKIN_CALL05)
(1)   28/    88B8 : (MACRO)             	smpsAlterPitch      $FE
(1)   28/    88B8 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)   28/    88B8 : FBFE                                dc.b    $FB,$FE
(1)   29/    88BA : (MACRO)             	smpsCall            Walkin_Call05
(1)   29/    88BA : F8                          dc.b    $F8
(1)   29/    88BB : C588                                dc.w    z80_ptr(WALKIN_CALL05)
(1)   30/    88BD : (MACRO)             	smpsAlterPitch      $02
(1)   30/    88BD :  (MACRO-2)                  smpsChangeTransposition $02
(1)   30/    88BD : FB02                                dc.b    $FB,$02
(1)   31/    88BF : (MACRO)             	smpsCall            Walkin_Call05
(1)   31/    88BF : F8                          dc.b    $F8
(1)   31/    88C0 : C588                                dc.w    z80_ptr(WALKIN_CALL05)
(1)   32/    88C2 : (MACRO)             	smpsJump            Walkin_Jump02
(1)   32/    88C2 : F6                          dc.b    $F6
(1)   32/    88C3 : B288                                dc.w    z80_ptr(WALKIN_JUMP02)
(1)   33/    88C5 :                     
(1)   34/    88C5 :                     Walkin_Call05:
(1)   35/    88C5 : 940C 8094 8008 940C 	dc.b	nG1, $0C, nRst, nG1, nRst, $08, nG1, $0C, nF1, $04, nG1, $0C
             88CD : 9204 940C         
(1)   36/    88D1 : 9792 940C A006 8094 	dc.b	nBb1, nF1, nG1, $0C, nG2, $06, nRst, nG1, $0C, nRst, $08, nG1
             88D9 : 0C80 0894         
(1)   37/    88DD : 0C92 0494 0C97 92   	dc.b	$0C, nF1, $04, nG1, $0C, nBb1, nF1
(1)   38/    88E4 : (MACRO)             	smpsReturn
(1)   38/    88E4 : F9                                  dc.b    $F9
(1)   39/    88E5 :                     
(1)   40/    88E5 :                     ; FM2 Data
(1)   41/    88E5 :                     Walkin_FM2:
(1)   42/    88E5 : (MACRO)             	smpsSetvoice        $01
(1)   42/    88E5 :  (MACRO-2)                  smpsFMvoice $01
(1)   42/    88E5 : EF01                                dc.b    $EF,$01
(1)   43/    88E7 : 8030                	dc.b	nRst, $30
(1)   44/    88E9 :                     
(1)   45/    88E9 :                     Walkin_Jump01:
(1)   46/    88E9 : (MACRO)             	smpsCall            Walkin_Call04
(1)   46/    88E9 : F8                          dc.b    $F8
(1)   46/    88EA : 0089                                dc.w    z80_ptr(WALKIN_CALL04)
(1)   47/    88EC : 800C                	dc.b	nRst, $0C
(1)   48/    88EE : (MACRO)             	smpsJump            Walkin_Jump01
(1)   48/    88EE : F6                          dc.b    $F6
(1)   48/    88EF : E988                                dc.w    z80_ptr(WALKIN_JUMP01)
(1)   49/    88F1 :                     
(1)   50/    88F1 :                     Walkin_Call07:
(1)   51/    88F1 : AA0C 80AC 80AF 03E7 	dc.b	nF3, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $11, nG3, $04
             88F9 : B011 AC04         
(1)   52/    88FD : 800C                	dc.b	nRst, $0C
(1)   53/    88FF : (MACRO)             	smpsReturn
(1)   53/    88FF : F9                                  dc.b    $F9
(1)   54/    8900 :                     
(1)   55/    8900 :                     Walkin_Call04:
(1)   56/    8900 : (MACRO)             	smpsCall            Walkin_Call07
(1)   56/    8900 : F8                          dc.b    $F8
(1)   56/    8901 : F188                                dc.w    z80_ptr(WALKIN_CALL07)
(1)   57/    8903 : B10C E708 8004 B108 	dc.b	nC4, $0C, smpsNoAttack, $08, nRst, $04, nC4, $08, nRst, $04, nC4, $08
             890B : 8004 B108         
(1)   58/    890F : 8004 B308 8004 B108 	dc.b	nRst, $04, nD4, $08, nRst, $04, nC4, $08, nB3, $04, nRst, $08
             8917 : B004 8008         
(1)   59/    891B : AC18 8004           	dc.b	nG3, $18, nRst, $04
(1)   60/    891F : (MACRO)             	smpsCall            Walkin_Call07
(1)   60/    891F : F8                          dc.b    $F8
(1)   60/    8920 : F188                                dc.w    z80_ptr(WALKIN_CALL07)
(1)   61/    8922 : B60C E708 8004 B808 	dc.b	nF4, $0C, smpsNoAttack, $08, nRst, $04, nG4, $08, nRst, $04, nF4, $08
             892A : 8004 B608         
(1)   62/    892E : B504 8008 B334 800C 	dc.b	nE4, $04, nRst, $08, nD4, $34, nRst, $0C, nBb3, $03, smpsNoAttack, nC4
             8936 : AF03 E7B1         
(1)   63/    893A : 15AE 0880 04AF 03E7 	dc.b	$15, nA3, $08, nRst, $04, nBb3, $03, smpsNoAttack, nC4, $11, nD4, $04
             8942 : B111 B304         
(1)   64/    8946 : 800C B40C E708 8004 	dc.b	nRst, $0C, nEb4, $0C, smpsNoAttack, $08, nRst, $04, nD4, $08, nRst, $04
             894E : B308 8004         
(1)   65/    8952 : B408 B304 8008 B10C 	dc.b	nEb4, $08, nD4, $04, nRst, $08, nC4, $0C, nRst, $04, nA3, $08
             895A : 8004 AE08         
(1)   66/    895E : 8004 AF0C B008 8004 	dc.b	nRst, $04, nBb3, $0C, nB3, $08, nRst, $04, nC4, $0C, nRst, nG3
             8966 : B10C 80AC         
(1)   67/    896A : 80AE 03E7 AF11 AC04 	dc.b	nRst, nA3, $03, smpsNoAttack, nBb3, $11, nG3, $04, nRst, $0C, nF3, smpsNoAttack
             8972 : 800C AAE7         
(1)   68/    8976 : 0880 04AC 48        	dc.b	$08, nRst, $04, nG3, $48
(1)   69/    897B : (MACRO)             	smpsReturn
(1)   69/    897B : F9                                  dc.b    $F9
(1)   70/    897C :                     
(1)   71/    897C :                     ; FM3 Data
(1)   72/    897C :                     Walkin_FM3:
(1)   73/    897C : (MACRO)             	smpsSetvoice        $02
(1)   73/    897C :  (MACRO-2)                  smpsFMvoice $02
(1)   73/    897C : EF02                                dc.b    $EF,$02
(1)   74/    897E : (MACRO)             	smpsPan             panLeft, $00
(1)   74/    897E : =$0                 panNone set $00
(1)   74/    897E : =$40                panRight set $40
(1)   74/    897E : =$80                panLeft set $80
(1)   74/    897E : =$C0                panCentre set $C0
(1)   74/    897E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   74/    897E : E080                        dc.b $E0,PANLEFT+$00
(1)   75/    8980 : 8030                	dc.b	nRst, $30
(1)   76/    8982 :                     
(1)   77/    8982 :                     Walkin_Jump00:
(1)   78/    8982 : (MACRO)             	smpsCall            Walkin_Call03
(1)   78/    8982 : F8                          dc.b    $F8
(1)   78/    8983 : F289                                dc.w    z80_ptr(WALKIN_CALL03)
(1)   79/    8985 : 8018                	dc.b	nRst, $18
(1)   80/    8987 : (MACRO)             	smpsCall            Walkin_Call03
(1)   80/    8987 : F8                          dc.b    $F8
(1)   80/    8988 : F289                                dc.w    z80_ptr(WALKIN_CALL03)
(1)   81/    898A : 8008 AA04 AB08 AC04 	dc.b	nRst, $08, nF3, $04, nFs3, $08, nG3, $04, nRst, $18, nEb3, $08
             8992 : 8018 A808         
(1)   82/    8996 : AA04 8008 A504 802C 	dc.b	nF3, $04, nRst, $08, nC3, $04, nRst, $2C, nF3, $04, smpsNoAttack, $08
             899E : AA04 E708         
(1)   83/    89A2 : A804 AA08 8004 AA08 	dc.b	nEb3, $04, nF3, $08, nRst, $04, nF3, $08, nRst, $04, nEb3, $08
             89AA : 8004 A808         
(1)   84/    89AE : 8004 A708 A804 8008 	dc.b	nRst, $04, nD3, $08, nEb3, $04, nRst, $08, nC3, $04, nRst, $08
             89B6 : A504 8008         
(1)   85/    89BA : AA04 AB08 AC04 8018 	dc.b	nF3, $04, nFs3, $08, nG3, $04, nRst, $18, nBb3, $08, nC4, $04
             89C2 : AF08 B104         
(1)   86/    89C6 : 8008 AC04 800C B308 	dc.b	nRst, $08, nG3, $04, nRst, $0C, nD4, $08, nRst, $0C, nD4, $04
             89CE : 800C B304         
(1)   87/    89D2 : 800C 8008 AB04 AC08 	dc.b	nRst, $0C, nRst, $08, nFs3, $04, nG3, $08, nRst, $04, nF3, $08
             89DA : 8004 AA08         
(1)   88/    89DE : 8004 A708 8004 A508 	dc.b	nRst, $04, nD3, $08, nRst, $04, nC3, $08, nRst, $0C, nG2, nF3
             89E6 : 800C A0AA         
(1)   89/    89EA : 04AB 08AC 04        	dc.b	$04, nFs3, $08, nG3, $04
(1)   90/    89EF : (MACRO)             	smpsJump            Walkin_Jump00
(1)   90/    89EF : F6                          dc.b    $F6
(1)   90/    89F0 : 8289                                dc.w    z80_ptr(WALKIN_JUMP00)
(1)   91/    89F2 :                     
(1)   92/    89F2 :                     Walkin_Call03:
(1)   93/    89F2 : 8018 AF08 B104 8008 	dc.b	nRst, $18, nBb3, $08, nC4, $04, nRst, $08, nG3, $04, nRst, $2C
             89FA : AC04 802C         
(1)   94/    89FE : AA04 E708 8004 AA08 	dc.b	nF3, $04, smpsNoAttack, $08, nRst, $04, nF3, $08, nRst, $04, nG3, $08
             8A06 : 8004 AC08         
(1)   95/    8A0A : 8004 A708 8004 AC08 	dc.b	nRst, $04, nD3, $08, nRst, $04, nG3, $08, nFs3, $04, nF3, $08
             8A12 : AB04 AA08         
(1)   96/    8A16 : AC04                	dc.b	nG3, $04
(1)   97/    8A18 : (MACRO)             	smpsReturn
(1)   97/    8A18 : F9                                  dc.b    $F9
(1)   98/    8A19 :                     
(1)   99/    8A19 :                     ; FM4 Data
(1)  100/    8A19 :                     Walkin_FM4:
(1)  101/    8A19 : (MACRO)             	smpsSetvoice        $02
(1)  101/    8A19 :  (MACRO-2)                  smpsFMvoice $02
(1)  101/    8A19 : EF02                                dc.b    $EF,$02
(1)  102/    8A1B : (MACRO)             	smpsPan             panRight, $00
(1)  102/    8A1B : =$0                 panNone set $00
(1)  102/    8A1B : =$40                panRight set $40
(1)  102/    8A1B : =$80                panLeft set $80
(1)  102/    8A1B : =$C0                panCentre set $C0
(1)  102/    8A1B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  102/    8A1B : E040                        dc.b $E0,PANRIGHT+$00
(1)  103/    8A1D : 8030                	dc.b	nRst, $30
(1)  104/    8A1F :                     
(1)  105/    8A1F :                     Walkin_Loop02:
(1)  106/    8A1F : 8018 AA08 800C AA04 	dc.b	nRst, $18, nF3, $08, nRst, $0C, nF3, $04, nRst, $2C, nD3, $04
             8A27 : 802C A704         
(1)  107/    8A2B : E708 A704 0880 04A3 	dc.b	smpsNoAttack, $08, nD3, $04, $08, nRst, $04, nBb2, $08, nRst, $04, nBb2
             8A33 : 0880 04A3         
(1)  108/    8A37 : 0880 04A7 0880 0CA7 	dc.b	$08, nRst, $04, nD3, $08, nRst, $0C, nD3, $04, nRst, $18
             8A3F : 0480 18            
(1)  109/    8A42 : (MACRO)             	smpsLoop            $00, $02, Walkin_Loop02
(1)  109/    8A42 : F7                          dc.b    $F7
(1)  109/    8A43 : 0002                        dc.b    $00,$02
(1)  109/    8A45 : 1F8A                                dc.w    z80_ptr(WALKIN_LOOP02)
(1)  110/    8A47 : 8018 A208 800C A204 	dc.b	nRst, $18, nA2, $08, nRst, $0C, nA2, $04, nRst, $2C, nA2, $04
             8A4F : 802C A204         
(1)  111/    8A53 : E708 A204 800C A208 	dc.b	smpsNoAttack, $08, nA2, $04, nRst, $0C, nA2, $08, nRst, $04, nA2, $08
             8A5B : 8004 A208         
(1)  112/    8A5F : 8004 A208 0480 08A2 	dc.b	nRst, $04, nA2, $08, $04, nRst, $08, nA2, $04, nRst, $18, nRst
             8A67 : 0480 1880         
(1)  113/    8A6B : 18AA 0880 0CAA 0480 	dc.b	$18, nF3, $08, nRst, $0C, nF3, $04, nRst, $0C, nF3, $08, nRst
             8A73 : 0CAA 0880         
(1)  114/    8A77 : 0CAA 0480 0C80 08A7 	dc.b	$0C, nF3, $04, nRst, $0C, nRst, $08, nD3, $0C, nRst, $04, nBb2
             8A7F : 0C80 04A3         
(1)  115/    8A83 : 0880 04A3 0880 049E 	dc.b	$08, nRst, $04, nBb2, $08, nRst, $04, nF2, $08, $04, nRst, $08
             8A8B : 0804 8008         
(1)  116/    8A8F : 9B0C 8010           	dc.b	nD2, $0C, nRst, $10
(1)  117/    8A93 : (MACRO)             	smpsJump            Walkin_Loop02
(1)  117/    8A93 : F6                          dc.b    $F6
(1)  117/    8A94 : 1F8A                                dc.w    z80_ptr(WALKIN_LOOP02)
(1)  118/    8A96 :                     
(1)  119/    8A96 :                     ; FM5 Data
(1)  120/    8A96 :                     Walkin_FM5:
(1)  121/    8A96 : (MACRO)             	smpsSetvoice        $03
(1)  121/    8A96 :  (MACRO-2)                  smpsFMvoice $03
(1)  121/    8A96 : EF03                                dc.b    $EF,$03
(1)  122/    8A98 : 8030                	dc.b	nRst, $30
(1)  123/    8A9A :                     
(1)  124/    8A9A :                     Walkin_Loop01:
(1)  125/    8A9A : (MACRO)             	smpsCall            Walkin_Call01
(1)  125/    8A9A : F8                          dc.b    $F8
(1)  125/    8A9B : B18A                                dc.w    z80_ptr(WALKIN_CALL01)
(1)  126/    8A9D : (MACRO)             	smpsLoop            $00, $04, Walkin_Loop01
(1)  126/    8A9D : F7                          dc.b    $F7
(1)  126/    8A9E : 0004                        dc.b    $00,$04
(1)  126/    8AA0 : 9A8A                                dc.w    z80_ptr(WALKIN_LOOP01)
(1)  127/    8AA2 : (MACRO)             	smpsCall            Walkin_Call02
(1)  127/    8AA2 : F8                          dc.b    $F8
(1)  127/    8AA3 : C08A                                dc.w    z80_ptr(WALKIN_CALL02)
(1)  128/    8AA5 : (MACRO)             	smpsCall            Walkin_Call02
(1)  128/    8AA5 : F8                          dc.b    $F8
(1)  128/    8AA6 : C08A                                dc.w    z80_ptr(WALKIN_CALL02)
(1)  129/    8AA8 : (MACRO)             	smpsCall            Walkin_Call01
(1)  129/    8AA8 : F8                          dc.b    $F8
(1)  129/    8AA9 : B18A                                dc.w    z80_ptr(WALKIN_CALL01)
(1)  130/    8AAB : (MACRO)             	smpsCall            Walkin_Call01
(1)  130/    8AAB : F8                          dc.b    $F8
(1)  130/    8AAC : B18A                                dc.w    z80_ptr(WALKIN_CALL01)
(1)  131/    8AAE : (MACRO)             	smpsJump            Walkin_Loop01
(1)  131/    8AAE : F6                          dc.b    $F6
(1)  131/    8AAF : 9A8A                                dc.w    z80_ptr(WALKIN_LOOP01)
(1)  132/    8AB1 :                     
(1)  133/    8AB1 :                     Walkin_Call01:
(1)  134/    8AB1 : 800C AAAC AFAA 08AC 	dc.b	nRst, $0C, nF3, nG3, nBb3, nF3, $08, nG3, $0C, nBb3, nF3, $04
             8AB9 : 0CAF AA04         
(1)  135/    8ABD : AC0C                	dc.b	nG3, $0C
(1)  136/    8ABF : (MACRO)             	smpsReturn
(1)  136/    8ABF : F9                                  dc.b    $F9
(1)  137/    8AC0 :                     
(1)  138/    8AC0 :                     Walkin_Call02:
(1)  139/    8AC0 : 800C A8AA AEA8 08AA 	dc.b	nRst, $0C, nEb3, nF3, nA3, nEb3, $08, nF3, $0C, nA3, nEb3, $04
             8AC8 : 0CAE A804         
(1)  140/    8ACC : AA0C                	dc.b	nF3, $0C
(1)  141/    8ACE : (MACRO)             	smpsReturn
(1)  141/    8ACE : F9                                  dc.b    $F9
(1)  142/    8ACF :                     
(1)  143/    8ACF :                     ; PSG1 Data
(1)  144/    8ACF :                     Walkin_PSG1:
(1)  145/    8ACF : (MACRO)             	smpsPSGvoice        sTone_03
(1)  145/    8ACF : F503                        dc.b    $F5,STONE_03
(1)  146/    8AD1 : (MACRO)             	smpsModSet          $01, $01, $01, $03
(1)  146/    8AD1 : F0                          dc.b    $F0
(1)  146/    8AD2 : 0101 0103                           dc.b    $01,$01,$01,$03
(1)  146/    8AD6 :                             ;dc.b   $01,$01,$03
(1)  147/    8AD6 : 8030                	dc.b	nRst, $30
(1)  148/    8AD8 :                     
(1)  149/    8AD8 :                     Walkin_Jump03:
(1)  150/    8AD8 : 8003                	dc.b	nRst, $03
(1)  151/    8ADA : (MACRO)             	smpsCall            Walkin_Call04
(1)  151/    8ADA : F8                          dc.b    $F8
(1)  151/    8ADB : 0089                                dc.w    z80_ptr(WALKIN_CALL04)
(1)  152/    8ADD : 8009                	dc.b	nRst, $09
(1)  153/    8ADF : (MACRO)             	smpsJump            Walkin_Jump03
(1)  153/    8ADF : F6                          dc.b    $F6
(1)  153/    8AE0 : D88A                                dc.w    z80_ptr(WALKIN_JUMP03)
(1)  154/    8AE2 :                     
(1)  155/    8AE2 :                     ; PSG2 Data
(1)  156/    8AE2 :                     Walkin_PSG2:
(1)  157/    8AE2 : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  157/    8AE2 : F50C                        dc.b    $F5,STONE_0C
(1)  158/    8AE4 : 8030                	dc.b	nRst, $30
(1)  159/    8AE6 :                     
(1)  160/    8AE6 :                     Walkin_Loop04:
(1)  161/    8AE6 : (MACRO)             	smpsCall            Walkin_Call06
(1)  161/    8AE6 : F8                          dc.b    $F8
(1)  161/    8AE7 : 018B                                dc.w    z80_ptr(WALKIN_CALL06)
(1)  162/    8AE9 : (MACRO)             	smpsLoop            $01, $04, Walkin_Loop04
(1)  162/    8AE9 : F7                          dc.b    $F7
(1)  162/    8AEA : 0104                        dc.b    $01,$04
(1)  162/    8AEC : E68A                                dc.w    z80_ptr(WALKIN_LOOP04)
(1)  163/    8AEE : (MACRO)             	smpsAlterPitch      $FE
(1)  163/    8AEE :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  163/    8AEE : FBFE                                dc.b    $FB,$FE
(1)  164/    8AF0 : (MACRO)             	smpsCall            Walkin_Call06
(1)  164/    8AF0 : F8                          dc.b    $F8
(1)  164/    8AF1 : 018B                                dc.w    z80_ptr(WALKIN_CALL06)
(1)  165/    8AF3 : (MACRO)             	smpsCall            Walkin_Call06
(1)  165/    8AF3 : F8                          dc.b    $F8
(1)  165/    8AF4 : 018B                                dc.w    z80_ptr(WALKIN_CALL06)
(1)  166/    8AF6 : (MACRO)             	smpsAlterPitch      $02
(1)  166/    8AF6 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  166/    8AF6 : FB02                                dc.b    $FB,$02
(1)  167/    8AF8 : (MACRO)             	smpsCall            Walkin_Call06
(1)  167/    8AF8 : F8                          dc.b    $F8
(1)  167/    8AF9 : 018B                                dc.w    z80_ptr(WALKIN_CALL06)
(1)  168/    8AFB : (MACRO)             	smpsCall            Walkin_Call06
(1)  168/    8AFB : F8                          dc.b    $F8
(1)  168/    8AFC : 018B                                dc.w    z80_ptr(WALKIN_CALL06)
(1)  169/    8AFE : (MACRO)             	smpsJump            Walkin_Loop04
(1)  169/    8AFE : F6                          dc.b    $F6
(1)  169/    8AFF : E68A                                dc.w    z80_ptr(WALKIN_LOOP04)
(1)  170/    8B01 :                     
(1)  171/    8B01 :                     Walkin_Call06:
(1)  172/    8B01 : AC04 80B3           	dc.b	nG3, $04, nRst, nD4
(1)  173/    8B05 : (MACRO)             	smpsLoop            $00, $08, Walkin_Call06
(1)  173/    8B05 : F7                          dc.b    $F7
(1)  173/    8B06 : 0008                        dc.b    $00,$08
(1)  173/    8B08 : 018B                                dc.w    z80_ptr(WALKIN_CALL06)
(1)  174/    8B0A : (MACRO)             	smpsReturn
(1)  174/    8B0A : F9                                  dc.b    $F9
(1)  175/    8B0B :                     
(1)  176/    8B0B :                     ; PSG3 Data
(1)  177/    8B0B :                     Walkin_PSG3:
(1)  178/    8B0B : (MACRO)             	smpsPSGform         $E7
(1)  178/    8B0B : F3E7                        dc.b    $F3,$E7
(1)  179/    8B0D : 8030                	dc.b	nRst, $30
(1)  180/    8B0F :                     
(1)  181/    8B0F :                     Walkin_Loop03:
(1)  182/    8B0F : (MACRO)             	smpsPSGvoice        sTone_02
(1)  182/    8B0F : F502                        dc.b    $F5,STONE_02
(1)  183/    8B11 : B10C 0C0C 0C0C 0C0C 	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $08, $04, (nMaxPSG2-$23)&$FF, $0C
             8B19 : 0804 B10C         
(1)  184/    8B1D : 0C0C 0C0C 0C08 04   	dc.b	$0C, $0C, $0C, $0C, $0C, $08, $04
(1)  185/    8B24 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  185/    8B24 : F505                        dc.b    $F5,STONE_05
(1)  186/    8B26 : 0C                  	dc.b	$0C
(1)  187/    8B27 : (MACRO)             	smpsLoop            $00, $04, Walkin_Loop03
(1)  187/    8B27 : F7                          dc.b    $F7
(1)  187/    8B28 : 0004                        dc.b    $00,$04
(1)  187/    8B2A : 0F8B                                dc.w    z80_ptr(WALKIN_LOOP03)
(1)  188/    8B2C : (MACRO)             	smpsJump            Walkin_Loop03
(1)  188/    8B2C : F6                          dc.b    $F6
(1)  188/    8B2D : 0F8B                                dc.w    z80_ptr(WALKIN_LOOP03)
(1)  189/    8B2F :                     
(1)  190/    8B2F :                     ; DAC Data
(1)  191/    8B2F :                     Walkin_DAC:
(1)  192/    8B2F : 810C 8282 8208 04   	dc.b	dSnareS3, $0C, dHighTom, dHighTom, dHighTom, $08, $04
(1)  193/    8B36 :                     
(1)  194/    8B36 :                     Walkin_Loop00:
(1)  195/    8B36 : (MACRO)             	smpsCall            Walkin_Call00
(1)  195/    8B36 : F8                          dc.b    $F8
(1)  195/    8B37 : 548B                                dc.w    z80_ptr(WALKIN_CALL00)
(1)  196/    8B39 : 8118 8281 8214 04   	dc.b	dSnareS3, $18, dHighTom, dSnareS3, dHighTom, $14, $04
(1)  197/    8B40 : (MACRO)             	smpsCall            Walkin_Call00
(1)  197/    8B40 : F8                          dc.b    $F8
(1)  197/    8B41 : 548B                                dc.w    z80_ptr(WALKIN_CALL00)
(1)  198/    8B43 : 8118 8281 8208 0408 	dc.b	dSnareS3, $18, dHighTom, dSnareS3, dHighTom, $08, $04, $08, $04
             8B4B : 04               
(1)  199/    8B4C : (MACRO)             	smpsLoop            $00, $02, Walkin_Loop00
(1)  199/    8B4C : F7                          dc.b    $F7
(1)  199/    8B4D : 0002                        dc.b    $00,$02
(1)  199/    8B4F : 368B                                dc.w    z80_ptr(WALKIN_LOOP00)
(1)  200/    8B51 : (MACRO)             	smpsJump            Walkin_Loop00
(1)  200/    8B51 : F6                          dc.b    $F6
(1)  200/    8B52 : 368B                                dc.w    z80_ptr(WALKIN_LOOP00)
(1)  201/    8B54 :                     
(1)  202/    8B54 :                     Walkin_Call00:
(1)  203/    8B54 : 8118 8281 8214 04   	dc.b	dSnareS3, $18, dHighTom, dSnareS3, dHighTom, $14, $04
(1)  204/    8B5B : (MACRO)             	smpsReturn
(1)  204/    8B5B : F9                                  dc.b    $F9
(1)  205/    8B5C :                     
(1)  206/    8B5C :                     Walkin_Voices:
(1)  207/    8B5C :                     ;	Voice $00
(1)  208/    8B5C :                     ;	$4B
(1)  209/    8B5C :                     ;	$12, $11, $04, $03, 	$3F, $9F, $9F, $9F, 	$02, $0C, $13, $07
(1)  210/    8B5C :                     ;	$12, $0A, $0B, $0A, 	$0F, $3F, $8F, $8F, 	$1B, $0F, $15, $80
(1)  211/    8B5C : (MACRO)             	smpsVcAlgorithm     $03
(1)  211/    8B5C : =$3                 vcAlgorithm set $03
(1)  212/    8B5C : (MACRO)             	smpsVcFeedback      $01
(1)  212/    8B5C : =$1                 vcFeedback set $01
(1)  213/    8B5C : (MACRO)             	smpsVcUnusedBits    $01
(1)  213/    8B5C : =$1                 vcUnusedBits set $01
(1)  213/    8B5C : =$0                 vcD1R1Unk set 0
(1)  213/    8B5C : =$0                 vcD1R2Unk set 0
(1)  213/    8B5C : =$0                 vcD1R3Unk set 0
(1)  213/    8B5C : =$0                 vcD1R4Unk set 0
(1)  214/    8B5C : (MACRO)             	smpsVcDetune        $00, $00, $01, $01
(1)  214/    8B5C : =$0                 vcDT1 set $00
(1)  214/    8B5C : =$0                 vcDT2 set $00
(1)  214/    8B5C : =$1                 vcDT3 set $01
(1)  214/    8B5C : =$1                 vcDT4 set $01
(1)  215/    8B5C : (MACRO)             	smpsVcCoarseFreq    $03, $04, $01, $02
(1)  215/    8B5C : =$3                 vcCF1 set $03
(1)  215/    8B5C : =$4                 vcCF2 set $04
(1)  215/    8B5C : =$1                 vcCF3 set $01
(1)  215/    8B5C : =$2                 vcCF4 set $02
(1)  216/    8B5C : (MACRO)             	smpsVcRateScale     $02, $02, $02, $00
(1)  216/    8B5C : =$2                 vcRS1 set $02
(1)  216/    8B5C : =$2                 vcRS2 set $02
(1)  216/    8B5C : =$2                 vcRS3 set $02
(1)  216/    8B5C : =$0                 vcRS4 set $00
(1)  217/    8B5C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $3F
(1)  217/    8B5C : =$1F                vcAR1 set $1F
(1)  217/    8B5C : =$1F                vcAR2 set $1F
(1)  217/    8B5C : =$1F                vcAR3 set $1F
(1)  217/    8B5C : =$3F                vcAR4 set $3F
(1)  218/    8B5C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  218/    8B5C : =$0                 vcAM1 set $00<<5
(1)  218/    8B5C : =$0                 vcAM2 set $00<<5
(1)  218/    8B5C : =$0                 vcAM3 set $00<<5
(1)  218/    8B5C : =$0                 vcAM4 set $00<<5
(1)  219/    8B5C : (MACRO)             	smpsVcDecayRate1    $07, $13, $0C, $02
(1)  219/    8B5C : =$7                 vcD1R1 set $07
(1)  219/    8B5C : =$13                vcD1R2 set $13
(1)  219/    8B5C : =$C                 vcD1R3 set $0C
(1)  219/    8B5C : =$2                 vcD1R4 set $02
(1)  220/    8B5C : (MACRO)             	smpsVcDecayRate2    $0A, $0B, $0A, $12
(1)  220/    8B5C : =$A                 vcD2R1 set $0A
(1)  220/    8B5C : =$B                 vcD2R2 set $0B
(1)  220/    8B5C : =$A                 vcD2R3 set $0A
(1)  220/    8B5C : =$12                vcD2R4 set $12
(1)  221/    8B5C : (MACRO)             	smpsVcDecayLevel    $08, $08, $03, $00
(1)  221/    8B5C : =$8                 vcDL1 set $08
(1)  221/    8B5C : =$8                 vcDL2 set $08
(1)  221/    8B5C : =$3                 vcDL3 set $03
(1)  221/    8B5C : =$0                 vcDL4 set $00
(1)  222/    8B5C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  222/    8B5C : =$F                 vcRR1 set $0F
(1)  222/    8B5C : =$F                 vcRR2 set $0F
(1)  222/    8B5C : =$F                 vcRR3 set $0F
(1)  222/    8B5C : =$F                 vcRR4 set $0F
(1)  223/    8B5C : (MACRO)             	smpsVcTotalLevel    $00, $15, $0F, $1B
(1)  223/    8B5C : =$0                 vcTL1 set $00
(1)  223/    8B5C : =$15                vcTL2 set $15
(1)  223/    8B5C : =$F                 vcTL3 set $0F
(1)  223/    8B5C : =$1B                vcTL4 set $1B
(1)  223/    8B5C : 4B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  223/    8B5D :                     ;   0     1     2     3     4     5     6     7
(1)  223/    8B5D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  223/    8B5D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  223/    8B5D : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  223/    8B5D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  223/    8B5D : =$80                vcTLMask1 set $80
(1)  223/    8B5D :                     
(1)  223/    8B5D :                     
(1)  223/    8B5D : 1211 0403                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  223/    8B61 : 3F9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  223/    8B65 : 020C 1307                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  223/    8B69 : 120A 0B0A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  223/    8B6D : 0F3F 8F8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  223/    8B71 : 1B0F 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  224/    8B75 :                     
(1)  225/    8B75 :                     ;	Voice $01
(1)  226/    8B75 :                     ;	$38
(1)  227/    8B75 :                     ;	$58, $54, $31, $31, 	$1A, $1A, $14, $13, 	$00, $00, $00, $00
(1)  228/    8B75 :                     ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$1C, $26, $20, $80
(1)  229/    8B75 : (MACRO)             	smpsVcAlgorithm     $00
(1)  229/    8B75 : =$0                 vcAlgorithm set $00
(1)  230/    8B75 : (MACRO)             	smpsVcFeedback      $07
(1)  230/    8B75 : =$7                 vcFeedback set $07
(1)  231/    8B75 : (MACRO)             	smpsVcUnusedBits    $00
(1)  231/    8B75 : =$0                 vcUnusedBits set $00
(1)  231/    8B75 : =$0                 vcD1R1Unk set 0
(1)  231/    8B75 : =$0                 vcD1R2Unk set 0
(1)  231/    8B75 : =$0                 vcD1R3Unk set 0
(1)  231/    8B75 : =$0                 vcD1R4Unk set 0
(1)  232/    8B75 : (MACRO)             	smpsVcDetune        $03, $03, $05, $05
(1)  232/    8B75 : =$3                 vcDT1 set $03
(1)  232/    8B75 : =$3                 vcDT2 set $03
(1)  232/    8B75 : =$5                 vcDT3 set $05
(1)  232/    8B75 : =$5                 vcDT4 set $05
(1)  233/    8B75 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $04, $08
(1)  233/    8B75 : =$1                 vcCF1 set $01
(1)  233/    8B75 : =$1                 vcCF2 set $01
(1)  233/    8B75 : =$4                 vcCF3 set $04
(1)  233/    8B75 : =$8                 vcCF4 set $08
(1)  234/    8B75 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  234/    8B75 : =$0                 vcRS1 set $00
(1)  234/    8B75 : =$0                 vcRS2 set $00
(1)  234/    8B75 : =$0                 vcRS3 set $00
(1)  234/    8B75 : =$0                 vcRS4 set $00
(1)  235/    8B75 : (MACRO)             	smpsVcAttackRate    $13, $14, $1A, $1A
(1)  235/    8B75 : =$13                vcAR1 set $13
(1)  235/    8B75 : =$14                vcAR2 set $14
(1)  235/    8B75 : =$1A                vcAR3 set $1A
(1)  235/    8B75 : =$1A                vcAR4 set $1A
(1)  236/    8B75 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  236/    8B75 : =$0                 vcAM1 set $00<<5
(1)  236/    8B75 : =$0                 vcAM2 set $00<<5
(1)  236/    8B75 : =$0                 vcAM3 set $00<<5
(1)  236/    8B75 : =$0                 vcAM4 set $00<<5
(1)  237/    8B75 : (MACRO)             	smpsVcDecayRate1    $00, $00, $00, $00
(1)  237/    8B75 : =$0                 vcD1R1 set $00
(1)  237/    8B75 : =$0                 vcD1R2 set $00
(1)  237/    8B75 : =$0                 vcD1R3 set $00
(1)  237/    8B75 : =$0                 vcD1R4 set $00
(1)  238/    8B75 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  238/    8B75 : =$0                 vcD2R1 set $00
(1)  238/    8B75 : =$0                 vcD2R2 set $00
(1)  238/    8B75 : =$0                 vcD2R3 set $00
(1)  238/    8B75 : =$0                 vcD2R4 set $00
(1)  239/    8B75 : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $00
(1)  239/    8B75 : =$0                 vcDL1 set $00
(1)  239/    8B75 : =$0                 vcDL2 set $00
(1)  239/    8B75 : =$0                 vcDL3 set $00
(1)  239/    8B75 : =$0                 vcDL4 set $00
(1)  240/    8B75 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  240/    8B75 : =$F                 vcRR1 set $0F
(1)  240/    8B75 : =$F                 vcRR2 set $0F
(1)  240/    8B75 : =$F                 vcRR3 set $0F
(1)  240/    8B75 : =$F                 vcRR4 set $0F
(1)  241/    8B75 : (MACRO)             	smpsVcTotalLevel    $00, $20, $26, $1C
(1)  241/    8B75 : =$0                 vcTL1 set $00
(1)  241/    8B75 : =$20                vcTL2 set $20
(1)  241/    8B75 : =$26                vcTL3 set $26
(1)  241/    8B75 : =$1C                vcTL4 set $1C
(1)  241/    8B75 : 38                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  241/    8B76 :                     ;   0     1     2     3     4     5     6     7
(1)  241/    8B76 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  241/    8B76 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  241/    8B76 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  241/    8B76 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  241/    8B76 : =$80                vcTLMask1 set $80
(1)  241/    8B76 :                     
(1)  241/    8B76 :                     
(1)  241/    8B76 : 5854 3131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  241/    8B7A : 1A1A 1413                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  241/    8B7E : 0000 0000                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  241/    8B82 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  241/    8B86 : 0F0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  241/    8B8A : 1C26 2080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  242/    8B8E :                     
(1)  243/    8B8E :                     ;	Voice $02
(1)  244/    8B8E :                     ;	$97
(1)  245/    8B8E :                     ;	$66, $31, $50, $22, 	$1C, $98, $1F, $1F, 	$12, $0F, $06, $0C
(1)  246/    8B8E :                     ;	$00, $1A, $10, $04, 	$0F, $FF, $FF, $FF, 	$80, $80, $80, $80
(1)  247/    8B8E : (MACRO)             	smpsVcAlgorithm     $07
(1)  247/    8B8E : =$7                 vcAlgorithm set $07
(1)  248/    8B8E : (MACRO)             	smpsVcFeedback      $02
(1)  248/    8B8E : =$2                 vcFeedback set $02
(1)  249/    8B8E : (MACRO)             	smpsVcUnusedBits    $02
(1)  249/    8B8E : =$2                 vcUnusedBits set $02
(1)  249/    8B8E : =$0                 vcD1R1Unk set 0
(1)  249/    8B8E : =$0                 vcD1R2Unk set 0
(1)  249/    8B8E : =$0                 vcD1R3Unk set 0
(1)  249/    8B8E : =$0                 vcD1R4Unk set 0
(1)  250/    8B8E : (MACRO)             	smpsVcDetune        $02, $05, $03, $06
(1)  250/    8B8E : =$2                 vcDT1 set $02
(1)  250/    8B8E : =$5                 vcDT2 set $05
(1)  250/    8B8E : =$3                 vcDT3 set $03
(1)  250/    8B8E : =$6                 vcDT4 set $06
(1)  251/    8B8E : (MACRO)             	smpsVcCoarseFreq    $02, $00, $01, $06
(1)  251/    8B8E : =$2                 vcCF1 set $02
(1)  251/    8B8E : =$0                 vcCF2 set $00
(1)  251/    8B8E : =$1                 vcCF3 set $01
(1)  251/    8B8E : =$6                 vcCF4 set $06
(1)  252/    8B8E : (MACRO)             	smpsVcRateScale     $00, $00, $02, $00
(1)  252/    8B8E : =$0                 vcRS1 set $00
(1)  252/    8B8E : =$0                 vcRS2 set $00
(1)  252/    8B8E : =$2                 vcRS3 set $02
(1)  252/    8B8E : =$0                 vcRS4 set $00
(1)  253/    8B8E : (MACRO)             	smpsVcAttackRate    $1F, $1F, $18, $1C
(1)  253/    8B8E : =$1F                vcAR1 set $1F
(1)  253/    8B8E : =$1F                vcAR2 set $1F
(1)  253/    8B8E : =$18                vcAR3 set $18
(1)  253/    8B8E : =$1C                vcAR4 set $1C
(1)  254/    8B8E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  254/    8B8E : =$0                 vcAM1 set $00<<5
(1)  254/    8B8E : =$0                 vcAM2 set $00<<5
(1)  254/    8B8E : =$0                 vcAM3 set $00<<5
(1)  254/    8B8E : =$0                 vcAM4 set $00<<5
(1)  255/    8B8E : (MACRO)             	smpsVcDecayRate1    $0C, $06, $0F, $12
(1)  255/    8B8E : =$C                 vcD1R1 set $0C
(1)  255/    8B8E : =$6                 vcD1R2 set $06
(1)  255/    8B8E : =$F                 vcD1R3 set $0F
(1)  255/    8B8E : =$12                vcD1R4 set $12
(1)  256/    8B8E : (MACRO)             	smpsVcDecayRate2    $04, $10, $1A, $00
(1)  256/    8B8E : =$4                 vcD2R1 set $04
(1)  256/    8B8E : =$10                vcD2R2 set $10
(1)  256/    8B8E : =$1A                vcD2R3 set $1A
(1)  256/    8B8E : =$0                 vcD2R4 set $00
(1)  257/    8B8E : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $00
(1)  257/    8B8E : =$F                 vcDL1 set $0F
(1)  257/    8B8E : =$F                 vcDL2 set $0F
(1)  257/    8B8E : =$F                 vcDL3 set $0F
(1)  257/    8B8E : =$0                 vcDL4 set $00
(1)  258/    8B8E : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  258/    8B8E : =$F                 vcRR1 set $0F
(1)  258/    8B8E : =$F                 vcRR2 set $0F
(1)  258/    8B8E : =$F                 vcRR3 set $0F
(1)  258/    8B8E : =$F                 vcRR4 set $0F
(1)  259/    8B8E : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $00
(1)  259/    8B8E : =$0                 vcTL1 set $00
(1)  259/    8B8E : =$0                 vcTL2 set $00
(1)  259/    8B8E : =$0                 vcTL3 set $00
(1)  259/    8B8E : =$0                 vcTL4 set $00
(1)  259/    8B8E : 97                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  259/    8B8F :                     ;   0     1     2     3     4     5     6     7
(1)  259/    8B8F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  259/    8B8F : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  259/    8B8F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  259/    8B8F : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  259/    8B8F : =$80                vcTLMask1 set $80
(1)  259/    8B8F :                     
(1)  259/    8B8F :                     
(1)  259/    8B8F : 6631 5022                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  259/    8B93 : 1C98 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  259/    8B97 : 120F 060C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  259/    8B9B : 001A 1004                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  259/    8B9F : 0FFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  259/    8BA3 : 8080 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  260/    8BA7 :                     
(1)  261/    8BA7 :                     ;	Voice $03
(1)  262/    8BA7 :                     ;	$3B
(1)  263/    8BA7 :                     ;	$32, $36, $31, $04, 	$DF, $1F, $1F, $DF, 	$0D, $0D, $02, $09
(1)  264/    8BA7 :                     ;	$0E, $0A, $14, $F0, 	$FF, $0F, $4F, $FF, 	$28, $18, $0F, $80
(1)  265/    8BA7 : (MACRO)             	smpsVcAlgorithm     $03
(1)  265/    8BA7 : =$3                 vcAlgorithm set $03
(1)  266/    8BA7 : (MACRO)             	smpsVcFeedback      $07
(1)  266/    8BA7 : =$7                 vcFeedback set $07
(1)  267/    8BA7 : (MACRO)             	smpsVcUnusedBits    $00
(1)  267/    8BA7 : =$0                 vcUnusedBits set $00
(1)  267/    8BA7 : =$0                 vcD1R1Unk set 0
(1)  267/    8BA7 : =$0                 vcD1R2Unk set 0
(1)  267/    8BA7 : =$0                 vcD1R3Unk set 0
(1)  267/    8BA7 : =$0                 vcD1R4Unk set 0
(1)  268/    8BA7 : (MACRO)             	smpsVcDetune        $00, $03, $03, $03
(1)  268/    8BA7 : =$0                 vcDT1 set $00
(1)  268/    8BA7 : =$3                 vcDT2 set $03
(1)  268/    8BA7 : =$3                 vcDT3 set $03
(1)  268/    8BA7 : =$3                 vcDT4 set $03
(1)  269/    8BA7 : (MACRO)             	smpsVcCoarseFreq    $04, $01, $06, $02
(1)  269/    8BA7 : =$4                 vcCF1 set $04
(1)  269/    8BA7 : =$1                 vcCF2 set $01
(1)  269/    8BA7 : =$6                 vcCF3 set $06
(1)  269/    8BA7 : =$2                 vcCF4 set $02
(1)  270/    8BA7 : (MACRO)             	smpsVcRateScale     $03, $00, $00, $03
(1)  270/    8BA7 : =$3                 vcRS1 set $03
(1)  270/    8BA7 : =$0                 vcRS2 set $00
(1)  270/    8BA7 : =$0                 vcRS3 set $00
(1)  270/    8BA7 : =$3                 vcRS4 set $03
(1)  271/    8BA7 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  271/    8BA7 : =$1F                vcAR1 set $1F
(1)  271/    8BA7 : =$1F                vcAR2 set $1F
(1)  271/    8BA7 : =$1F                vcAR3 set $1F
(1)  271/    8BA7 : =$1F                vcAR4 set $1F
(1)  272/    8BA7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  272/    8BA7 : =$0                 vcAM1 set $00<<5
(1)  272/    8BA7 : =$0                 vcAM2 set $00<<5
(1)  272/    8BA7 : =$0                 vcAM3 set $00<<5
(1)  272/    8BA7 : =$0                 vcAM4 set $00<<5
(1)  273/    8BA7 : (MACRO)             	smpsVcDecayRate1    $09, $02, $0D, $0D
(1)  273/    8BA7 : =$9                 vcD1R1 set $09
(1)  273/    8BA7 : =$2                 vcD1R2 set $02
(1)  273/    8BA7 : =$D                 vcD1R3 set $0D
(1)  273/    8BA7 : =$D                 vcD1R4 set $0D
(1)  274/    8BA7 : (MACRO)             	smpsVcDecayRate2    $F0, $14, $0A, $0E
(1)  274/    8BA7 : =$F0                vcD2R1 set $F0
(1)  274/    8BA7 : =$14                vcD2R2 set $14
(1)  274/    8BA7 : =$A                 vcD2R3 set $0A
(1)  274/    8BA7 : =$E                 vcD2R4 set $0E
(1)  275/    8BA7 : (MACRO)             	smpsVcDecayLevel    $0F, $04, $00, $0F
(1)  275/    8BA7 : =$F                 vcDL1 set $0F
(1)  275/    8BA7 : =$4                 vcDL2 set $04
(1)  275/    8BA7 : =$0                 vcDL3 set $00
(1)  275/    8BA7 : =$F                 vcDL4 set $0F
(1)  276/    8BA7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  276/    8BA7 : =$F                 vcRR1 set $0F
(1)  276/    8BA7 : =$F                 vcRR2 set $0F
(1)  276/    8BA7 : =$F                 vcRR3 set $0F
(1)  276/    8BA7 : =$F                 vcRR4 set $0F
(1)  277/    8BA7 : (MACRO)             	smpsVcTotalLevel    $00, $0F, $18, $28
(1)  277/    8BA7 : =$0                 vcTL1 set $00
(1)  277/    8BA7 : =$F                 vcTL2 set $0F
(1)  277/    8BA7 : =$18                vcTL3 set $18
(1)  277/    8BA7 : =$28                vcTL4 set $28
(1)  277/    8BA7 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  277/    8BA8 :                     ;   0     1     2     3     4     5     6     7
(1)  277/    8BA8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  277/    8BA8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  277/    8BA8 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  277/    8BA8 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  277/    8BA8 : =$80                vcTLMask1 set $80
(1)  277/    8BA8 :                     
(1)  277/    8BA8 :                     
(1)  277/    8BA8 : 3236 3104                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  277/    8BAC : DF1F 1FDF                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  277/    8BB0 : 0D0D 0209                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  277/    8BB4 : 0E0A 14F0                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  277/    8BB8 : FF0F 4FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  277/    8BBC : 2818 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  278/    8BC0 :                     
(1)  279/    8BC0 :                     
   25/    8BC0 :                        		include		"Music/HyperHyper.asm"
(1)    1/    8BC0 :                     HyperHyper_Header:
(1)    2/    8BC0 : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    8BC0 :                     
(1)    2/    8BC0 : =$3                 SourceDriver set 3
(1)    2/    8BC0 :                     
(1)    2/    8BC0 : =$0                 SourceSMPS2ASM set 0
(1)    2/    8BC0 :                     
(1)    2/    8BC0 : =$8BC0              songStart set *
(1)    2/    8BC0 :                     
(1)    2/    8BC0 :                     
(1)    3/    8BC0 : (MACRO)             	smpsHeaderVoice     HyperHyper_Voices
(1)    3/    8BC0 : 9191                                dc.w    z80_ptr(HYPERHYPER_VOICES)
(1)    4/    8BC2 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    8BC2 : 0603                        dc.b    $06,$03
(1)    5/    8BC4 : (MACRO)             	smpsHeaderTempo     $01, $26
(1)    5/    8BC4 : 01                          dc.b    $01
(1)    5/    8BC5 :  (MACRO-2)                  convertMainTempoMod $26
(1)    5/    8BC5 : 26                                  dc.b    $26
(1)    6/    8BC6 :                     
(1)    7/    8BC6 : (MACRO)             	smpsHeaderDAC       HyperHyper_DAC
(1)    7/    8BC6 :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_DAC
(1)    7/    8BC6 : 1791                                dc.w    z80_ptr(HYPERHYPER_DAC)
(1)    7/    8BC8 : 0000                                dc.w    $00
(1)    8/    8BCA : (MACRO)             	smpsHeaderFM        HyperHyper_FM1,	$00, $10
(1)    8/    8BCA :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_FM1
(1)    8/    8BCA : F08B                                dc.w    z80_ptr(HYPERHYPER_FM1)
(1)    8/    8BCC : 0010                        dc.b    $00,$10
(1)    9/    8BCE : (MACRO)             	smpsHeaderFM        HyperHyper_FM2,	$00, $16
(1)    9/    8BCE :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_FM2
(1)    9/    8BCE : 568C                                dc.w    z80_ptr(HYPERHYPER_FM2)
(1)    9/    8BD0 : 0016                        dc.b    $00,$16
(1)   10/    8BD2 : (MACRO)             	smpsHeaderFM        HyperHyper_FM3,	$00, $16
(1)   10/    8BD2 :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_FM3
(1)   10/    8BD2 : 1A8D                                dc.w    z80_ptr(HYPERHYPER_FM3)
(1)   10/    8BD4 : 0016                        dc.b    $00,$16
(1)   11/    8BD6 : (MACRO)             	smpsHeaderFM        HyperHyper_FM4,	$00, $16
(1)   11/    8BD6 :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_FM4
(1)   11/    8BD6 : 1B8E                                dc.w    z80_ptr(HYPERHYPER_FM4)
(1)   11/    8BD8 : 0016                        dc.b    $00,$16
(1)   12/    8BDA : (MACRO)             	smpsHeaderFM        HyperHyper_FM5,	$00, $10
(1)   12/    8BDA :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_FM5
(1)   12/    8BDA : 188F                                dc.w    z80_ptr(HYPERHYPER_FM5)
(1)   12/    8BDC : 0010                        dc.b    $00,$10
(1)   13/    8BDE : (MACRO)             	smpsHeaderPSG       HyperHyper_PSG1,	$00, $00, $00, $00
(1)   13/    8BDE :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_PSG1
(1)   13/    8BDE : 6E8F                                dc.w    z80_ptr(HYPERHYPER_PSG1)
(1)   13/    8BE0 :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/    8BE0 : 00                                  dc.b    $00
(1)   13/    8BE1 : 0000 00                     dc.b    $00,$00,$00
(1)   14/    8BE4 : (MACRO)             	smpsHeaderPSG       HyperHyper_PSG2,	$00, $04, $00, $00
(1)   14/    8BE4 :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_PSG2
(1)   14/    8BE4 : 2090                                dc.w    z80_ptr(HYPERHYPER_PSG2)
(1)   14/    8BE6 :  (MACRO-2)                  PSGPitchConvert $00
(1)   14/    8BE6 : 00                                  dc.b    $00
(1)   14/    8BE7 : 0400 00                     dc.b    $04,$00,$00
(1)   15/    8BEA : (MACRO)             	smpsHeaderPSG       HyperHyper_PSG3,	$23, $00, $00, $00
(1)   15/    8BEA :  (MACRO-2)                  CheckedChannelPointer HYPERHYPER_PSG3
(1)   15/    8BEA : A790                                dc.w    z80_ptr(HYPERHYPER_PSG3)
(1)   15/    8BEC :  (MACRO-2)                  PSGPitchConvert $23
(1)   15/    8BEC : 23                                  dc.b    $23
(1)   15/    8BED : 0000 00                     dc.b    $00,$00,$00
(1)   16/    8BF0 :                     
(1)   17/    8BF0 :                     ; FM1 Data
(1)   18/    8BF0 :                     HyperHyper_FM1:
(1)   19/    8BF0 : (MACRO)             	smpsSetvoice        $00
(1)   19/    8BF0 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    8BF0 : EF00                                dc.b    $EF,$00
(1)   20/    8BF2 : 8060 8080 8006 A080 	dc.b	nRst, $60, nRst, nRst, nRst, $06, nG2, nRst, nG2, nRst, $18, nRst
             8BFA : A080 1880         
(1)   21/    8BFE : 06A0 9E9B 8094 8094 	dc.b	$06, nG2, nF2, nD2, nRst, nG1, nRst, nG1
(1)   22/    8C06 : (MACRO)             	smpsCall            HyperHyper_Call0B
(1)   22/    8C06 : F8                          dc.b    $F8
(1)   22/    8C07 : 448C                                dc.w    z80_ptr(HYPERHYPER_CALL0B)
(1)   23/    8C09 :                     
(1)   24/    8C09 :                     HyperHyper_Loop06:
(1)   25/    8C09 : (MACRO)             	smpsCall            HyperHyper_Call0C
(1)   25/    8C09 : F8                          dc.b    $F8
(1)   25/    8C0A : 398C                                dc.w    z80_ptr(HYPERHYPER_CALL0C)
(1)   26/    8C0C : 8030                	dc.b	nRst, $30
(1)   27/    8C0E : (MACRO)             	smpsCall            HyperHyper_Call0C
(1)   27/    8C0E : F8                          dc.b    $F8
(1)   27/    8C0F : 398C                                dc.w    z80_ptr(HYPERHYPER_CALL0C)
(1)   28/    8C11 : 800C 9080 0692 12   	dc.b	nRst, $0C, nEb1, nRst, $06, nF1, $12
(1)   29/    8C18 : (MACRO)             	smpsCall            HyperHyper_Call0B
(1)   29/    8C18 : F8                          dc.b    $F8
(1)   29/    8C19 : 448C                                dc.w    z80_ptr(HYPERHYPER_CALL0B)
(1)   30/    8C1B : (MACRO)             	smpsAlterPitch      $FE
(1)   30/    8C1B :  (MACRO-2)                  smpsChangeTransposition $FE
(1)   30/    8C1B : FBFE                                dc.b    $FB,$FE
(1)   31/    8C1D : (MACRO)             	smpsCall            HyperHyper_Call0C
(1)   31/    8C1D : F8                          dc.b    $F8
(1)   31/    8C1E : 398C                                dc.w    z80_ptr(HYPERHYPER_CALL0C)
(1)   32/    8C20 : 8030                	dc.b	nRst, $30
(1)   33/    8C22 : (MACRO)             	smpsCall            HyperHyper_Call0C
(1)   33/    8C22 : F8                          dc.b    $F8
(1)   33/    8C23 : 398C                                dc.w    z80_ptr(HYPERHYPER_CALL0C)
(1)   34/    8C25 : (MACRO)             	smpsAlterPitch      $02
(1)   34/    8C25 :  (MACRO-2)                  smpsChangeTransposition $02
(1)   34/    8C25 : FB02                                dc.b    $FB,$02
(1)   35/    8C27 : 800C 9580 0697 12   	dc.b	nRst, $0C, nAb1, nRst, $06, nBb1, $12
(1)   36/    8C2E : (MACRO)             	smpsCall            HyperHyper_Call0B
(1)   36/    8C2E : F8                          dc.b    $F8
(1)   36/    8C2F : 448C                                dc.w    z80_ptr(HYPERHYPER_CALL0B)
(1)   37/    8C31 : (MACRO)             	smpsLoop            $00, $02, HyperHyper_Loop06
(1)   37/    8C31 : F7                          dc.b    $F7
(1)   37/    8C32 : 0002                        dc.b    $00,$02
(1)   37/    8C34 : 098C                                dc.w    z80_ptr(HYPERHYPER_LOOP06)
(1)   38/    8C36 : (MACRO)             	smpsJump            HyperHyper_Loop06
(1)   38/    8C36 : F6                          dc.b    $F6
(1)   38/    8C37 : 098C                                dc.w    z80_ptr(HYPERHYPER_LOOP06)
(1)   39/    8C39 :                     
(1)   40/    8C39 :                     HyperHyper_Call0C:
(1)   41/    8C39 : 940C 8006 920C 8006 	dc.b	nG1, $0C, nRst, $06, nF1, $0C, nRst, $06, nG1, $0C
             8C41 : 940C               
(1)   42/    8C43 : (MACRO)             	smpsReturn
(1)   42/    8C43 : F9                                  dc.b    $F9
(1)   43/    8C44 :                     
(1)   44/    8C44 :                     HyperHyper_Call0B:
(1)   45/    8C44 : (MACRO)             	smpsCall            HyperHyper_Call0C
(1)   45/    8C44 : F8                          dc.b    $F8
(1)   45/    8C45 : 398C                                dc.w    z80_ptr(HYPERHYPER_CALL0C)
(1)   46/    8C47 : 8030                	dc.b	nRst, $30
(1)   47/    8C49 : (MACRO)             	smpsCall            HyperHyper_Call0C
(1)   47/    8C49 : F8                          dc.b    $F8
(1)   47/    8C4A : 398C                                dc.w    z80_ptr(HYPERHYPER_CALL0C)
(1)   48/    8C4C : 8006 A9A5 A09E 9D99 	dc.b	nRst, $06, nE3, nC3, nG2, nF2, nE2, nC2, nG1
             8C54 : 94               
(1)   49/    8C55 : (MACRO)             	smpsReturn
(1)   49/    8C55 : F9                                  dc.b    $F9
(1)   50/    8C56 :                     
(1)   51/    8C56 :                     ; FM2 Data
(1)   52/    8C56 :                     HyperHyper_FM2:
(1)   53/    8C56 : (MACRO)             	smpsSetvoice        $01
(1)   53/    8C56 :  (MACRO-2)                  smpsFMvoice $01
(1)   53/    8C56 : EF01                                dc.b    $EF,$01
(1)   54/    8C58 : 8060 8080 8080 8030 	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst, $30
(1)   55/    8C60 : (MACRO)             	smpsCall            HyperHyper_Call08
(1)   55/    8C60 : F8                          dc.b    $F8
(1)   55/    8C61 : EC8C                                dc.w    z80_ptr(HYPERHYPER_CALL08)
(1)   56/    8C63 :                     
(1)   57/    8C63 :                     HyperHyper_Jump02:
(1)   58/    8C63 : (MACRO)             	smpsCall            HyperHyper_Call09
(1)   58/    8C63 : F8                          dc.b    $F8
(1)   58/    8C64 : FA8C                                dc.w    z80_ptr(HYPERHYPER_CALL09)
(1)   59/    8C66 : B312 B1B3 0C        	dc.b	nD4, $12, nC4, nD4, $0C
(1)   60/    8C6B : (MACRO)             	smpsFMAlterVol      $0A
(1)   60/    8C6B : E60A                                dc.b    $E6,$0A
(1)   61/    8C6D : (MACRO)             	smpsPan             panLeft, $00
(1)   61/    8C6D : =$0                 panNone set $00
(1)   61/    8C6D : =$40                panRight set $40
(1)   61/    8C6D : =$80                panLeft set $80
(1)   61/    8C6D : =$C0                panCentre set $C0
(1)   61/    8C6D : =$C0                panCenter set $C0 ; silly Americans :U
(1)   61/    8C6D : E080                        dc.b $E0,PANLEFT+$00
(1)   62/    8C6F : B3                  	dc.b	nD4
(1)   63/    8C70 : (MACRO)             	smpsFMAlterVol      $F6
(1)   63/    8C70 : E6F6                                dc.b    $E6,$F6
(1)   64/    8C72 : (MACRO)             	smpsPan             panCenter, $00
(1)   64/    8C72 : =$0                 panNone set $00
(1)   64/    8C72 : =$40                panRight set $40
(1)   64/    8C72 : =$80                panLeft set $80
(1)   64/    8C72 : =$C0                panCentre set $C0
(1)   64/    8C72 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   64/    8C72 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   65/    8C74 : AF                  	dc.b	nBb3
(1)   66/    8C75 : (MACRO)             	smpsFMAlterVol      $0A
(1)   66/    8C75 : E60A                                dc.b    $E6,$0A
(1)   67/    8C77 : (MACRO)             	smpsPan             panLeft, $00
(1)   67/    8C77 : =$0                 panNone set $00
(1)   67/    8C77 : =$40                panRight set $40
(1)   67/    8C77 : =$80                panLeft set $80
(1)   67/    8C77 : =$C0                panCentre set $C0
(1)   67/    8C77 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   67/    8C77 : E080                        dc.b $E0,PANLEFT+$00
(1)   68/    8C79 : AF06                	dc.b	nBb3, $06
(1)   69/    8C7B : (MACRO)             	smpsFMAlterVol      $F6
(1)   69/    8C7B : E6F6                                dc.b    $E6,$F6
(1)   70/    8C7D : (MACRO)             	smpsPan             panCenter, $00
(1)   70/    8C7D : =$0                 panNone set $00
(1)   70/    8C7D : =$40                panRight set $40
(1)   70/    8C7D : =$80                panLeft set $80
(1)   70/    8C7D : =$C0                panCentre set $C0
(1)   70/    8C7D : =$C0                panCenter set $C0 ; silly Americans :U
(1)   70/    8C7D : E0C0                        dc.b $E0,PANCENTER+$00
(1)   71/    8C7F : B112                	dc.b	nC4, $12
(1)   72/    8C81 : (MACRO)             	smpsCall            HyperHyper_Call0A
(1)   72/    8C81 : F8                          dc.b    $F8
(1)   72/    8C82 : 058D                                dc.w    z80_ptr(HYPERHYPER_CALL0A)
(1)   73/    8C84 : (MACRO)             	smpsAlterPitch      $FE
(1)   73/    8C84 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)   73/    8C84 : FBFE                                dc.b    $FB,$FE
(1)   74/    8C86 : (MACRO)             	smpsCall            HyperHyper_Call09
(1)   74/    8C86 : F8                          dc.b    $F8
(1)   74/    8C87 : FA8C                                dc.w    z80_ptr(HYPERHYPER_CALL09)
(1)   75/    8C89 : (MACRO)             	smpsAlterPitch      $02
(1)   75/    8C89 :  (MACRO-2)                  smpsChangeTransposition $02
(1)   75/    8C89 : FB02                                dc.b    $FB,$02
(1)   76/    8C8B : B112 AFB1 0C        	dc.b	nC4, $12, nBb3, nC4, $0C
(1)   77/    8C90 : (MACRO)             	smpsFMAlterVol      $0A
(1)   77/    8C90 : E60A                                dc.b    $E6,$0A
(1)   78/    8C92 : (MACRO)             	smpsPan             panLeft, $00
(1)   78/    8C92 : =$0                 panNone set $00
(1)   78/    8C92 : =$40                panRight set $40
(1)   78/    8C92 : =$80                panLeft set $80
(1)   78/    8C92 : =$C0                panCentre set $C0
(1)   78/    8C92 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   78/    8C92 : E080                        dc.b $E0,PANLEFT+$00
(1)   79/    8C94 : 0C                  	dc.b	$0C
(1)   80/    8C95 : (MACRO)             	smpsFMAlterVol      $F6
(1)   80/    8C95 : E6F6                                dc.b    $E6,$F6
(1)   81/    8C97 : (MACRO)             	smpsPan             panCenter, $00
(1)   81/    8C97 : =$0                 panNone set $00
(1)   81/    8C97 : =$40                panRight set $40
(1)   81/    8C97 : =$80                panLeft set $80
(1)   81/    8C97 : =$C0                panCentre set $C0
(1)   81/    8C97 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   81/    8C97 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   82/    8C99 : B4                  	dc.b	nEb4
(1)   83/    8C9A : (MACRO)             	smpsFMAlterVol      $0A
(1)   83/    8C9A : E60A                                dc.b    $E6,$0A
(1)   84/    8C9C : (MACRO)             	smpsPan             panLeft, $00
(1)   84/    8C9C : =$0                 panNone set $00
(1)   84/    8C9C : =$40                panRight set $40
(1)   84/    8C9C : =$80                panLeft set $80
(1)   84/    8C9C : =$C0                panCentre set $C0
(1)   84/    8C9C : =$C0                panCenter set $C0 ; silly Americans :U
(1)   84/    8C9C : E080                        dc.b $E0,PANLEFT+$00
(1)   85/    8C9E : B406                	dc.b	nEb4, $06
(1)   86/    8CA0 : (MACRO)             	smpsFMAlterVol      $F6
(1)   86/    8CA0 : E6F6                                dc.b    $E6,$F6
(1)   87/    8CA2 : (MACRO)             	smpsPan             panCenter, $00
(1)   87/    8CA2 : =$0                 panNone set $00
(1)   87/    8CA2 : =$40                panRight set $40
(1)   87/    8CA2 : =$80                panLeft set $80
(1)   87/    8CA2 : =$C0                panCentre set $C0
(1)   87/    8CA2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   87/    8CA2 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   88/    8CA4 : B612                	dc.b	nF4, $12
(1)   89/    8CA6 : (MACRO)             	smpsCall            HyperHyper_Call0A
(1)   89/    8CA6 : F8                          dc.b    $F8
(1)   89/    8CA7 : 058D                                dc.w    z80_ptr(HYPERHYPER_CALL0A)
(1)   90/    8CA9 : (MACRO)             	smpsCall            HyperHyper_Call09
(1)   90/    8CA9 : F8                          dc.b    $F8
(1)   90/    8CAA : FA8C                                dc.w    z80_ptr(HYPERHYPER_CALL09)
(1)   91/    8CAC : B312 B1B3 0C        	dc.b	nD4, $12, nC4, nD4, $0C
(1)   92/    8CB1 : (MACRO)             	smpsFMAlterVol      $0A
(1)   92/    8CB1 : E60A                                dc.b    $E6,$0A
(1)   93/    8CB3 : (MACRO)             	smpsPan             panLeft, $00
(1)   93/    8CB3 : =$0                 panNone set $00
(1)   93/    8CB3 : =$40                panRight set $40
(1)   93/    8CB3 : =$80                panLeft set $80
(1)   93/    8CB3 : =$C0                panCentre set $C0
(1)   93/    8CB3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   93/    8CB3 : E080                        dc.b $E0,PANLEFT+$00
(1)   94/    8CB5 : B3                  	dc.b	nD4
(1)   95/    8CB6 : (MACRO)             	smpsFMAlterVol      $F6
(1)   95/    8CB6 : E6F6                                dc.b    $E6,$F6
(1)   96/    8CB8 : (MACRO)             	smpsPan             panCenter, $00
(1)   96/    8CB8 : =$0                 panNone set $00
(1)   96/    8CB8 : =$40                panRight set $40
(1)   96/    8CB8 : =$80                panLeft set $80
(1)   96/    8CB8 : =$C0                panCentre set $C0
(1)   96/    8CB8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   96/    8CB8 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   97/    8CBA : AF                  	dc.b	nBb3
(1)   98/    8CBB : (MACRO)             	smpsFMAlterVol      $0A
(1)   98/    8CBB : E60A                                dc.b    $E6,$0A
(1)   99/    8CBD : (MACRO)             	smpsPan             panLeft, $00
(1)   99/    8CBD : =$0                 panNone set $00
(1)   99/    8CBD : =$40                panRight set $40
(1)   99/    8CBD : =$80                panLeft set $80
(1)   99/    8CBD : =$C0                panCentre set $C0
(1)   99/    8CBD : =$C0                panCenter set $C0 ; silly Americans :U
(1)   99/    8CBD : E080                        dc.b $E0,PANLEFT+$00
(1)  100/    8CBF : AF06                	dc.b	nBb3, $06
(1)  101/    8CC1 : (MACRO)             	smpsFMAlterVol      $F6
(1)  101/    8CC1 : E6F6                                dc.b    $E6,$F6
(1)  102/    8CC3 : (MACRO)             	smpsPan             panCenter, $00
(1)  102/    8CC3 : =$0                 panNone set $00
(1)  102/    8CC3 : =$40                panRight set $40
(1)  102/    8CC3 : =$80                panLeft set $80
(1)  102/    8CC3 : =$C0                panCentre set $C0
(1)  102/    8CC3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  102/    8CC3 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  103/    8CC5 : B112                	dc.b	nC4, $12
(1)  104/    8CC7 : (MACRO)             	smpsCall            HyperHyper_Call0A
(1)  104/    8CC7 : F8                          dc.b    $F8
(1)  104/    8CC8 : 058D                                dc.w    z80_ptr(HYPERHYPER_CALL0A)
(1)  105/    8CCA : (MACRO)             	smpsAlterPitch      $FE
(1)  105/    8CCA :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  105/    8CCA : FBFE                                dc.b    $FB,$FE
(1)  106/    8CCC : (MACRO)             	smpsCall            HyperHyper_Call09
(1)  106/    8CCC : F8                          dc.b    $F8
(1)  106/    8CCD : FA8C                                dc.w    z80_ptr(HYPERHYPER_CALL09)
(1)  107/    8CCF : (MACRO)             	smpsAlterPitch      $02
(1)  107/    8CCF :  (MACRO-2)                  smpsChangeTransposition $02
(1)  107/    8CCF : FB02                                dc.b    $FB,$02
(1)  108/    8CD1 : B112 AFB1 0680 12B4 	dc.b	nC4, $12, nBb3, nC4, $06, nRst, $12, nEb4, $0C
             8CD9 : 0C               
(1)  109/    8CDA : (MACRO)             	smpsFMAlterVol      $0A
(1)  109/    8CDA : E60A                                dc.b    $E6,$0A
(1)  110/    8CDC : (MACRO)             	smpsPan             panLeft, $00
(1)  110/    8CDC : =$0                 panNone set $00
(1)  110/    8CDC : =$40                panRight set $40
(1)  110/    8CDC : =$80                panLeft set $80
(1)  110/    8CDC : =$C0                panCentre set $C0
(1)  110/    8CDC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  110/    8CDC : E080                        dc.b $E0,PANLEFT+$00
(1)  111/    8CDE : B406                	dc.b	nEb4, $06
(1)  112/    8CE0 : (MACRO)             	smpsFMAlterVol      $F6
(1)  112/    8CE0 : E6F6                                dc.b    $E6,$F6
(1)  113/    8CE2 : (MACRO)             	smpsPan             panCenter, $00
(1)  113/    8CE2 : =$0                 panNone set $00
(1)  113/    8CE2 : =$40                panRight set $40
(1)  113/    8CE2 : =$80                panLeft set $80
(1)  113/    8CE2 : =$C0                panCentre set $C0
(1)  113/    8CE2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  113/    8CE2 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  114/    8CE4 : B612                	dc.b	nF4, $12
(1)  115/    8CE6 : (MACRO)             	smpsCall            HyperHyper_Call0A
(1)  115/    8CE6 : F8                          dc.b    $F8
(1)  115/    8CE7 : 058D                                dc.w    z80_ptr(HYPERHYPER_CALL0A)
(1)  116/    8CE9 : (MACRO)             	smpsJump            HyperHyper_Jump02
(1)  116/    8CE9 : F6                          dc.b    $F6
(1)  116/    8CEA : 638C                                dc.w    z80_ptr(HYPERHYPER_JUMP02)
(1)  117/    8CEC :                     
(1)  118/    8CEC :                     HyperHyper_Call08:
(1)  119/    8CEC : (MACRO)             	smpsSetvoice        $03
(1)  119/    8CEC :  (MACRO-2)                  smpsFMvoice $03
(1)  119/    8CEC : EF03                                dc.b    $EF,$03
(1)  120/    8CEE : CE06 CDC9 C4C2 C1BD 	dc.b	nF6, $06, nE6, nC6, nG5, nF5, nE5, nC5, nG4
             8CF6 : B8               
(1)  121/    8CF7 : (MACRO)             	smpsSetvoice        $01
(1)  121/    8CF7 :  (MACRO-2)                  smpsFMvoice $01
(1)  121/    8CF7 : EF01                                dc.b    $EF,$01
(1)  122/    8CF9 : (MACRO)             	smpsReturn
(1)  122/    8CF9 : F9                                  dc.b    $F9
(1)  123/    8CFA :                     
(1)  124/    8CFA :                     HyperHyper_Call09:
(1)  125/    8CFA : B312 B1B3 0CB6 12B5 	dc.b	nD4, $12, nC4, nD4, $0C, nF4, $12, nE4, nC4, $0C
             8D02 : B10C               
(1)  126/    8D04 : (MACRO)             	smpsReturn
(1)  126/    8D04 : F9                                  dc.b    $F9
(1)  127/    8D05 :                     
(1)  128/    8D05 :                     HyperHyper_Call0A:
(1)  129/    8D05 : (MACRO)             	smpsCall            HyperHyper_Call09
(1)  129/    8D05 : F8                          dc.b    $F8
(1)  129/    8D06 : FA8C                                dc.w    z80_ptr(HYPERHYPER_CALL09)
(1)  130/    8D08 : (MACRO)             	smpsFMAlterVol      $0A
(1)  130/    8D08 : E60A                                dc.b    $E6,$0A
(1)  131/    8D0A : (MACRO)             	smpsPan             panLeft, $00
(1)  131/    8D0A : =$0                 panNone set $00
(1)  131/    8D0A : =$40                panRight set $40
(1)  131/    8D0A : =$80                panLeft set $80
(1)  131/    8D0A : =$C0                panCentre set $C0
(1)  131/    8D0A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  131/    8D0A : E080                        dc.b $E0,PANLEFT+$00
(1)  132/    8D0C : B106                	dc.b	nC4, $06
(1)  133/    8D0E : (MACRO)             	smpsFMAlterVol      $F6
(1)  133/    8D0E : E6F6                                dc.b    $E6,$F6
(1)  134/    8D10 : (MACRO)             	smpsPan             panCenter, $00
(1)  134/    8D10 : =$0                 panNone set $00
(1)  134/    8D10 : =$40                panRight set $40
(1)  134/    8D10 : =$80                panLeft set $80
(1)  134/    8D10 : =$C0                panCentre set $C0
(1)  134/    8D10 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  134/    8D10 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  135/    8D12 : B112 B318           	dc.b	nC4, $12, nD4, $18
(1)  136/    8D16 : (MACRO)             	smpsCall            HyperHyper_Call08
(1)  136/    8D16 : F8                          dc.b    $F8
(1)  136/    8D17 : EC8C                                dc.w    z80_ptr(HYPERHYPER_CALL08)
(1)  137/    8D19 : (MACRO)             	smpsReturn
(1)  137/    8D19 : F9                                  dc.b    $F9
(1)  138/    8D1A :                     
(1)  139/    8D1A :                     ; FM3 Data
(1)  140/    8D1A :                     HyperHyper_FM3:
(1)  141/    8D1A : (MACRO)             	smpsSetvoice        $01
(1)  141/    8D1A :  (MACRO-2)                  smpsFMvoice $01
(1)  141/    8D1A : EF01                                dc.b    $EF,$01
(1)  142/    8D1C : 8060 8080 8080 8030 	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst, $30
(1)  143/    8D24 : (MACRO)             	smpsCall            HyperHyper_Call06
(1)  143/    8D24 : F8                          dc.b    $F8
(1)  143/    8D25 : F58D                                dc.w    z80_ptr(HYPERHYPER_CALL06)
(1)  144/    8D27 :                     
(1)  145/    8D27 :                     HyperHyper_Jump01:
(1)  146/    8D27 : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  146/    8D27 : F8                          dc.b    $F8
(1)  146/    8D28 : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  147/    8D2A : AE12 ACAE 0C        	dc.b	nA3, $12, nG3, nA3, $0C
(1)  148/    8D2F : (MACRO)             	smpsFMAlterVol      $0A
(1)  148/    8D2F : E60A                                dc.b    $E6,$0A
(1)  149/    8D31 : (MACRO)             	smpsPan             panRight, $00
(1)  149/    8D31 : =$0                 panNone set $00
(1)  149/    8D31 : =$40                panRight set $40
(1)  149/    8D31 : =$80                panLeft set $80
(1)  149/    8D31 : =$C0                panCentre set $C0
(1)  149/    8D31 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  149/    8D31 : E040                        dc.b $E0,PANRIGHT+$00
(1)  150/    8D33 : AE                  	dc.b	nA3
(1)  151/    8D34 : (MACRO)             	smpsFMAlterVol      $F6
(1)  151/    8D34 : E6F6                                dc.b    $E6,$F6
(1)  152/    8D36 : (MACRO)             	smpsPan             panCenter, $00
(1)  152/    8D36 : =$0                 panNone set $00
(1)  152/    8D36 : =$40                panRight set $40
(1)  152/    8D36 : =$80                panLeft set $80
(1)  152/    8D36 : =$C0                panCentre set $C0
(1)  152/    8D36 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  152/    8D36 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  153/    8D38 : AC                  	dc.b	nG3
(1)  154/    8D39 : (MACRO)             	smpsFMAlterVol      $0A
(1)  154/    8D39 : E60A                                dc.b    $E6,$0A
(1)  155/    8D3B : (MACRO)             	smpsPan             panRight, $00
(1)  155/    8D3B : =$0                 panNone set $00
(1)  155/    8D3B : =$40                panRight set $40
(1)  155/    8D3B : =$80                panLeft set $80
(1)  155/    8D3B : =$C0                panCentre set $C0
(1)  155/    8D3B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  155/    8D3B : E040                        dc.b $E0,PANRIGHT+$00
(1)  156/    8D3D : AC06                	dc.b	nG3, $06
(1)  157/    8D3F : (MACRO)             	smpsFMAlterVol      $F6
(1)  157/    8D3F : E6F6                                dc.b    $E6,$F6
(1)  158/    8D41 : (MACRO)             	smpsPan             panCenter, $00
(1)  158/    8D41 : =$0                 panNone set $00
(1)  158/    8D41 : =$40                panRight set $40
(1)  158/    8D41 : =$80                panLeft set $80
(1)  158/    8D41 : =$C0                panCentre set $C0
(1)  158/    8D41 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  158/    8D41 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  159/    8D43 : AE12                	dc.b	nA3, $12
(1)  160/    8D45 : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  160/    8D45 : F8                          dc.b    $F8
(1)  160/    8D46 : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  161/    8D48 : (MACRO)             	smpsFMAlterVol      $0A
(1)  161/    8D48 : E60A                                dc.b    $E6,$0A
(1)  162/    8D4A : (MACRO)             	smpsPan             panRight, $00
(1)  162/    8D4A : =$0                 panNone set $00
(1)  162/    8D4A : =$40                panRight set $40
(1)  162/    8D4A : =$80                panLeft set $80
(1)  162/    8D4A : =$C0                panCentre set $C0
(1)  162/    8D4A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  162/    8D4A : E040                        dc.b $E0,PANRIGHT+$00
(1)  163/    8D4C : AC06                	dc.b	nG3, $06
(1)  164/    8D4E : (MACRO)             	smpsFMAlterVol      $F6
(1)  164/    8D4E : E6F6                                dc.b    $E6,$F6
(1)  165/    8D50 : (MACRO)             	smpsPan             panCenter, $00
(1)  165/    8D50 : =$0                 panNone set $00
(1)  165/    8D50 : =$40                panRight set $40
(1)  165/    8D50 : =$80                panLeft set $80
(1)  165/    8D50 : =$C0                panCentre set $C0
(1)  165/    8D50 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  165/    8D50 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  166/    8D52 : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  167/    8D56 : (MACRO)             	smpsCall            HyperHyper_Call06
(1)  167/    8D56 : F8                          dc.b    $F8
(1)  167/    8D57 : F58D                                dc.w    z80_ptr(HYPERHYPER_CALL06)
(1)  168/    8D59 : (MACRO)             	smpsAlterPitch      $FE
(1)  168/    8D59 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  168/    8D59 : FBFE                                dc.b    $FB,$FE
(1)  169/    8D5B : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  169/    8D5B : F8                          dc.b    $F8
(1)  169/    8D5C : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  170/    8D5E : (MACRO)             	smpsAlterPitch      $02
(1)  170/    8D5E :  (MACRO-2)                  smpsChangeTransposition $02
(1)  170/    8D5E : FB02                                dc.b    $FB,$02
(1)  171/    8D60 : AC12 AAAC 0C        	dc.b	nG3, $12, nF3, nG3, $0C
(1)  172/    8D65 : (MACRO)             	smpsFMAlterVol      $0A
(1)  172/    8D65 : E60A                                dc.b    $E6,$0A
(1)  173/    8D67 : (MACRO)             	smpsPan             panRight, $00
(1)  173/    8D67 : =$0                 panNone set $00
(1)  173/    8D67 : =$40                panRight set $40
(1)  173/    8D67 : =$80                panLeft set $80
(1)  173/    8D67 : =$C0                panCentre set $C0
(1)  173/    8D67 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  173/    8D67 : E040                        dc.b $E0,PANRIGHT+$00
(1)  174/    8D69 : AC0C                	dc.b	nG3, $0C
(1)  175/    8D6B : (MACRO)             	smpsFMAlterVol      $F6
(1)  175/    8D6B : E6F6                                dc.b    $E6,$F6
(1)  176/    8D6D : (MACRO)             	smpsPan             panCenter, $00
(1)  176/    8D6D : =$0                 panNone set $00
(1)  176/    8D6D : =$40                panRight set $40
(1)  176/    8D6D : =$80                panLeft set $80
(1)  176/    8D6D : =$C0                panCentre set $C0
(1)  176/    8D6D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  176/    8D6D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  177/    8D6F : B1                  	dc.b	nC4
(1)  178/    8D70 : (MACRO)             	smpsFMAlterVol      $0A
(1)  178/    8D70 : E60A                                dc.b    $E6,$0A
(1)  179/    8D72 : (MACRO)             	smpsPan             panRight, $00
(1)  179/    8D72 : =$0                 panNone set $00
(1)  179/    8D72 : =$40                panRight set $40
(1)  179/    8D72 : =$80                panLeft set $80
(1)  179/    8D72 : =$C0                panCentre set $C0
(1)  179/    8D72 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  179/    8D72 : E040                        dc.b $E0,PANRIGHT+$00
(1)  180/    8D74 : B106                	dc.b	nC4, $06
(1)  181/    8D76 : (MACRO)             	smpsFMAlterVol      $F6
(1)  181/    8D76 : E6F6                                dc.b    $E6,$F6
(1)  182/    8D78 : (MACRO)             	smpsPan             panCenter, $00
(1)  182/    8D78 : =$0                 panNone set $00
(1)  182/    8D78 : =$40                panRight set $40
(1)  182/    8D78 : =$80                panLeft set $80
(1)  182/    8D78 : =$C0                panCentre set $C0
(1)  182/    8D78 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  182/    8D78 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  183/    8D7A : B312                	dc.b	nD4, $12
(1)  184/    8D7C : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  184/    8D7C : F8                          dc.b    $F8
(1)  184/    8D7D : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  185/    8D7F : (MACRO)             	smpsFMAlterVol      $0A
(1)  185/    8D7F : E60A                                dc.b    $E6,$0A
(1)  186/    8D81 : (MACRO)             	smpsPan             panRight, $00
(1)  186/    8D81 : =$0                 panNone set $00
(1)  186/    8D81 : =$40                panRight set $40
(1)  186/    8D81 : =$80                panLeft set $80
(1)  186/    8D81 : =$C0                panCentre set $C0
(1)  186/    8D81 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  186/    8D81 : E040                        dc.b $E0,PANRIGHT+$00
(1)  187/    8D83 : AC06                	dc.b	nG3, $06
(1)  188/    8D85 : (MACRO)             	smpsFMAlterVol      $F6
(1)  188/    8D85 : E6F6                                dc.b    $E6,$F6
(1)  189/    8D87 : (MACRO)             	smpsPan             panCenter, $00
(1)  189/    8D87 : =$0                 panNone set $00
(1)  189/    8D87 : =$40                panRight set $40
(1)  189/    8D87 : =$80                panLeft set $80
(1)  189/    8D87 : =$C0                panCentre set $C0
(1)  189/    8D87 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  189/    8D87 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  190/    8D89 : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  191/    8D8D : (MACRO)             	smpsCall            HyperHyper_Call06
(1)  191/    8D8D : F8                          dc.b    $F8
(1)  191/    8D8E : F58D                                dc.w    z80_ptr(HYPERHYPER_CALL06)
(1)  192/    8D90 : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  192/    8D90 : F8                          dc.b    $F8
(1)  192/    8D91 : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  193/    8D93 : AE12 ACAE 0C        	dc.b	nA3, $12, nG3, nA3, $0C
(1)  194/    8D98 : (MACRO)             	smpsFMAlterVol      $0A
(1)  194/    8D98 : E60A                                dc.b    $E6,$0A
(1)  195/    8D9A : (MACRO)             	smpsPan             panRight, $00
(1)  195/    8D9A : =$0                 panNone set $00
(1)  195/    8D9A : =$40                panRight set $40
(1)  195/    8D9A : =$80                panLeft set $80
(1)  195/    8D9A : =$C0                panCentre set $C0
(1)  195/    8D9A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  195/    8D9A : E040                        dc.b $E0,PANRIGHT+$00
(1)  196/    8D9C : AE                  	dc.b	nA3
(1)  197/    8D9D : (MACRO)             	smpsFMAlterVol      $F6
(1)  197/    8D9D : E6F6                                dc.b    $E6,$F6
(1)  198/    8D9F : (MACRO)             	smpsPan             panCenter, $00
(1)  198/    8D9F : =$0                 panNone set $00
(1)  198/    8D9F : =$40                panRight set $40
(1)  198/    8D9F : =$80                panLeft set $80
(1)  198/    8D9F : =$C0                panCentre set $C0
(1)  198/    8D9F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  198/    8D9F : E0C0                        dc.b $E0,PANCENTER+$00
(1)  199/    8DA1 : AC                  	dc.b	nG3
(1)  200/    8DA2 : (MACRO)             	smpsFMAlterVol      $0A
(1)  200/    8DA2 : E60A                                dc.b    $E6,$0A
(1)  201/    8DA4 : (MACRO)             	smpsPan             panRight, $00
(1)  201/    8DA4 : =$0                 panNone set $00
(1)  201/    8DA4 : =$40                panRight set $40
(1)  201/    8DA4 : =$80                panLeft set $80
(1)  201/    8DA4 : =$C0                panCentre set $C0
(1)  201/    8DA4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  201/    8DA4 : E040                        dc.b $E0,PANRIGHT+$00
(1)  202/    8DA6 : AC06                	dc.b	nG3, $06
(1)  203/    8DA8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  203/    8DA8 : E6F6                                dc.b    $E6,$F6
(1)  204/    8DAA : (MACRO)             	smpsPan             panCenter, $00
(1)  204/    8DAA : =$0                 panNone set $00
(1)  204/    8DAA : =$40                panRight set $40
(1)  204/    8DAA : =$80                panLeft set $80
(1)  204/    8DAA : =$C0                panCentre set $C0
(1)  204/    8DAA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  204/    8DAA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  205/    8DAC : AE12                	dc.b	nA3, $12
(1)  206/    8DAE : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  206/    8DAE : F8                          dc.b    $F8
(1)  206/    8DAF : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  207/    8DB1 : (MACRO)             	smpsFMAlterVol      $0A
(1)  207/    8DB1 : E60A                                dc.b    $E6,$0A
(1)  208/    8DB3 : (MACRO)             	smpsPan             panRight, $00
(1)  208/    8DB3 : =$0                 panNone set $00
(1)  208/    8DB3 : =$40                panRight set $40
(1)  208/    8DB3 : =$80                panLeft set $80
(1)  208/    8DB3 : =$C0                panCentre set $C0
(1)  208/    8DB3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  208/    8DB3 : E040                        dc.b $E0,PANRIGHT+$00
(1)  209/    8DB5 : AC06                	dc.b	nG3, $06
(1)  210/    8DB7 : (MACRO)             	smpsFMAlterVol      $F6
(1)  210/    8DB7 : E6F6                                dc.b    $E6,$F6
(1)  211/    8DB9 : (MACRO)             	smpsPan             panCenter, $00
(1)  211/    8DB9 : =$0                 panNone set $00
(1)  211/    8DB9 : =$40                panRight set $40
(1)  211/    8DB9 : =$80                panLeft set $80
(1)  211/    8DB9 : =$C0                panCentre set $C0
(1)  211/    8DB9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  211/    8DB9 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  212/    8DBB : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  213/    8DBF : (MACRO)             	smpsCall            HyperHyper_Call06
(1)  213/    8DBF : F8                          dc.b    $F8
(1)  213/    8DC0 : F58D                                dc.w    z80_ptr(HYPERHYPER_CALL06)
(1)  214/    8DC2 : (MACRO)             	smpsAlterPitch      $FE
(1)  214/    8DC2 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  214/    8DC2 : FBFE                                dc.b    $FB,$FE
(1)  215/    8DC4 : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  215/    8DC4 : F8                          dc.b    $F8
(1)  215/    8DC5 : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  216/    8DC7 : (MACRO)             	smpsAlterPitch      $02
(1)  216/    8DC7 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  216/    8DC7 : FB02                                dc.b    $FB,$02
(1)  217/    8DC9 : AC12 AAAC 0680 12B1 	dc.b	nG3, $12, nF3, nG3, $06, nRst, $12, nC4, $0C
             8DD1 : 0C               
(1)  218/    8DD2 : (MACRO)             	smpsFMAlterVol      $0A
(1)  218/    8DD2 : E60A                                dc.b    $E6,$0A
(1)  219/    8DD4 : (MACRO)             	smpsPan             panRight, $00
(1)  219/    8DD4 : =$0                 panNone set $00
(1)  219/    8DD4 : =$40                panRight set $40
(1)  219/    8DD4 : =$80                panLeft set $80
(1)  219/    8DD4 : =$C0                panCentre set $C0
(1)  219/    8DD4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  219/    8DD4 : E040                        dc.b $E0,PANRIGHT+$00
(1)  220/    8DD6 : B106                	dc.b	nC4, $06
(1)  221/    8DD8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  221/    8DD8 : E6F6                                dc.b    $E6,$F6
(1)  222/    8DDA : (MACRO)             	smpsPan             panCenter, $00
(1)  222/    8DDA : =$0                 panNone set $00
(1)  222/    8DDA : =$40                panRight set $40
(1)  222/    8DDA : =$80                panLeft set $80
(1)  222/    8DDA : =$C0                panCentre set $C0
(1)  222/    8DDA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  222/    8DDA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  223/    8DDC : B312                	dc.b	nD4, $12
(1)  224/    8DDE : (MACRO)             	smpsCall            HyperHyper_Call07
(1)  224/    8DDE : F8                          dc.b    $F8
(1)  224/    8DDF : 108E                                dc.w    z80_ptr(HYPERHYPER_CALL07)
(1)  225/    8DE1 : (MACRO)             	smpsFMAlterVol      $0A
(1)  225/    8DE1 : E60A                                dc.b    $E6,$0A
(1)  226/    8DE3 : (MACRO)             	smpsPan             panRight, $00
(1)  226/    8DE3 : =$0                 panNone set $00
(1)  226/    8DE3 : =$40                panRight set $40
(1)  226/    8DE3 : =$80                panLeft set $80
(1)  226/    8DE3 : =$C0                panCentre set $C0
(1)  226/    8DE3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  226/    8DE3 : E040                        dc.b $E0,PANRIGHT+$00
(1)  227/    8DE5 : AC06                	dc.b	nG3, $06
(1)  228/    8DE7 : (MACRO)             	smpsFMAlterVol      $F6
(1)  228/    8DE7 : E6F6                                dc.b    $E6,$F6
(1)  229/    8DE9 : (MACRO)             	smpsPan             panCenter, $00
(1)  229/    8DE9 : =$0                 panNone set $00
(1)  229/    8DE9 : =$40                panRight set $40
(1)  229/    8DE9 : =$80                panLeft set $80
(1)  229/    8DE9 : =$C0                panCentre set $C0
(1)  229/    8DE9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  229/    8DE9 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  230/    8DEB : AC12 AE18           	dc.b	nG3, $12, nA3, $18
(1)  231/    8DEF : (MACRO)             	smpsCall            HyperHyper_Call06
(1)  231/    8DEF : F8                          dc.b    $F8
(1)  231/    8DF0 : F58D                                dc.w    z80_ptr(HYPERHYPER_CALL06)
(1)  232/    8DF2 : (MACRO)             	smpsJump            HyperHyper_Jump01
(1)  232/    8DF2 : F6                          dc.b    $F6
(1)  232/    8DF3 : 278D                                dc.w    z80_ptr(HYPERHYPER_JUMP01)
(1)  233/    8DF5 :                     
(1)  234/    8DF5 :                     HyperHyper_Call06:
(1)  235/    8DF5 : (MACRO)             	smpsSetvoice        $03
(1)  235/    8DF5 :  (MACRO-2)                  smpsFMvoice $03
(1)  235/    8DF5 : EF03                                dc.b    $EF,$03
(1)  236/    8DF7 : (MACRO)             	smpsFMAlterVol      $05
(1)  236/    8DF7 : E605                                dc.b    $E6,$05
(1)  237/    8DF9 : (MACRO)             	smpsPan             panLeft, $00
(1)  237/    8DF9 : =$0                 panNone set $00
(1)  237/    8DF9 : =$40                panRight set $40
(1)  237/    8DF9 : =$80                panLeft set $80
(1)  237/    8DF9 : =$C0                panCentre set $C0
(1)  237/    8DF9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  237/    8DF9 : E080                        dc.b $E0,PANLEFT+$00
(1)  238/    8DFB : 8005 CE06 CDC9 C4   	dc.b	nRst, $05, nF6, $06, nE6, nC6, nG5
(1)  239/    8E02 : (MACRO)             	smpsPan             panRight, $00
(1)  239/    8E02 : =$0                 panNone set $00
(1)  239/    8E02 : =$40                panRight set $40
(1)  239/    8E02 : =$80                panLeft set $80
(1)  239/    8E02 : =$C0                panCentre set $C0
(1)  239/    8E02 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  239/    8E02 : E040                        dc.b $E0,PANRIGHT+$00
(1)  240/    8E04 : C2C1 BDB8 01        	dc.b	nF5, nE5, nC5, nG4, $01
(1)  241/    8E09 : (MACRO)             	smpsSetvoice        $01
(1)  241/    8E09 :  (MACRO-2)                  smpsFMvoice $01
(1)  241/    8E09 : EF01                                dc.b    $EF,$01
(1)  242/    8E0B : (MACRO)             	smpsFMAlterVol      $FB
(1)  242/    8E0B : E6FB                                dc.b    $E6,$FB
(1)  243/    8E0D : (MACRO)             	smpsPan             panCenter, $00
(1)  243/    8E0D : =$0                 panNone set $00
(1)  243/    8E0D : =$40                panRight set $40
(1)  243/    8E0D : =$80                panLeft set $80
(1)  243/    8E0D : =$C0                panCentre set $C0
(1)  243/    8E0D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  243/    8E0D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  244/    8E0F : (MACRO)             	smpsReturn
(1)  244/    8E0F : F9                                  dc.b    $F9
(1)  245/    8E10 :                     
(1)  246/    8E10 :                     HyperHyper_Call07:
(1)  247/    8E10 : AC12 ACAE 0CB1 12B1 	dc.b	nG3, $12, nG3, nA3, $0C, nC4, $12, nC4, nG3, $0C
             8E18 : AC0C               
(1)  248/    8E1A : (MACRO)             	smpsReturn
(1)  248/    8E1A : F9                                  dc.b    $F9
(1)  249/    8E1B :                     
(1)  250/    8E1B :                     ; FM4 Data
(1)  251/    8E1B :                     HyperHyper_FM4:
(1)  252/    8E1B : (MACRO)             	smpsSetvoice        $02
(1)  252/    8E1B :  (MACRO-2)                  smpsFMvoice $02
(1)  252/    8E1B : EF02                                dc.b    $EF,$02
(1)  253/    8E1D : 8004                	dc.b	nRst, $04
(1)  254/    8E1F : (MACRO)             	smpsFMAlterVol      $01
(1)  254/    8E1F : E601                                dc.b    $E6,$01
(1)  255/    8E21 :                     
(1)  256/    8E21 :                     HyperHyper_Loop05:
(1)  257/    8E21 : (MACRO)             	smpsPan             panLeft, $00
(1)  257/    8E21 : =$0                 panNone set $00
(1)  257/    8E21 : =$40                panRight set $40
(1)  257/    8E21 : =$80                panLeft set $80
(1)  257/    8E21 : =$C0                panCentre set $C0
(1)  257/    8E21 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  257/    8E21 : E080                        dc.b $E0,PANLEFT+$00
(1)  258/    8E23 : (MACRO)             	smpsCall            HyperHyper_Call04
(1)  258/    8E23 : F8                          dc.b    $F8
(1)  258/    8E24 : 128F                                dc.w    z80_ptr(HYPERHYPER_CALL04)
(1)  259/    8E26 : (MACRO)             	smpsPan             panRight, $00
(1)  259/    8E26 : =$0                 panNone set $00
(1)  259/    8E26 : =$40                panRight set $40
(1)  259/    8E26 : =$80                panLeft set $80
(1)  259/    8E26 : =$C0                panCentre set $C0
(1)  259/    8E26 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  259/    8E26 : E040                        dc.b $E0,PANRIGHT+$00
(1)  260/    8E28 : (MACRO)             	smpsCall            HyperHyper_Call04
(1)  260/    8E28 : F8                          dc.b    $F8
(1)  260/    8E29 : 128F                                dc.w    z80_ptr(HYPERHYPER_CALL04)
(1)  261/    8E2B : (MACRO)             	smpsLoop            $01, $0B, HyperHyper_Loop05
(1)  261/    8E2B : F7                          dc.b    $F7
(1)  261/    8E2C : 010B                        dc.b    $01,$0B
(1)  261/    8E2E : 218E                                dc.w    z80_ptr(HYPERHYPER_LOOP05)
(1)  262/    8E30 : (MACRO)             	smpsPan             panLeft, $00
(1)  262/    8E30 : =$0                 panNone set $00
(1)  262/    8E30 : =$40                panRight set $40
(1)  262/    8E30 : =$80                panLeft set $80
(1)  262/    8E30 : =$C0                panCentre set $C0
(1)  262/    8E30 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  262/    8E30 : E080                        dc.b $E0,PANLEFT+$00
(1)  263/    8E32 : (MACRO)             	smpsCall            HyperHyper_Call04
(1)  263/    8E32 : F8                          dc.b    $F8
(1)  263/    8E33 : 128F                                dc.w    z80_ptr(HYPERHYPER_CALL04)
(1)  264/    8E35 : (MACRO)             	smpsPan             panRight, $00
(1)  264/    8E35 : =$0                 panNone set $00
(1)  264/    8E35 : =$40                panRight set $40
(1)  264/    8E35 : =$80                panLeft set $80
(1)  264/    8E35 : =$C0                panCentre set $C0
(1)  264/    8E35 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  264/    8E35 : E040                        dc.b $E0,PANRIGHT+$00
(1)  265/    8E37 : A506 AAA7 AC02      	dc.b	nC3, $06, nF3, nD3, nG3, $02
(1)  266/    8E3D : (MACRO)             	smpsPan             panCenter, $00
(1)  266/    8E3D : =$0                 panNone set $00
(1)  266/    8E3D : =$40                panRight set $40
(1)  266/    8E3D : =$80                panLeft set $80
(1)  266/    8E3D : =$C0                panCentre set $C0
(1)  266/    8E3D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  266/    8E3D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  267/    8E3F : (MACRO)             	smpsFMAlterVol      $FF
(1)  267/    8E3F : E6FF                                dc.b    $E6,$FF
(1)  268/    8E41 : (MACRO)             	smpsSetvoice        $01
(1)  268/    8E41 :  (MACRO-2)                  smpsFMvoice $01
(1)  268/    8E41 : EF01                                dc.b    $EF,$01
(1)  269/    8E43 :                     
(1)  270/    8E43 :                     HyperHyper_Jump00:
(1)  271/    8E43 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  271/    8E43 : F8                          dc.b    $F8
(1)  271/    8E44 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  272/    8E46 : AC12 AAAC 0C        	dc.b	nG3, $12, nF3, nG3, $0C
(1)  273/    8E4B : (MACRO)             	smpsFMAlterVol      $0A
(1)  273/    8E4B : E60A                                dc.b    $E6,$0A
(1)  274/    8E4D : (MACRO)             	smpsPan             panLeft, $00
(1)  274/    8E4D : =$0                 panNone set $00
(1)  274/    8E4D : =$40                panRight set $40
(1)  274/    8E4D : =$80                panLeft set $80
(1)  274/    8E4D : =$C0                panCentre set $C0
(1)  274/    8E4D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  274/    8E4D : E080                        dc.b $E0,PANLEFT+$00
(1)  275/    8E4F : AC0C                	dc.b	nG3, $0C
(1)  276/    8E51 : (MACRO)             	smpsFMAlterVol      $F6
(1)  276/    8E51 : E6F6                                dc.b    $E6,$F6
(1)  277/    8E53 : (MACRO)             	smpsPan             panCenter, $00
(1)  277/    8E53 : =$0                 panNone set $00
(1)  277/    8E53 : =$40                panRight set $40
(1)  277/    8E53 : =$80                panLeft set $80
(1)  277/    8E53 : =$C0                panCentre set $C0
(1)  277/    8E53 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  277/    8E53 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  278/    8E55 : A8                  	dc.b	nEb3
(1)  279/    8E56 : (MACRO)             	smpsFMAlterVol      $0A
(1)  279/    8E56 : E60A                                dc.b    $E6,$0A
(1)  280/    8E58 : (MACRO)             	smpsPan             panLeft, $00
(1)  280/    8E58 : =$0                 panNone set $00
(1)  280/    8E58 : =$40                panRight set $40
(1)  280/    8E58 : =$80                panLeft set $80
(1)  280/    8E58 : =$C0                panCentre set $C0
(1)  280/    8E58 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  280/    8E58 : E080                        dc.b $E0,PANLEFT+$00
(1)  281/    8E5A : A806                	dc.b	nEb3, $06
(1)  282/    8E5C : (MACRO)             	smpsFMAlterVol      $F6
(1)  282/    8E5C : E6F6                                dc.b    $E6,$F6
(1)  283/    8E5E : (MACRO)             	smpsPan             panCenter, $00
(1)  283/    8E5E : =$0                 panNone set $00
(1)  283/    8E5E : =$40                panRight set $40
(1)  283/    8E5E : =$80                panLeft set $80
(1)  283/    8E5E : =$C0                panCentre set $C0
(1)  283/    8E5E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  283/    8E5E : E0C0                        dc.b $E0,PANCENTER+$00
(1)  284/    8E60 : AA12                	dc.b	nF3, $12
(1)  285/    8E62 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  285/    8E62 : F8                          dc.b    $F8
(1)  285/    8E63 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  286/    8E65 : (MACRO)             	smpsFMAlterVol      $0A
(1)  286/    8E65 : E60A                                dc.b    $E6,$0A
(1)  287/    8E67 : (MACRO)             	smpsPan             panLeft, $00
(1)  287/    8E67 : =$0                 panNone set $00
(1)  287/    8E67 : =$40                panRight set $40
(1)  287/    8E67 : =$80                panLeft set $80
(1)  287/    8E67 : =$C0                panCentre set $C0
(1)  287/    8E67 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  287/    8E67 : E080                        dc.b $E0,PANLEFT+$00
(1)  288/    8E69 : AA06                	dc.b	nF3, $06
(1)  289/    8E6B : (MACRO)             	smpsFMAlterVol      $F6
(1)  289/    8E6B : E6F6                                dc.b    $E6,$F6
(1)  290/    8E6D : (MACRO)             	smpsPan             panCenter, $00
(1)  290/    8E6D : =$0                 panNone set $00
(1)  290/    8E6D : =$40                panRight set $40
(1)  290/    8E6D : =$80                panLeft set $80
(1)  290/    8E6D : =$C0                panCentre set $C0
(1)  290/    8E6D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  290/    8E6D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  291/    8E6F : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  292/    8E73 : (MACRO)             	smpsAlterPitch      $FE
(1)  292/    8E73 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  292/    8E73 : FBFE                                dc.b    $FB,$FE
(1)  293/    8E75 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  293/    8E75 : F8                          dc.b    $F8
(1)  293/    8E76 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  294/    8E78 : (MACRO)             	smpsAlterPitch      $02
(1)  294/    8E78 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  294/    8E78 : FB02                                dc.b    $FB,$02
(1)  295/    8E7A : AA12 A8AA 0C        	dc.b	nF3, $12, nEb3, nF3, $0C
(1)  296/    8E7F : (MACRO)             	smpsFMAlterVol      $0A
(1)  296/    8E7F : E60A                                dc.b    $E6,$0A
(1)  297/    8E81 : (MACRO)             	smpsPan             panLeft, $00
(1)  297/    8E81 : =$0                 panNone set $00
(1)  297/    8E81 : =$40                panRight set $40
(1)  297/    8E81 : =$80                panLeft set $80
(1)  297/    8E81 : =$C0                panCentre set $C0
(1)  297/    8E81 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  297/    8E81 : E080                        dc.b $E0,PANLEFT+$00
(1)  298/    8E83 : AA0C                	dc.b	nF3, $0C
(1)  299/    8E85 : (MACRO)             	smpsFMAlterVol      $F6
(1)  299/    8E85 : E6F6                                dc.b    $E6,$F6
(1)  300/    8E87 : (MACRO)             	smpsPan             panCenter, $00
(1)  300/    8E87 : =$0                 panNone set $00
(1)  300/    8E87 : =$40                panRight set $40
(1)  300/    8E87 : =$80                panLeft set $80
(1)  300/    8E87 : =$C0                panCentre set $C0
(1)  300/    8E87 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  300/    8E87 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  301/    8E89 : AD                  	dc.b	nAb3
(1)  302/    8E8A : (MACRO)             	smpsFMAlterVol      $0A
(1)  302/    8E8A : E60A                                dc.b    $E6,$0A
(1)  303/    8E8C : (MACRO)             	smpsPan             panLeft, $00
(1)  303/    8E8C : =$0                 panNone set $00
(1)  303/    8E8C : =$40                panRight set $40
(1)  303/    8E8C : =$80                panLeft set $80
(1)  303/    8E8C : =$C0                panCentre set $C0
(1)  303/    8E8C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  303/    8E8C : E080                        dc.b $E0,PANLEFT+$00
(1)  304/    8E8E : AD06                	dc.b	nAb3, $06
(1)  305/    8E90 : (MACRO)             	smpsFMAlterVol      $F6
(1)  305/    8E90 : E6F6                                dc.b    $E6,$F6
(1)  306/    8E92 : (MACRO)             	smpsPan             panCenter, $00
(1)  306/    8E92 : =$0                 panNone set $00
(1)  306/    8E92 : =$40                panRight set $40
(1)  306/    8E92 : =$80                panLeft set $80
(1)  306/    8E92 : =$C0                panCentre set $C0
(1)  306/    8E92 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  306/    8E92 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  307/    8E94 : AF12                	dc.b	nBb3, $12
(1)  308/    8E96 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  308/    8E96 : F8                          dc.b    $F8
(1)  308/    8E97 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  309/    8E99 : (MACRO)             	smpsFMAlterVol      $0A
(1)  309/    8E99 : E60A                                dc.b    $E6,$0A
(1)  310/    8E9B : (MACRO)             	smpsPan             panLeft, $00
(1)  310/    8E9B : =$0                 panNone set $00
(1)  310/    8E9B : =$40                panRight set $40
(1)  310/    8E9B : =$80                panLeft set $80
(1)  310/    8E9B : =$C0                panCentre set $C0
(1)  310/    8E9B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  310/    8E9B : E080                        dc.b $E0,PANLEFT+$00
(1)  311/    8E9D : AA06                	dc.b	nF3, $06
(1)  312/    8E9F : (MACRO)             	smpsFMAlterVol      $F6
(1)  312/    8E9F : E6F6                                dc.b    $E6,$F6
(1)  313/    8EA1 : (MACRO)             	smpsPan             panCenter, $00
(1)  313/    8EA1 : =$0                 panNone set $00
(1)  313/    8EA1 : =$40                panRight set $40
(1)  313/    8EA1 : =$80                panLeft set $80
(1)  313/    8EA1 : =$C0                panCentre set $C0
(1)  313/    8EA1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  313/    8EA1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  314/    8EA3 : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  315/    8EA7 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  315/    8EA7 : F8                          dc.b    $F8
(1)  315/    8EA8 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  316/    8EAA : AC12 AAAC 0C        	dc.b	nG3, $12, nF3, nG3, $0C
(1)  317/    8EAF : (MACRO)             	smpsFMAlterVol      $0A
(1)  317/    8EAF : E60A                                dc.b    $E6,$0A
(1)  318/    8EB1 : (MACRO)             	smpsPan             panLeft, $00
(1)  318/    8EB1 : =$0                 panNone set $00
(1)  318/    8EB1 : =$40                panRight set $40
(1)  318/    8EB1 : =$80                panLeft set $80
(1)  318/    8EB1 : =$C0                panCentre set $C0
(1)  318/    8EB1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  318/    8EB1 : E080                        dc.b $E0,PANLEFT+$00
(1)  319/    8EB3 : AC0C                	dc.b	nG3, $0C
(1)  320/    8EB5 : (MACRO)             	smpsFMAlterVol      $F6
(1)  320/    8EB5 : E6F6                                dc.b    $E6,$F6
(1)  321/    8EB7 : (MACRO)             	smpsPan             panCenter, $00
(1)  321/    8EB7 : =$0                 panNone set $00
(1)  321/    8EB7 : =$40                panRight set $40
(1)  321/    8EB7 : =$80                panLeft set $80
(1)  321/    8EB7 : =$C0                panCentre set $C0
(1)  321/    8EB7 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  321/    8EB7 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  322/    8EB9 : A8                  	dc.b	nEb3
(1)  323/    8EBA : (MACRO)             	smpsFMAlterVol      $0A
(1)  323/    8EBA : E60A                                dc.b    $E6,$0A
(1)  324/    8EBC : (MACRO)             	smpsPan             panLeft, $00
(1)  324/    8EBC : =$0                 panNone set $00
(1)  324/    8EBC : =$40                panRight set $40
(1)  324/    8EBC : =$80                panLeft set $80
(1)  324/    8EBC : =$C0                panCentre set $C0
(1)  324/    8EBC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  324/    8EBC : E080                        dc.b $E0,PANLEFT+$00
(1)  325/    8EBE : A806                	dc.b	nEb3, $06
(1)  326/    8EC0 : (MACRO)             	smpsFMAlterVol      $F6
(1)  326/    8EC0 : E6F6                                dc.b    $E6,$F6
(1)  327/    8EC2 : (MACRO)             	smpsPan             panCenter, $00
(1)  327/    8EC2 : =$0                 panNone set $00
(1)  327/    8EC2 : =$40                panRight set $40
(1)  327/    8EC2 : =$80                panLeft set $80
(1)  327/    8EC2 : =$C0                panCentre set $C0
(1)  327/    8EC2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  327/    8EC2 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  328/    8EC4 : AA12                	dc.b	nF3, $12
(1)  329/    8EC6 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  329/    8EC6 : F8                          dc.b    $F8
(1)  329/    8EC7 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  330/    8EC9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  330/    8EC9 : E60A                                dc.b    $E6,$0A
(1)  331/    8ECB : (MACRO)             	smpsPan             panLeft, $00
(1)  331/    8ECB : =$0                 panNone set $00
(1)  331/    8ECB : =$40                panRight set $40
(1)  331/    8ECB : =$80                panLeft set $80
(1)  331/    8ECB : =$C0                panCentre set $C0
(1)  331/    8ECB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  331/    8ECB : E080                        dc.b $E0,PANLEFT+$00
(1)  332/    8ECD : AA06                	dc.b	nF3, $06
(1)  333/    8ECF : (MACRO)             	smpsFMAlterVol      $F6
(1)  333/    8ECF : E6F6                                dc.b    $E6,$F6
(1)  334/    8ED1 : (MACRO)             	smpsPan             panCenter, $00
(1)  334/    8ED1 : =$0                 panNone set $00
(1)  334/    8ED1 : =$40                panRight set $40
(1)  334/    8ED1 : =$80                panLeft set $80
(1)  334/    8ED1 : =$C0                panCentre set $C0
(1)  334/    8ED1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  334/    8ED1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  335/    8ED3 : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  336/    8ED7 : (MACRO)             	smpsAlterPitch      $FE
(1)  336/    8ED7 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  336/    8ED7 : FBFE                                dc.b    $FB,$FE
(1)  337/    8ED9 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  337/    8ED9 : F8                          dc.b    $F8
(1)  337/    8EDA : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  338/    8EDC : (MACRO)             	smpsAlterPitch      $02
(1)  338/    8EDC :  (MACRO-2)                  smpsChangeTransposition $02
(1)  338/    8EDC : FB02                                dc.b    $FB,$02
(1)  339/    8EDE : AA12 A8AA 0680 12AD 	dc.b	nF3, $12, nEb3, nF3, $06, nRst, $12, nAb3, $0C
             8EE6 : 0C               
(1)  340/    8EE7 : (MACRO)             	smpsFMAlterVol      $0A
(1)  340/    8EE7 : E60A                                dc.b    $E6,$0A
(1)  341/    8EE9 : (MACRO)             	smpsPan             panLeft, $00
(1)  341/    8EE9 : =$0                 panNone set $00
(1)  341/    8EE9 : =$40                panRight set $40
(1)  341/    8EE9 : =$80                panLeft set $80
(1)  341/    8EE9 : =$C0                panCentre set $C0
(1)  341/    8EE9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  341/    8EE9 : E080                        dc.b $E0,PANLEFT+$00
(1)  342/    8EEB : AD06                	dc.b	nAb3, $06
(1)  343/    8EED : (MACRO)             	smpsFMAlterVol      $F6
(1)  343/    8EED : E6F6                                dc.b    $E6,$F6
(1)  344/    8EEF : (MACRO)             	smpsPan             panCenter, $00
(1)  344/    8EEF : =$0                 panNone set $00
(1)  344/    8EEF : =$40                panRight set $40
(1)  344/    8EEF : =$80                panLeft set $80
(1)  344/    8EEF : =$C0                panCentre set $C0
(1)  344/    8EEF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  344/    8EEF : E0C0                        dc.b $E0,PANCENTER+$00
(1)  345/    8EF1 : AF12                	dc.b	nBb3, $12
(1)  346/    8EF3 : (MACRO)             	smpsCall            HyperHyper_Call05
(1)  346/    8EF3 : F8                          dc.b    $F8
(1)  346/    8EF4 : 078F                                dc.w    z80_ptr(HYPERHYPER_CALL05)
(1)  347/    8EF6 : (MACRO)             	smpsFMAlterVol      $0A
(1)  347/    8EF6 : E60A                                dc.b    $E6,$0A
(1)  348/    8EF8 : (MACRO)             	smpsPan             panLeft, $00
(1)  348/    8EF8 : =$0                 panNone set $00
(1)  348/    8EF8 : =$40                panRight set $40
(1)  348/    8EF8 : =$80                panLeft set $80
(1)  348/    8EF8 : =$C0                panCentre set $C0
(1)  348/    8EF8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  348/    8EF8 : E080                        dc.b $E0,PANLEFT+$00
(1)  349/    8EFA : AA06                	dc.b	nF3, $06
(1)  350/    8EFC : (MACRO)             	smpsFMAlterVol      $F6
(1)  350/    8EFC : E6F6                                dc.b    $E6,$F6
(1)  351/    8EFE : (MACRO)             	smpsPan             panCenter, $00
(1)  351/    8EFE : =$0                 panNone set $00
(1)  351/    8EFE : =$40                panRight set $40
(1)  351/    8EFE : =$80                panLeft set $80
(1)  351/    8EFE : =$C0                panCentre set $C0
(1)  351/    8EFE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  351/    8EFE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  352/    8F00 : AA12 AC48           	dc.b	nF3, $12, nG3, $48
(1)  353/    8F04 : (MACRO)             	smpsJump            HyperHyper_Jump00
(1)  353/    8F04 : F6                          dc.b    $F6
(1)  353/    8F05 : 438E                                dc.w    z80_ptr(HYPERHYPER_JUMP00)
(1)  354/    8F07 :                     
(1)  355/    8F07 :                     HyperHyper_Call05:
(1)  356/    8F07 : AA12 AAAA 0CAC 12AC 	dc.b	nF3, $12, nF3, nF3, $0C, nG3, $12, nG3, nF3, $0C
             8F0F : AA0C               
(1)  357/    8F11 : (MACRO)             	smpsReturn
(1)  357/    8F11 : F9                                  dc.b    $F9
(1)  358/    8F12 :                     
(1)  359/    8F12 :                     HyperHyper_Call04:
(1)  360/    8F12 : A506 AAA7 AC        	dc.b	nC3, $06, nF3, nD3, nG3
(1)  361/    8F17 : (MACRO)             	smpsReturn
(1)  361/    8F17 : F9                                  dc.b    $F9
(1)  362/    8F18 :                     
(1)  363/    8F18 :                     ; FM5 Data
(1)  364/    8F18 :                     HyperHyper_FM5:
(1)  365/    8F18 : (MACRO)             	smpsSetvoice        $02
(1)  365/    8F18 :  (MACRO-2)                  smpsFMvoice $02
(1)  365/    8F18 : EF02                                dc.b    $EF,$02
(1)  366/    8F1A :                     
(1)  367/    8F1A :                     HyperHyper_Loop02:
(1)  368/    8F1A : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  368/    8F1A : F8                          dc.b    $F8
(1)  368/    8F1B : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  369/    8F1D : (MACRO)             	smpsLoop            $01, $06, HyperHyper_Loop02
(1)  369/    8F1D : F7                          dc.b    $F7
(1)  369/    8F1E : 0106                        dc.b    $01,$06
(1)  369/    8F20 : 1A8F                                dc.w    z80_ptr(HYPERHYPER_LOOP02)
(1)  370/    8F22 :                     
(1)  371/    8F22 :                     HyperHyper_Loop03:
(1)  372/    8F22 : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  372/    8F22 : F8                          dc.b    $F8
(1)  372/    8F23 : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  373/    8F25 : (MACRO)             	smpsLoop            $01, $04, HyperHyper_Loop03
(1)  373/    8F25 : F7                          dc.b    $F7
(1)  373/    8F26 : 0104                        dc.b    $01,$04
(1)  373/    8F28 : 228F                                dc.w    z80_ptr(HYPERHYPER_LOOP03)
(1)  374/    8F2A : (MACRO)             	smpsAlterPitch      $FE
(1)  374/    8F2A :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  374/    8F2A : FBFE                                dc.b    $FB,$FE
(1)  375/    8F2C : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  375/    8F2C : F8                          dc.b    $F8
(1)  375/    8F2D : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  376/    8F2F : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  376/    8F2F : F8                          dc.b    $F8
(1)  376/    8F30 : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  377/    8F32 : (MACRO)             	smpsAlterPitch      $02
(1)  377/    8F32 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  377/    8F32 : FB02                                dc.b    $FB,$02
(1)  378/    8F34 : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  378/    8F34 : F8                          dc.b    $F8
(1)  378/    8F35 : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  379/    8F37 : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  379/    8F37 : F8                          dc.b    $F8
(1)  379/    8F38 : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  380/    8F3A :                     
(1)  381/    8F3A :                     HyperHyper_Loop04:
(1)  382/    8F3A : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  382/    8F3A : F8                          dc.b    $F8
(1)  382/    8F3B : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  383/    8F3D : (MACRO)             	smpsLoop            $01, $04, HyperHyper_Loop04
(1)  383/    8F3D : F7                          dc.b    $F7
(1)  383/    8F3E : 0104                        dc.b    $01,$04
(1)  383/    8F40 : 3A8F                                dc.w    z80_ptr(HYPERHYPER_LOOP04)
(1)  384/    8F42 : (MACRO)             	smpsAlterPitch      $FE
(1)  384/    8F42 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  384/    8F42 : FBFE                                dc.b    $FB,$FE
(1)  385/    8F44 : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  385/    8F44 : F8                          dc.b    $F8
(1)  385/    8F45 : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  386/    8F47 : (MACRO)             	smpsAlterPitch      $02
(1)  386/    8F47 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  386/    8F47 : FB02                                dc.b    $FB,$02
(1)  387/    8F49 : A306 A8A5 AAA3 A8A5 	dc.b	nBb2, $06, nEb3, nC3, nF3, nBb2, nEb3, nC3, nRst, nRst, nRst, nC3
             8F51 : 8080 80A5         
(1)  388/    8F55 : AAA3 A8A5 AA        	dc.b	nF3, nBb2, nEb3, nC3, nF3
(1)  389/    8F5A : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  389/    8F5A : F8                          dc.b    $F8
(1)  389/    8F5B : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  390/    8F5D : (MACRO)             	smpsCall            HyperHyper_Call03
(1)  390/    8F5D : F8                          dc.b    $F8
(1)  390/    8F5E : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  391/    8F60 : (MACRO)             	smpsJump            HyperHyper_Loop03
(1)  391/    8F60 : F6                          dc.b    $F6
(1)  391/    8F61 : 228F                                dc.w    z80_ptr(HYPERHYPER_LOOP03)
(1)  392/    8F63 :                     
(1)  393/    8F63 :                     HyperHyper_Call03:
(1)  394/    8F63 : A506 AAA7 AC        	dc.b	nC3, $06, nF3, nD3, nG3
(1)  395/    8F68 : (MACRO)             	smpsLoop            $00, $04, HyperHyper_Call03
(1)  395/    8F68 : F7                          dc.b    $F7
(1)  395/    8F69 : 0004                        dc.b    $00,$04
(1)  395/    8F6B : 638F                                dc.w    z80_ptr(HYPERHYPER_CALL03)
(1)  396/    8F6D : (MACRO)             	smpsReturn
(1)  396/    8F6D : F9                                  dc.b    $F9
(1)  397/    8F6E :                     
(1)  398/    8F6E :                     ; PSG1 Data
(1)  399/    8F6E :                     HyperHyper_PSG1:
(1)  400/    8F6E : (MACRO)             	smpsPSGvoice        sTone_03
(1)  400/    8F6E : F503                        dc.b    $F5,STONE_03
(1)  401/    8F70 : 8060 8080 8080      	dc.b	nRst, $60, nRst, nRst, nRst, nRst
(1)  402/    8F76 : (MACRO)             	smpsModSet          $01, $06, $01, $01
(1)  402/    8F76 : F0                          dc.b    $F0
(1)  402/    8F77 : 0106 0101                           dc.b    $01,$06,$01,$01
(1)  402/    8F7B :                             ;dc.b   $06,$01,$01
(1)  403/    8F7B : (MACRO)             	smpsPSGAlterVol     $02
(1)  403/    8F7B : EC02                        dc.b    $EC,$02
(1)  404/    8F7D : C160                	dc.b	nE5, $60
(1)  405/    8F7F : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  405/    8F7F : F0                          dc.b    $F0
(1)  405/    8F80 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  405/    8F84 :                             ;dc.b   $00,$00,$00
(1)  406/    8F84 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  406/    8F84 : ECFE                        dc.b    $EC,$FE
(1)  407/    8F86 :                     
(1)  408/    8F86 :                     HyperHyper_Jump04:
(1)  409/    8F86 : (MACRO)             	smpsCall            HyperHyper_Call0F
(1)  409/    8F86 : F8                          dc.b    $F8
(1)  409/    8F87 : FD8F                                dc.w    z80_ptr(HYPERHYPER_CALL0F)
(1)  410/    8F89 : 800C B118 AE06 80B1 	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
             8F91 : 12B3 0680         
(1)  411/    8F95 : 0CB4 E70C B306 80B4 	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nC4, $12
             8F9D : B380 B112         
(1)  412/    8FA1 : ADAF B10C 80AC 80AF 	dc.b	nAb3, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $0F
             8FA9 : 03E7 B00F         
(1)  413/    8FAD : AC06 800C AAE7 0680 	dc.b	nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3, $54
             8FB5 : AC54               
(1)  414/    8FB7 : (MACRO)             	smpsCall            HyperHyper_Call0F
(1)  414/    8FB7 : F8                          dc.b    $F8
(1)  414/    8FB8 : FD8F                                dc.w    z80_ptr(HYPERHYPER_CALL0F)
(1)  415/    8FBA : 800C B118 AE06 80B1 	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
             8FC2 : 12B3 0680         
(1)  416/    8FC6 : 0CB4 E70C B306 80B4 	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nC4, $06
             8FCE : B380 B106         
(1)  417/    8FD2 : 800C AD12 AFB1 0C80 	dc.b	nRst, $0C, nAb3, $12, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03
             8FDA : AC80 AF03         
(1)  418/    8FDE : E7B0 0FAC 0680 0CAA 	dc.b	smpsNoAttack, nB3, $0F, nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3
             8FE6 : E706 80AC         
(1)  419/    8FEA : 54                  	dc.b	$54
(1)  420/    8FEB : (MACRO)             	smpsJump            HyperHyper_Jump04
(1)  420/    8FEB : F6                          dc.b    $F6
(1)  420/    8FEC : 868F                                dc.w    z80_ptr(HYPERHYPER_JUMP04)
(1)  421/    8FEE :                     
(1)  422/    8FEE :                     HyperHyper_Call10:
(1)  423/    8FEE : AA0C 80AC 80AF 03E7 	dc.b	nF3, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $0F, nG3, $06
             8FF6 : B00F AC06         
(1)  424/    8FFA : 800C                	dc.b	nRst, $0C
(1)  425/    8FFC : (MACRO)             	smpsReturn
(1)  425/    8FFC : F9                                  dc.b    $F9
(1)  426/    8FFD :                     
(1)  427/    8FFD :                     HyperHyper_Call0F:
(1)  428/    8FFD : (MACRO)             	smpsCall            HyperHyper_Call10
(1)  428/    8FFD : F8                          dc.b    $F8
(1)  428/    8FFE : EE8F                                dc.w    z80_ptr(HYPERHYPER_CALL10)
(1)  429/    9000 : B10C E70C B006 80B1 	dc.b	nC4, $0C, smpsNoAttack, $0C, nB3, $06, nRst, nC4, nD4, nRst, nG3, $30
             9008 : B380 AC30         
(1)  430/    900C : 8006                	dc.b	nRst, $06
(1)  431/    900E : (MACRO)             	smpsCall            HyperHyper_Call10
(1)  431/    900E : F8                          dc.b    $F8
(1)  431/    900F : EE8F                                dc.w    z80_ptr(HYPERHYPER_CALL10)
(1)  432/    9011 : B60C E706 80B8 80B6 	dc.b	nF4, $0C, smpsNoAttack, $06, nRst, nG4, nRst, nF4, nE4, nRst, nD4, $30
             9019 : B580 B330         
(1)  433/    901D : 8006                	dc.b	nRst, $06
(1)  434/    901F : (MACRO)             	smpsReturn
(1)  434/    901F : F9                                  dc.b    $F9
(1)  435/    9020 :                     
(1)  436/    9020 :                     ; PSG2 Data
(1)  437/    9020 :                     HyperHyper_PSG2:
(1)  438/    9020 : 8060 8080 8080      	dc.b	nRst, $60, nRst, nRst, nRst, nRst
(1)  439/    9026 : (MACRO)             	smpsModSet          $01, $06, $01, $01
(1)  439/    9026 : F0                          dc.b    $F0
(1)  439/    9027 : 0106 0101                           dc.b    $01,$06,$01,$01
(1)  439/    902B :                             ;dc.b   $06,$01,$01
(1)  440/    902B : (MACRO)             	smpsPSGAlterVol     $02
(1)  440/    902B : EC02                        dc.b    $EC,$02
(1)  441/    902D : 8004 C15C           	dc.b	nRst, $04, nE5, $5C
(1)  442/    9031 : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  442/    9031 : F0                          dc.b    $F0
(1)  442/    9032 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  442/    9036 :                             ;dc.b   $00,$00,$00
(1)  443/    9036 : (MACRO)             	smpsPSGAlterVol     $FE
(1)  443/    9036 : ECFE                        dc.b    $EC,$FE
(1)  444/    9038 : (MACRO)             	smpsModSet          $01, $01, $01, $03
(1)  444/    9038 : F0                          dc.b    $F0
(1)  444/    9039 : 0101 0103                           dc.b    $01,$01,$01,$03
(1)  444/    903D :                             ;dc.b   $01,$01,$03
(1)  445/    903D :                     
(1)  446/    903D :                     HyperHyper_Jump03:
(1)  447/    903D : 8006                	dc.b	nRst, $06
(1)  448/    903F : (MACRO)             	smpsCall            HyperHyper_Call0F
(1)  448/    903F : F8                          dc.b    $F8
(1)  448/    9040 : FD8F                                dc.w    z80_ptr(HYPERHYPER_CALL0F)
(1)  449/    9042 : 800C B118 AE06 80B1 	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
             904A : 12B3 0680         
(1)  450/    904E : 0CB4 E70C B306 80B4 	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nC4, $12
             9056 : B380 B112         
(1)  451/    905A : ADAF B10C 80AC 80AF 	dc.b	nAb3, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03, smpsNoAttack, nB3, $0F
             9062 : 03E7 B00F         
(1)  452/    9066 : AC06 800C AAE7 0680 	dc.b	nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3, $54
             906E : AC54               
(1)  453/    9070 : (MACRO)             	smpsCall            HyperHyper_Call0F
(1)  453/    9070 : F8                          dc.b    $F8
(1)  453/    9071 : FD8F                                dc.w    z80_ptr(HYPERHYPER_CALL0F)
(1)  454/    9073 : 800C B118 AE06 80B1 	dc.b	nRst, $0C, nC4, $18, nA3, $06, nRst, nC4, $12, nD4, $06, nRst
             907B : 12B3 0680         
(1)  455/    907F : 0CB4 E70C B306 80B4 	dc.b	$0C, nEb4, smpsNoAttack, $0C, nD4, $06, nRst, nEb4, nD4, nRst, nRst, $06
             9087 : B380 8006         
(1)  456/    908B : 800C AD12 AFB1 0C80 	dc.b	nRst, $0C, nAb3, $12, nBb3, nC4, $0C, nRst, nG3, nRst, nBb3, $03
             9093 : AC80 AF03         
(1)  457/    9097 : E7B0 0FAC 0680 0CAA 	dc.b	smpsNoAttack, nB3, $0F, nG3, $06, nRst, $0C, nF3, smpsNoAttack, $06, nRst, nG3
             909F : E706 80AC         
(1)  458/    90A3 : 4E                  	dc.b	$4E
(1)  459/    90A4 : (MACRO)             	smpsJump            HyperHyper_Jump03
(1)  459/    90A4 : F6                          dc.b    $F6
(1)  459/    90A5 : 3D90                                dc.w    z80_ptr(HYPERHYPER_JUMP03)
(1)  460/    90A7 :                     
(1)  461/    90A7 :                     ; PSG3 Data
(1)  462/    90A7 :                     HyperHyper_PSG3:
(1)  463/    90A7 : (MACRO)             	smpsPSGform         $E7
(1)  463/    90A7 : F3E7                        dc.b    $F3,$E7
(1)  464/    90A9 :                     
(1)  465/    90A9 :                     HyperHyper_Loop07:
(1)  466/    90A9 : (MACRO)             	smpsCall            HyperHyper_Call0D
(1)  466/    90A9 : F8                          dc.b    $F8
(1)  466/    90AA : F590                                dc.w    z80_ptr(HYPERHYPER_CALL0D)
(1)  467/    90AC : (MACRO)             	smpsLoop            $01, $05, HyperHyper_Loop07
(1)  467/    90AC : F7                          dc.b    $F7
(1)  467/    90AD : 0105                        dc.b    $01,$05
(1)  467/    90AF : A990                                dc.w    z80_ptr(HYPERHYPER_LOOP07)
(1)  468/    90B1 : (MACRO)             	smpsCall            HyperHyper_Call0E
(1)  468/    90B1 : F8                          dc.b    $F8
(1)  468/    90B2 : 0391                                dc.w    z80_ptr(HYPERHYPER_CALL0E)
(1)  469/    90B4 :                     
(1)  470/    90B4 :                     HyperHyper_Loop08:
(1)  471/    90B4 : (MACRO)             	smpsCall            HyperHyper_Call0D
(1)  471/    90B4 : F8                          dc.b    $F8
(1)  471/    90B5 : F590                                dc.w    z80_ptr(HYPERHYPER_CALL0D)
(1)  472/    90B7 : (MACRO)             	smpsLoop            $01, $03, HyperHyper_Loop08
(1)  472/    90B7 : F7                          dc.b    $F7
(1)  472/    90B8 : 0103                        dc.b    $01,$03
(1)  472/    90BA : B490                                dc.w    z80_ptr(HYPERHYPER_LOOP08)
(1)  473/    90BC : (MACRO)             	smpsCall            HyperHyper_Call0E
(1)  473/    90BC : F8                          dc.b    $F8
(1)  473/    90BD : 0391                                dc.w    z80_ptr(HYPERHYPER_CALL0E)
(1)  474/    90BF : (MACRO)             	smpsLoop            $02, $02, HyperHyper_Loop08
(1)  474/    90BF : F7                          dc.b    $F7
(1)  474/    90C0 : 0202                        dc.b    $02,$02
(1)  474/    90C2 : B490                                dc.w    z80_ptr(HYPERHYPER_LOOP08)
(1)  475/    90C4 :                     
(1)  476/    90C4 :                     HyperHyper_Loop09:
(1)  477/    90C4 : (MACRO)             	smpsCall            HyperHyper_Call0D
(1)  477/    90C4 : F8                          dc.b    $F8
(1)  477/    90C5 : F590                                dc.w    z80_ptr(HYPERHYPER_CALL0D)
(1)  478/    90C7 : (MACRO)             	smpsLoop            $01, $03, HyperHyper_Loop09
(1)  478/    90C7 : F7                          dc.b    $F7
(1)  478/    90C8 : 0103                        dc.b    $01,$03
(1)  478/    90CA : C490                                dc.w    z80_ptr(HYPERHYPER_LOOP09)
(1)  479/    90CC : (MACRO)             	smpsCall            HyperHyper_Call0E
(1)  479/    90CC : F8                          dc.b    $F8
(1)  479/    90CD : 0391                                dc.w    z80_ptr(HYPERHYPER_CALL0E)
(1)  480/    90CF : (MACRO)             	smpsCall            HyperHyper_Call0D
(1)  480/    90CF : F8                          dc.b    $F8
(1)  480/    90D0 : F590                                dc.w    z80_ptr(HYPERHYPER_CALL0D)
(1)  481/    90D2 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  481/    90D2 : F502                        dc.b    $F5,STONE_02
(1)  482/    90D4 : B106 06             	dc.b	(nMaxPSG2-$23)&$FF, $06, $06
(1)  483/    90D7 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  483/    90D7 : F505                        dc.b    $F5,STONE_05
(1)  484/    90D9 : 0C                  	dc.b	$0C
(1)  485/    90DA : (MACRO)             	smpsPSGvoice        sTone_02
(1)  485/    90DA : F502                        dc.b    $F5,STONE_02
(1)  486/    90DC : 0606 0680 800C      	dc.b	$06, $06, $06, nRst, nRst, $0C
(1)  487/    90E2 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  487/    90E2 : F505                        dc.b    $F5,STONE_05
(1)  488/    90E4 : 0C                  	dc.b	$0C
(1)  489/    90E5 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  489/    90E5 : F502                        dc.b    $F5,STONE_02
(1)  490/    90E7 : 0606                	dc.b	$06, $06
(1)  491/    90E9 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  491/    90E9 : F505                        dc.b    $F5,STONE_05
(1)  492/    90EB : 0C                  	dc.b	$0C
(1)  493/    90EC : (MACRO)             	smpsCall            HyperHyper_Call0D
(1)  493/    90EC : F8                          dc.b    $F8
(1)  493/    90ED : F590                                dc.w    z80_ptr(HYPERHYPER_CALL0D)
(1)  494/    90EF : (MACRO)             	smpsCall            HyperHyper_Call0E
(1)  494/    90EF : F8                          dc.b    $F8
(1)  494/    90F0 : 0391                                dc.w    z80_ptr(HYPERHYPER_CALL0E)
(1)  495/    90F2 : (MACRO)             	smpsJump            HyperHyper_Loop08
(1)  495/    90F2 : F6                          dc.b    $F6
(1)  495/    90F3 : B490                                dc.w    z80_ptr(HYPERHYPER_LOOP08)
(1)  496/    90F5 :                     
(1)  497/    90F5 :                     HyperHyper_Call0D:
(1)  498/    90F5 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  498/    90F5 : F502                        dc.b    $F5,STONE_02
(1)  499/    90F7 : B106 06             	dc.b	(nMaxPSG2-$23)&$FF, $06, $06
(1)  500/    90FA : (MACRO)             	smpsPSGvoice        sTone_05
(1)  500/    90FA : F505                        dc.b    $F5,STONE_05
(1)  501/    90FC : 0C                  	dc.b	$0C
(1)  502/    90FD : (MACRO)             	smpsLoop            $00, $04, HyperHyper_Call0D
(1)  502/    90FD : F7                          dc.b    $F7
(1)  502/    90FE : 0004                        dc.b    $00,$04
(1)  502/    9100 : F590                                dc.w    z80_ptr(HYPERHYPER_CALL0D)
(1)  503/    9102 : (MACRO)             	smpsReturn
(1)  503/    9102 : F9                                  dc.b    $F9
(1)  504/    9103 :                     
(1)  505/    9103 :                     HyperHyper_Call0E:
(1)  506/    9103 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  506/    9103 : F502                        dc.b    $F5,STONE_02
(1)  507/    9105 : B104 0404 0606 0606 	dc.b	(nMaxPSG2-$23)&$FF, $04, $04, $04, $06, $06, $06, $06, $06, $06, $06, $06
             910D : 0606 0606         
(1)  508/    9111 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  508/    9111 : F505                        dc.b    $F5,STONE_05
(1)  509/    9113 : 0C0C 0C             	dc.b	$0C, $0C, $0C
(1)  510/    9116 : (MACRO)             	smpsReturn
(1)  510/    9116 : F9                                  dc.b    $F9
(1)  511/    9117 :                     
(1)  512/    9117 :                     ; DAC Data
(1)  513/    9117 :                     HyperHyper_DAC:
(1)  514/    9117 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  514/    9117 : F8                          dc.b    $F8
(1)  514/    9118 : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  515/    911A : (MACRO)             	smpsCall            HyperHyper_Call01
(1)  515/    911A : F8                          dc.b    $F8
(1)  515/    911B : 6C91                                dc.w    z80_ptr(HYPERHYPER_CALL01)
(1)  516/    911D : (MACRO)             	smpsLoop            $00, $02, HyperHyper_DAC
(1)  516/    911D : F7                          dc.b    $F7
(1)  516/    911E : 0002                        dc.b    $00,$02
(1)  516/    9120 : 1791                                dc.w    z80_ptr(HYPERHYPER_DAC)
(1)  517/    9122 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  517/    9122 : F8                          dc.b    $F8
(1)  517/    9123 : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  518/    9125 : (MACRO)             	smpsCall            HyperHyper_Call02
(1)  518/    9125 : F8                          dc.b    $F8
(1)  518/    9126 : 7C91                                dc.w    z80_ptr(HYPERHYPER_CALL02)
(1)  519/    9128 :                     
(1)  520/    9128 :                     HyperHyper_Loop00:
(1)  521/    9128 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  521/    9128 : F8                          dc.b    $F8
(1)  521/    9129 : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  522/    912B : (MACRO)             	smpsCall            HyperHyper_Call01
(1)  522/    912B : F8                          dc.b    $F8
(1)  522/    912C : 6C91                                dc.w    z80_ptr(HYPERHYPER_CALL01)
(1)  523/    912E : (MACRO)             	smpsLoop            $00, $03, HyperHyper_Loop00
(1)  523/    912E : F7                          dc.b    $F7
(1)  523/    912F : 0003                        dc.b    $00,$03
(1)  523/    9131 : 2891                                dc.w    z80_ptr(HYPERHYPER_LOOP00)
(1)  524/    9133 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  524/    9133 : F8                          dc.b    $F8
(1)  524/    9134 : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  525/    9136 : (MACRO)             	smpsCall            HyperHyper_Call02
(1)  525/    9136 : F8                          dc.b    $F8
(1)  525/    9137 : 7C91                                dc.w    z80_ptr(HYPERHYPER_CALL02)
(1)  526/    9139 :                     
(1)  527/    9139 :                     HyperHyper_Loop01:
(1)  528/    9139 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  528/    9139 : F8                          dc.b    $F8
(1)  528/    913A : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  529/    913C : (MACRO)             	smpsCall            HyperHyper_Call01
(1)  529/    913C : F8                          dc.b    $F8
(1)  529/    913D : 6C91                                dc.w    z80_ptr(HYPERHYPER_CALL01)
(1)  530/    913F : (MACRO)             	smpsLoop            $00, $02, HyperHyper_Loop01
(1)  530/    913F : F7                          dc.b    $F7
(1)  530/    9140 : 0002                        dc.b    $00,$02
(1)  530/    9142 : 3991                                dc.w    z80_ptr(HYPERHYPER_LOOP01)
(1)  531/    9144 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  531/    9144 : F8                          dc.b    $F8
(1)  531/    9145 : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  532/    9147 : 8112 0682 0C81 8082 	dc.b	dSnareS3, $12, $06, dHighTom, $0C, dSnareS3, nRst, dHighTom, $06, dSnareS3, dHighTom, dHighTom
             914F : 0681 8282         
(1)  533/    9153 : 0C82 06             	dc.b	$0C, dHighTom, $06
(1)  534/    9156 : (MACRO)             	smpsCall            HyperHyper_Call00
(1)  534/    9156 : F8                          dc.b    $F8
(1)  534/    9157 : 5F91                                dc.w    z80_ptr(HYPERHYPER_CALL00)
(1)  535/    9159 : (MACRO)             	smpsCall            HyperHyper_Call02
(1)  535/    9159 : F8                          dc.b    $F8
(1)  535/    915A : 7C91                                dc.w    z80_ptr(HYPERHYPER_CALL02)
(1)  536/    915C : (MACRO)             	smpsJump            HyperHyper_Loop00
(1)  536/    915C : F6                          dc.b    $F6
(1)  536/    915D : 2891                                dc.w    z80_ptr(HYPERHYPER_LOOP00)
(1)  537/    915F :                     
(1)  538/    915F :                     HyperHyper_Call00:
(1)  539/    915F : 8112 0682 0C81 8081 	dc.b	dSnareS3, $12, $06, dHighTom, $0C, dSnareS3, nRst, dSnareS3, dHighTom, $06, dSnareS3, $12
             9167 : 8206 8112         
(1)  540/    916B : (MACRO)             	smpsReturn
(1)  540/    916B : F9                                  dc.b    $F9
(1)  541/    916C :                     
(1)  542/    916C :                     HyperHyper_Call01:
(1)  543/    916C : 8112 0682 0C81 8081 	dc.b	dSnareS3, $12, $06, dHighTom, $0C, dSnareS3, nRst, dSnareS3, $06, dSnareS3, dHighTom, dSnareS3
             9174 : 0681 8281         
(1)  544/    9178 : 0C82 06             	dc.b	$0C, dHighTom, $06
(1)  545/    917B : (MACRO)             	smpsReturn
(1)  545/    917B : F9                                  dc.b    $F9
(1)  546/    917C :                     
(1)  547/    917C :                     HyperHyper_Call02:
(1)  548/    917C : 810C 8206 8182 0C82 	dc.b	dSnareS3, $0C, dHighTom, $06, dSnareS3, dHighTom, $0C, dHighTom, $04, dHighTom, dHighTom, dHighTom
             9184 : 0482 8282         
(1)  549/    9188 : 0682 8282 8383 8485 	dc.b	$06, dHighTom, dHighTom, dHighTom, dMidTomS3, dMidTomS3, dLowTomS3, dFloorTomS3
(1)  550/    9190 : (MACRO)             	smpsReturn
(1)  550/    9190 : F9                                  dc.b    $F9
(1)  551/    9191 :                     
(1)  552/    9191 :                     HyperHyper_Voices:
(1)  553/    9191 :                     ;	Voice $00
(1)  554/    9191 :                     ;	$3B
(1)  555/    9191 :                     ;	$58, $31, $04, $02, 	$DF, $9F, $9F, $9F, 	$14, $08, $0E, $07
(1)  556/    9191 :                     ;	$10, $0E, $0F, $07, 	$6F, $7F, $3F, $8F, 	$05, $14, $18, $80
(1)  557/    9191 : (MACRO)             	smpsVcAlgorithm     $03
(1)  557/    9191 : =$3                 vcAlgorithm set $03
(1)  558/    9191 : (MACRO)             	smpsVcFeedback      $07
(1)  558/    9191 : =$7                 vcFeedback set $07
(1)  559/    9191 : (MACRO)             	smpsVcUnusedBits    $00
(1)  559/    9191 : =$0                 vcUnusedBits set $00
(1)  559/    9191 : =$0                 vcD1R1Unk set 0
(1)  559/    9191 : =$0                 vcD1R2Unk set 0
(1)  559/    9191 : =$0                 vcD1R3Unk set 0
(1)  559/    9191 : =$0                 vcD1R4Unk set 0
(1)  560/    9191 : (MACRO)             	smpsVcDetune        $00, $00, $03, $05
(1)  560/    9191 : =$0                 vcDT1 set $00
(1)  560/    9191 : =$0                 vcDT2 set $00
(1)  560/    9191 : =$3                 vcDT3 set $03
(1)  560/    9191 : =$5                 vcDT4 set $05
(1)  561/    9191 : (MACRO)             	smpsVcCoarseFreq    $02, $04, $01, $08
(1)  561/    9191 : =$2                 vcCF1 set $02
(1)  561/    9191 : =$4                 vcCF2 set $04
(1)  561/    9191 : =$1                 vcCF3 set $01
(1)  561/    9191 : =$8                 vcCF4 set $08
(1)  562/    9191 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $03
(1)  562/    9191 : =$2                 vcRS1 set $02
(1)  562/    9191 : =$2                 vcRS2 set $02
(1)  562/    9191 : =$2                 vcRS3 set $02
(1)  562/    9191 : =$3                 vcRS4 set $03
(1)  563/    9191 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  563/    9191 : =$1F                vcAR1 set $1F
(1)  563/    9191 : =$1F                vcAR2 set $1F
(1)  563/    9191 : =$1F                vcAR3 set $1F
(1)  563/    9191 : =$1F                vcAR4 set $1F
(1)  564/    9191 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  564/    9191 : =$0                 vcAM1 set $00<<5
(1)  564/    9191 : =$0                 vcAM2 set $00<<5
(1)  564/    9191 : =$0                 vcAM3 set $00<<5
(1)  564/    9191 : =$0                 vcAM4 set $00<<5
(1)  565/    9191 : (MACRO)             	smpsVcDecayRate1    $07, $0E, $08, $14
(1)  565/    9191 : =$7                 vcD1R1 set $07
(1)  565/    9191 : =$E                 vcD1R2 set $0E
(1)  565/    9191 : =$8                 vcD1R3 set $08
(1)  565/    9191 : =$14                vcD1R4 set $14
(1)  566/    9191 : (MACRO)             	smpsVcDecayRate2    $07, $0F, $0E, $10
(1)  566/    9191 : =$7                 vcD2R1 set $07
(1)  566/    9191 : =$F                 vcD2R2 set $0F
(1)  566/    9191 : =$E                 vcD2R3 set $0E
(1)  566/    9191 : =$10                vcD2R4 set $10
(1)  567/    9191 : (MACRO)             	smpsVcDecayLevel    $08, $03, $07, $06
(1)  567/    9191 : =$8                 vcDL1 set $08
(1)  567/    9191 : =$3                 vcDL2 set $03
(1)  567/    9191 : =$7                 vcDL3 set $07
(1)  567/    9191 : =$6                 vcDL4 set $06
(1)  568/    9191 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  568/    9191 : =$F                 vcRR1 set $0F
(1)  568/    9191 : =$F                 vcRR2 set $0F
(1)  568/    9191 : =$F                 vcRR3 set $0F
(1)  568/    9191 : =$F                 vcRR4 set $0F
(1)  569/    9191 : (MACRO)             	smpsVcTotalLevel    $00, $18, $14, $05
(1)  569/    9191 : =$0                 vcTL1 set $00
(1)  569/    9191 : =$18                vcTL2 set $18
(1)  569/    9191 : =$14                vcTL3 set $14
(1)  569/    9191 : =$5                 vcTL4 set $05
(1)  569/    9191 : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  569/    9192 :                     ;   0     1     2     3     4     5     6     7
(1)  569/    9192 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  569/    9192 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  569/    9192 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  569/    9192 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  569/    9192 : =$80                vcTLMask1 set $80
(1)  569/    9192 :                     
(1)  569/    9192 :                     
(1)  569/    9192 : 5831 0402                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  569/    9196 : DF9F 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  569/    919A : 1408 0E07                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  569/    919E : 100E 0F07                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  569/    91A2 : 6F7F 3F8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  569/    91A6 : 0514 1880                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  570/    91AA :                     
(1)  571/    91AA :                     ;	Voice $01
(1)  572/    91AA :                     ;	$2C
(1)  573/    91AA :                     ;	$34, $75, $34, $36, 	$1F, $5D, $9F, $5C, 	$03, $0C, $03, $0C
(1)  574/    91AA :                     ;	$02, $06, $02, $06, 	$AF, $8F, $AF, $8F, 	$1A, $80, $27, $80
(1)  575/    91AA : (MACRO)             	smpsVcAlgorithm     $04
(1)  575/    91AA : =$4                 vcAlgorithm set $04
(1)  576/    91AA : (MACRO)             	smpsVcFeedback      $05
(1)  576/    91AA : =$5                 vcFeedback set $05
(1)  577/    91AA : (MACRO)             	smpsVcUnusedBits    $00
(1)  577/    91AA : =$0                 vcUnusedBits set $00
(1)  577/    91AA : =$0                 vcD1R1Unk set 0
(1)  577/    91AA : =$0                 vcD1R2Unk set 0
(1)  577/    91AA : =$0                 vcD1R3Unk set 0
(1)  577/    91AA : =$0                 vcD1R4Unk set 0
(1)  578/    91AA : (MACRO)             	smpsVcDetune        $03, $03, $07, $03
(1)  578/    91AA : =$3                 vcDT1 set $03
(1)  578/    91AA : =$3                 vcDT2 set $03
(1)  578/    91AA : =$7                 vcDT3 set $07
(1)  578/    91AA : =$3                 vcDT4 set $03
(1)  579/    91AA : (MACRO)             	smpsVcCoarseFreq    $06, $04, $05, $04
(1)  579/    91AA : =$6                 vcCF1 set $06
(1)  579/    91AA : =$4                 vcCF2 set $04
(1)  579/    91AA : =$5                 vcCF3 set $05
(1)  579/    91AA : =$4                 vcCF4 set $04
(1)  580/    91AA : (MACRO)             	smpsVcRateScale     $01, $02, $01, $00
(1)  580/    91AA : =$1                 vcRS1 set $01
(1)  580/    91AA : =$2                 vcRS2 set $02
(1)  580/    91AA : =$1                 vcRS3 set $01
(1)  580/    91AA : =$0                 vcRS4 set $00
(1)  581/    91AA : (MACRO)             	smpsVcAttackRate    $1C, $1F, $1D, $1F
(1)  581/    91AA : =$1C                vcAR1 set $1C
(1)  581/    91AA : =$1F                vcAR2 set $1F
(1)  581/    91AA : =$1D                vcAR3 set $1D
(1)  581/    91AA : =$1F                vcAR4 set $1F
(1)  582/    91AA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  582/    91AA : =$0                 vcAM1 set $00<<5
(1)  582/    91AA : =$0                 vcAM2 set $00<<5
(1)  582/    91AA : =$0                 vcAM3 set $00<<5
(1)  582/    91AA : =$0                 vcAM4 set $00<<5
(1)  583/    91AA : (MACRO)             	smpsVcDecayRate1    $0C, $03, $0C, $03
(1)  583/    91AA : =$C                 vcD1R1 set $0C
(1)  583/    91AA : =$3                 vcD1R2 set $03
(1)  583/    91AA : =$C                 vcD1R3 set $0C
(1)  583/    91AA : =$3                 vcD1R4 set $03
(1)  584/    91AA : (MACRO)             	smpsVcDecayRate2    $06, $02, $06, $02
(1)  584/    91AA : =$6                 vcD2R1 set $06
(1)  584/    91AA : =$2                 vcD2R2 set $02
(1)  584/    91AA : =$6                 vcD2R3 set $06
(1)  584/    91AA : =$2                 vcD2R4 set $02
(1)  585/    91AA : (MACRO)             	smpsVcDecayLevel    $08, $0A, $08, $0A
(1)  585/    91AA : =$8                 vcDL1 set $08
(1)  585/    91AA : =$A                 vcDL2 set $0A
(1)  585/    91AA : =$8                 vcDL3 set $08
(1)  585/    91AA : =$A                 vcDL4 set $0A
(1)  586/    91AA : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  586/    91AA : =$F                 vcRR1 set $0F
(1)  586/    91AA : =$F                 vcRR2 set $0F
(1)  586/    91AA : =$F                 vcRR3 set $0F
(1)  586/    91AA : =$F                 vcRR4 set $0F
(1)  587/    91AA : (MACRO)             	smpsVcTotalLevel    $00, $27, $00, $1A
(1)  587/    91AA : =$0                 vcTL1 set $00
(1)  587/    91AA : =$27                vcTL2 set $27
(1)  587/    91AA : =$0                 vcTL3 set $00
(1)  587/    91AA : =$1A                vcTL4 set $1A
(1)  587/    91AA : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  587/    91AB :                     ;   0     1     2     3     4     5     6     7
(1)  587/    91AB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  587/    91AB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  587/    91AB : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  587/    91AB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  587/    91AB : =$80                vcTLMask1 set $80
(1)  587/    91AB :                     
(1)  587/    91AB :                     
(1)  587/    91AB : 3475 3436                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  587/    91AF : 1F5D 9F5C                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  587/    91B3 : 030C 030C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  587/    91B7 : 0206 0206                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  587/    91BB : AF8F AF8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  587/    91BF : 1A80 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  588/    91C3 :                     
(1)  589/    91C3 :                     ;	Voice $02
(1)  590/    91C3 :                     ;	$3A
(1)  591/    91C3 :                     ;	$07, $06, $02, $01, 	$5F, $5F, $5F, $9F, 	$09, $02, $0A, $2C
(1)  592/    91C3 :                     ;	$02, $16, $54, $09, 	$5F, $7F, $AF, $6F, 	$18, $17, $1B, $80
(1)  593/    91C3 : (MACRO)             	smpsVcAlgorithm     $02
(1)  593/    91C3 : =$2                 vcAlgorithm set $02
(1)  594/    91C3 : (MACRO)             	smpsVcFeedback      $07
(1)  594/    91C3 : =$7                 vcFeedback set $07
(1)  595/    91C3 : (MACRO)             	smpsVcUnusedBits    $00
(1)  595/    91C3 : =$0                 vcUnusedBits set $00
(1)  595/    91C3 : =$0                 vcD1R1Unk set 0
(1)  595/    91C3 : =$0                 vcD1R2Unk set 0
(1)  595/    91C3 : =$0                 vcD1R3Unk set 0
(1)  595/    91C3 : =$0                 vcD1R4Unk set 0
(1)  596/    91C3 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  596/    91C3 : =$0                 vcDT1 set $00
(1)  596/    91C3 : =$0                 vcDT2 set $00
(1)  596/    91C3 : =$0                 vcDT3 set $00
(1)  596/    91C3 : =$0                 vcDT4 set $00
(1)  597/    91C3 : (MACRO)             	smpsVcCoarseFreq    $01, $02, $06, $07
(1)  597/    91C3 : =$1                 vcCF1 set $01
(1)  597/    91C3 : =$2                 vcCF2 set $02
(1)  597/    91C3 : =$6                 vcCF3 set $06
(1)  597/    91C3 : =$7                 vcCF4 set $07
(1)  598/    91C3 : (MACRO)             	smpsVcRateScale     $02, $01, $01, $01
(1)  598/    91C3 : =$2                 vcRS1 set $02
(1)  598/    91C3 : =$1                 vcRS2 set $01
(1)  598/    91C3 : =$1                 vcRS3 set $01
(1)  598/    91C3 : =$1                 vcRS4 set $01
(1)  599/    91C3 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  599/    91C3 : =$1F                vcAR1 set $1F
(1)  599/    91C3 : =$1F                vcAR2 set $1F
(1)  599/    91C3 : =$1F                vcAR3 set $1F
(1)  599/    91C3 : =$1F                vcAR4 set $1F
(1)  600/    91C3 : (MACRO)             	smpsVcAmpMod        $01, $00, $00, $00
(1)  600/    91C3 : =$20                vcAM1 set $01<<5
(1)  600/    91C3 : =$0                 vcAM2 set $00<<5
(1)  600/    91C3 : =$0                 vcAM3 set $00<<5
(1)  600/    91C3 : =$0                 vcAM4 set $00<<5
(1)  601/    91C3 : (MACRO)             	smpsVcDecayRate1    $0C, $0A, $02, $09
(1)  601/    91C3 : =$C                 vcD1R1 set $0C
(1)  601/    91C3 : =$A                 vcD1R2 set $0A
(1)  601/    91C3 : =$2                 vcD1R3 set $02
(1)  601/    91C3 : =$9                 vcD1R4 set $09
(1)  602/    91C3 : (MACRO)             	smpsVcDecayRate2    $09, $54, $16, $02
(1)  602/    91C3 : =$9                 vcD2R1 set $09
(1)  602/    91C3 : =$54                vcD2R2 set $54
(1)  602/    91C3 : =$16                vcD2R3 set $16
(1)  602/    91C3 : =$2                 vcD2R4 set $02
(1)  603/    91C3 : (MACRO)             	smpsVcDecayLevel    $06, $0A, $07, $05
(1)  603/    91C3 : =$6                 vcDL1 set $06
(1)  603/    91C3 : =$A                 vcDL2 set $0A
(1)  603/    91C3 : =$7                 vcDL3 set $07
(1)  603/    91C3 : =$5                 vcDL4 set $05
(1)  604/    91C3 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  604/    91C3 : =$F                 vcRR1 set $0F
(1)  604/    91C3 : =$F                 vcRR2 set $0F
(1)  604/    91C3 : =$F                 vcRR3 set $0F
(1)  604/    91C3 : =$F                 vcRR4 set $0F
(1)  605/    91C3 : (MACRO)             	smpsVcTotalLevel    $00, $1B, $17, $18
(1)  605/    91C3 : =$0                 vcTL1 set $00
(1)  605/    91C3 : =$1B                vcTL2 set $1B
(1)  605/    91C3 : =$17                vcTL3 set $17
(1)  605/    91C3 : =$18                vcTL4 set $18
(1)  605/    91C3 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  605/    91C4 :                     ;   0     1     2     3     4     5     6     7
(1)  605/    91C4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  605/    91C4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  605/    91C4 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  605/    91C4 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  605/    91C4 : =$80                vcTLMask1 set $80
(1)  605/    91C4 :                     
(1)  605/    91C4 :                     
(1)  605/    91C4 : 0706 0201                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  605/    91C8 : 5F5F 5F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  605/    91CC : 0902 0A2C                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  605/    91D0 : 0216 5409                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  605/    91D4 : 5F7F AF6F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  605/    91D8 : 1817 1B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  606/    91DC :                     
(1)  607/    91DC :                     ;	Voice $03
(1)  608/    91DC :                     ;	$2D
(1)  609/    91DC :                     ;	$77, $65, $05, $15, 	$1F, $5F, $5F, $5F, 	$00, $03, $03, $05
(1)  610/    91DC :                     ;	$00, $01, $02, $01, 	$0F, $1C, $1C, $1C, 	$22, $83, $80, $80
(1)  611/    91DC : (MACRO)             	smpsVcAlgorithm     $05
(1)  611/    91DC : =$5                 vcAlgorithm set $05
(1)  612/    91DC : (MACRO)             	smpsVcFeedback      $05
(1)  612/    91DC : =$5                 vcFeedback set $05
(1)  613/    91DC : (MACRO)             	smpsVcUnusedBits    $00
(1)  613/    91DC : =$0                 vcUnusedBits set $00
(1)  613/    91DC : =$0                 vcD1R1Unk set 0
(1)  613/    91DC : =$0                 vcD1R2Unk set 0
(1)  613/    91DC : =$0                 vcD1R3Unk set 0
(1)  613/    91DC : =$0                 vcD1R4Unk set 0
(1)  614/    91DC : (MACRO)             	smpsVcDetune        $01, $00, $06, $07
(1)  614/    91DC : =$1                 vcDT1 set $01
(1)  614/    91DC : =$0                 vcDT2 set $00
(1)  614/    91DC : =$6                 vcDT3 set $06
(1)  614/    91DC : =$7                 vcDT4 set $07
(1)  615/    91DC : (MACRO)             	smpsVcCoarseFreq    $05, $05, $05, $07
(1)  615/    91DC : =$5                 vcCF1 set $05
(1)  615/    91DC : =$5                 vcCF2 set $05
(1)  615/    91DC : =$5                 vcCF3 set $05
(1)  615/    91DC : =$7                 vcCF4 set $07
(1)  616/    91DC : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1)  616/    91DC : =$1                 vcRS1 set $01
(1)  616/    91DC : =$1                 vcRS2 set $01
(1)  616/    91DC : =$1                 vcRS3 set $01
(1)  616/    91DC : =$0                 vcRS4 set $00
(1)  617/    91DC : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  617/    91DC : =$1F                vcAR1 set $1F
(1)  617/    91DC : =$1F                vcAR2 set $1F
(1)  617/    91DC : =$1F                vcAR3 set $1F
(1)  617/    91DC : =$1F                vcAR4 set $1F
(1)  618/    91DC : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  618/    91DC : =$0                 vcAM1 set $00<<5
(1)  618/    91DC : =$0                 vcAM2 set $00<<5
(1)  618/    91DC : =$0                 vcAM3 set $00<<5
(1)  618/    91DC : =$0                 vcAM4 set $00<<5
(1)  619/    91DC : (MACRO)             	smpsVcDecayRate1    $05, $03, $03, $00
(1)  619/    91DC : =$5                 vcD1R1 set $05
(1)  619/    91DC : =$3                 vcD1R2 set $03
(1)  619/    91DC : =$3                 vcD1R3 set $03
(1)  619/    91DC : =$0                 vcD1R4 set $00
(1)  620/    91DC : (MACRO)             	smpsVcDecayRate2    $01, $02, $01, $00
(1)  620/    91DC : =$1                 vcD2R1 set $01
(1)  620/    91DC : =$2                 vcD2R2 set $02
(1)  620/    91DC : =$1                 vcD2R3 set $01
(1)  620/    91DC : =$0                 vcD2R4 set $00
(1)  621/    91DC : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $00
(1)  621/    91DC : =$1                 vcDL1 set $01
(1)  621/    91DC : =$1                 vcDL2 set $01
(1)  621/    91DC : =$1                 vcDL3 set $01
(1)  621/    91DC : =$0                 vcDL4 set $00
(1)  622/    91DC : (MACRO)             	smpsVcReleaseRate   $0C, $0C, $0C, $0F
(1)  622/    91DC : =$C                 vcRR1 set $0C
(1)  622/    91DC : =$C                 vcRR2 set $0C
(1)  622/    91DC : =$C                 vcRR3 set $0C
(1)  622/    91DC : =$F                 vcRR4 set $0F
(1)  623/    91DC : (MACRO)             	smpsVcTotalLevel    $00, $00, $03, $22
(1)  623/    91DC : =$0                 vcTL1 set $00
(1)  623/    91DC : =$0                 vcTL2 set $00
(1)  623/    91DC : =$3                 vcTL3 set $03
(1)  623/    91DC : =$22                vcTL4 set $22
(1)  623/    91DC : 2D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  623/    91DD :                     ;   0     1     2     3     4     5     6     7
(1)  623/    91DD :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  623/    91DD : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  623/    91DD : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  623/    91DD : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  623/    91DD : =$80                vcTLMask1 set $80
(1)  623/    91DD :                     
(1)  623/    91DD :                     
(1)  623/    91DD : 7765 0515                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  623/    91E1 : 1F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  623/    91E5 : 0003 0305                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  623/    91E9 : 0001 0201                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  623/    91ED : 0F1C 1C1C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  623/    91F1 : 2283 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  624/    91F5 :                     
(1)  625/    91F5 :                     
   26/    91F5 :                        		include		"Music/EveningStar.asm"
(1)    1/    91F5 :                     EveningStar_Header:
(1)    2/    91F5 : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    91F5 :                     
(1)    2/    91F5 : =$3                 SourceDriver set 3
(1)    2/    91F5 :                     
(1)    2/    91F5 : =$0                 SourceSMPS2ASM set 0
(1)    2/    91F5 :                     
(1)    2/    91F5 : =$91F5              songStart set *
(1)    2/    91F5 :                     
(1)    2/    91F5 :                     
(1)    3/    91F5 : (MACRO)             	smpsHeaderVoice     EveningStar_Voices
(1)    3/    91F5 : 9196                                dc.w    z80_ptr(EVENINGSTAR_VOICES)
(1)    4/    91F7 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    91F7 : 0603                        dc.b    $06,$03
(1)    5/    91F9 : (MACRO)             	smpsHeaderTempo     $01, $4A
(1)    5/    91F9 : 01                          dc.b    $01
(1)    5/    91FA :  (MACRO-2)                  convertMainTempoMod $4A
(1)    5/    91FA : 4A                                  dc.b    $4A
(1)    6/    91FB :                     
(1)    7/    91FB : (MACRO)             	smpsHeaderDAC       EveningStar_DAC
(1)    7/    91FB :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_DAC
(1)    7/    91FB : 4496                                dc.w    z80_ptr(EVENINGSTAR_DAC)
(1)    7/    91FD : 0000                                dc.w    $00
(1)    8/    91FF : (MACRO)             	smpsHeaderFM        EveningStar_FM1,	$00, $10
(1)    8/    91FF :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_FM1
(1)    8/    91FF : 2592                                dc.w    z80_ptr(EVENINGSTAR_FM1)
(1)    8/    9201 : 0010                        dc.b    $00,$10
(1)    9/    9203 : (MACRO)             	smpsHeaderFM        EveningStar_FM2,	$00, $12
(1)    9/    9203 :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_FM2
(1)    9/    9203 : B192                                dc.w    z80_ptr(EVENINGSTAR_FM2)
(1)    9/    9205 : 0012                        dc.b    $00,$12
(1)   10/    9207 : (MACRO)             	smpsHeaderFM        EveningStar_FM3,	$00, $12
(1)   10/    9207 :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_FM3
(1)   10/    9207 : 4C93                                dc.w    z80_ptr(EVENINGSTAR_FM3)
(1)   10/    9209 : 0012                        dc.b    $00,$12
(1)   11/    920B : (MACRO)             	smpsHeaderFM        EveningStar_FM4,	$00, $12
(1)   11/    920B :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_FM4
(1)   11/    920B : 2394                                dc.w    z80_ptr(EVENINGSTAR_FM4)
(1)   11/    920D : 0012                        dc.b    $00,$12
(1)   12/    920F : (MACRO)             	smpsHeaderFM        EveningStar_FM5,	$00, $1C
(1)   12/    920F :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_FM5
(1)   12/    920F : 1695                                dc.w    z80_ptr(EVENINGSTAR_FM5)
(1)   12/    9211 : 001C                        dc.b    $00,$1C
(1)   13/    9213 : (MACRO)             	smpsHeaderPSG       EveningStar_PSG1,	$F4, $03, $00, $00
(1)   13/    9213 :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_PSG1
(1)   13/    9213 : 3395                                dc.w    z80_ptr(EVENINGSTAR_PSG1)
(1)   13/    9215 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   13/    9215 : F4                                  dc.b    $F4
(1)   13/    9216 : 0300 00                     dc.b    $03,$00,$00
(1)   14/    9219 : (MACRO)             	smpsHeaderPSG       EveningStar_PSG2,	$F4, $04, $00, $00
(1)   14/    9219 :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_PSG2
(1)   14/    9219 : 8595                                dc.w    z80_ptr(EVENINGSTAR_PSG2)
(1)   14/    921B :  (MACRO-2)                  PSGPitchConvert $F4
(1)   14/    921B : F4                                  dc.b    $F4
(1)   14/    921C : 0400 00                     dc.b    $04,$00,$00
(1)   15/    921F : (MACRO)             	smpsHeaderPSG       EveningStar_PSG3,	$23, $01, $00, $00
(1)   15/    921F :  (MACRO-2)                  CheckedChannelPointer EVENINGSTAR_PSG3
(1)   15/    921F : DE95                                dc.w    z80_ptr(EVENINGSTAR_PSG3)
(1)   15/    9221 :  (MACRO-2)                  PSGPitchConvert $23
(1)   15/    9221 : 23                                  dc.b    $23
(1)   15/    9222 : 0100 00                     dc.b    $01,$00,$00
(1)   16/    9225 :                     
(1)   17/    9225 :                     ; FM1 Data
(1)   18/    9225 :                     EveningStar_FM1:
(1)   19/    9225 : (MACRO)             	smpsSetvoice        $00
(1)   19/    9225 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    9225 : EF00                                dc.b    $EF,$00
(1)   20/    9227 : 9C60 9B60 9460 E730 	dc.b	nEb2, $60, nD2, $60, nG1, $60, smpsNoAttack, $30, nG1, $08, nG2, $0C
             922F : 9408 A00C         
(1)   21/    9233 : 9404 9708 9604 9408 	dc.b	nG1, $04, nBb1, $08, nA1, $04, nG1, $08, nF1, $04
             923B : 9204               
(1)   22/    923D :                     
(1)   23/    923D :                     EveningStar_Jump01:
(1)   24/    923D : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   24/    923D : F8                          dc.b    $F8
(1)   24/    923E : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   25/    9240 : (MACRO)             	smpsAlterPitch      $FF
(1)   25/    9240 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   25/    9240 : FBFF                                dc.b    $FB,$FF
(1)   26/    9242 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   26/    9242 : F8                          dc.b    $F8
(1)   26/    9243 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   27/    9245 : (MACRO)             	smpsAlterPitch      $F9
(1)   27/    9245 :  (MACRO-2)                  smpsChangeTransposition $F9
(1)   27/    9245 : FBF9                                dc.b    $FB,$F9
(1)   28/    9247 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   28/    9247 : F8                          dc.b    $F8
(1)   28/    9248 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   29/    924A : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   29/    924A : F8                          dc.b    $F8
(1)   29/    924B : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   30/    924D : (MACRO)             	smpsAlterPitch      $08
(1)   30/    924D :  (MACRO-2)                  smpsChangeTransposition $08
(1)   30/    924D : FB08                                dc.b    $FB,$08
(1)   31/    924F : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   31/    924F : F8                          dc.b    $F8
(1)   31/    9250 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   32/    9252 : (MACRO)             	smpsAlterPitch      $FF
(1)   32/    9252 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   32/    9252 : FBFF                                dc.b    $FB,$FF
(1)   33/    9254 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   33/    9254 : F8                          dc.b    $F8
(1)   33/    9255 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   34/    9257 : (MACRO)             	smpsAlterPitch      $F9
(1)   34/    9257 :  (MACRO-2)                  smpsChangeTransposition $F9
(1)   34/    9257 : FBF9                                dc.b    $FB,$F9
(1)   35/    9259 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   35/    9259 : F8                          dc.b    $F8
(1)   35/    925A : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   36/    925C : (MACRO)             	smpsAlterPitch      $08
(1)   36/    925C :  (MACRO-2)                  smpsChangeTransposition $08
(1)   36/    925C : FB08                                dc.b    $FB,$08
(1)   37/    925E : (MACRO)             	smpsCall            EveningStar_Call0B
(1)   37/    925E : F8                          dc.b    $F8
(1)   37/    925F : 9C92                                dc.w    z80_ptr(EVENINGSTAR_CALL0B)
(1)   38/    9261 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   38/    9261 : F8                          dc.b    $F8
(1)   38/    9262 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   39/    9264 : (MACRO)             	smpsAlterPitch      $FF
(1)   39/    9264 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   39/    9264 : FBFF                                dc.b    $FB,$FF
(1)   40/    9266 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   40/    9266 : F8                          dc.b    $F8
(1)   40/    9267 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   41/    9269 : (MACRO)             	smpsAlterPitch      $F9
(1)   41/    9269 :  (MACRO-2)                  smpsChangeTransposition $F9
(1)   41/    9269 : FBF9                                dc.b    $FB,$F9
(1)   42/    926B : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   42/    926B : F8                          dc.b    $F8
(1)   42/    926C : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   43/    926E : (MACRO)             	smpsAlterPitch      $08
(1)   43/    926E :  (MACRO-2)                  smpsChangeTransposition $08
(1)   43/    926E : FB08                                dc.b    $FB,$08
(1)   44/    9270 : 940C 9480 38A0 0494 	dc.b	nG1, $0C, nG1, nRst, $38, nG2, $04, nG1, $08, nF1, $04
             9278 : 0892 04            
(1)   45/    927B : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   45/    927B : F8                          dc.b    $F8
(1)   45/    927C : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   46/    927E : (MACRO)             	smpsAlterPitch      $FF
(1)   46/    927E :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   46/    927E : FBFF                                dc.b    $FB,$FF
(1)   47/    9280 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   47/    9280 : F8                          dc.b    $F8
(1)   47/    9281 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   48/    9283 : (MACRO)             	smpsAlterPitch      $F9
(1)   48/    9283 :  (MACRO-2)                  smpsChangeTransposition $F9
(1)   48/    9283 : FBF9                                dc.b    $FB,$F9
(1)   49/    9285 : (MACRO)             	smpsCall            EveningStar_Call0A
(1)   49/    9285 : F8                          dc.b    $F8
(1)   49/    9286 : 9092                                dc.w    z80_ptr(EVENINGSTAR_CALL0A)
(1)   50/    9288 : (MACRO)             	smpsAlterPitch      $08
(1)   50/    9288 :  (MACRO-2)                  smpsChangeTransposition $08
(1)   50/    9288 : FB08                                dc.b    $FB,$08
(1)   51/    928A : (MACRO)             	smpsCall            EveningStar_Call0B
(1)   51/    928A : F8                          dc.b    $F8
(1)   51/    928B : 9C92                                dc.w    z80_ptr(EVENINGSTAR_CALL0B)
(1)   52/    928D : (MACRO)             	smpsJump            EveningStar_Jump01
(1)   52/    928D : F6                          dc.b    $F6
(1)   52/    928E : 3D92                                dc.w    z80_ptr(EVENINGSTAR_JUMP01)
(1)   53/    9290 :                     
(1)   54/    9290 :                     EveningStar_Call0A:
(1)   55/    9290 : 9C0C 9C80 249C 0C80 	dc.b	nEb2, $0C, nEb2, nRst, $24, nEb2, $0C, nRst, $08, nEb2, $10
             9298 : 089C 10            
(1)   56/    929B : (MACRO)             	smpsReturn
(1)   56/    929B : F9                                  dc.b    $F9
(1)   57/    929C :                     
(1)   58/    929C :                     EveningStar_Call0B:
(1)   59/    929C : 9408 A00C 0496 08A2 	dc.b	nG1, $08, nG2, $0C, $04, nA1, $08, nA2, $0C, $04, nBb1, $08
             92A4 : 0C04 9708         
(1)   60/    92A8 : A30C 0499 08A5 0C04 	dc.b	nBb2, $0C, $04, nC2, $08, nC3, $0C, $04
(1)   61/    92B0 : (MACRO)             	smpsReturn
(1)   61/    92B0 : F9                                  dc.b    $F9
(1)   62/    92B1 :                     
(1)   63/    92B1 :                     ; FM2 Data
(1)   64/    92B1 :                     EveningStar_FM2:
(1)   65/    92B1 : (MACRO)             	smpsSetvoice        $01
(1)   65/    92B1 :  (MACRO-2)                  smpsFMvoice $01
(1)   65/    92B1 : EF01                                dc.b    $EF,$01
(1)   66/    92B3 : (MACRO)             	smpsAlterPitch      $F9
(1)   66/    92B3 :  (MACRO-2)                  smpsChangeTransposition $F9
(1)   66/    92B3 : FBF9                                dc.b    $FB,$F9
(1)   67/    92B5 : (MACRO)             	smpsCall            EveningStar_Call06
(1)   67/    92B5 : F8                          dc.b    $F8
(1)   67/    92B6 : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)   68/    92B8 : (MACRO)             	smpsAlterPitch      $04
(1)   68/    92B8 :  (MACRO-2)                  smpsChangeTransposition $04
(1)   68/    92B8 : FB04                                dc.b    $FB,$04
(1)   69/    92BA : (MACRO)             	smpsCall            EveningStar_Call07
(1)   69/    92BA : F8                          dc.b    $F8
(1)   69/    92BB : CE93                                dc.w    z80_ptr(EVENINGSTAR_CALL07)
(1)   70/    92BD : (MACRO)             	smpsAlterPitch      $FF
(1)   70/    92BD :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   70/    92BD : FBFF                                dc.b    $FB,$FF
(1)   71/    92BF : (MACRO)             	smpsCall            EveningStar_Call06
(1)   71/    92BF : F8                          dc.b    $F8
(1)   71/    92C0 : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)   72/    92C2 : (MACRO)             	smpsCall            EveningStar_Call08
(1)   72/    92C2 : F8                          dc.b    $F8
(1)   72/    92C3 : 1294                                dc.w    z80_ptr(EVENINGSTAR_CALL08)
(1)   73/    92C5 : (MACRO)             	smpsAlterPitch      $04
(1)   73/    92C5 :  (MACRO-2)                  smpsChangeTransposition $04
(1)   73/    92C5 : FB04                                dc.b    $FB,$04
(1)   74/    92C7 : (MACRO)             	smpsSetvoice        $02
(1)   74/    92C7 :  (MACRO-2)                  smpsFMvoice $02
(1)   74/    92C7 : EF02                                dc.b    $EF,$02
(1)   75/    92C9 : (MACRO)             	smpsFMAlterVol      $02
(1)   75/    92C9 : E602                                dc.b    $E6,$02
(1)   76/    92CB :                     
(1)   77/    92CB :                     EveningStar_Loop05:
(1)   78/    92CB : (MACRO)             	smpsCall            EveningStar_Call01
(1)   78/    92CB : F8                          dc.b    $F8
(1)   78/    92CC : D892                                dc.w    z80_ptr(EVENINGSTAR_CALL01)
(1)   79/    92CE : 8060                	dc.b	nRst, $60
(1)   80/    92D0 : (MACRO)             	smpsLoop            $00, $02, EveningStar_Loop05
(1)   80/    92D0 : F7                          dc.b    $F7
(1)   80/    92D1 : 0002                        dc.b    $00,$02
(1)   80/    92D3 : CB92                                dc.w    z80_ptr(EVENINGSTAR_LOOP05)
(1)   81/    92D5 : (MACRO)             	smpsJump            EveningStar_Loop05
(1)   81/    92D5 : F6                          dc.b    $F6
(1)   81/    92D6 : CB92                                dc.w    z80_ptr(EVENINGSTAR_LOOP05)
(1)   82/    92D8 :                     
(1)   83/    92D8 :                     EveningStar_Call01:
(1)   84/    92D8 : B60C 80B8 80BA 03E7 	dc.b	nF4, $0C, nRst, nG4, nRst, nA4, $03, smpsNoAttack, nBb4, $11, nG4, $04
             92E0 : BB11 B804         
(1)   85/    92E4 : 800C BDE7 0880 04BD 	dc.b	nRst, $0C, nC5, smpsNoAttack, $08, nRst, $04, nC5, $08, nRst, $04, nC5
             92EC : 0880 04BD         
(1)   86/    92F0 : 0880 04BF 0880 04BB 	dc.b	$08, nRst, $04, nD5, $08, nRst, $04, nBb4, $03, smpsNoAttack, nC5, $05
             92F8 : 03E7 BD05         
(1)   87/    92FC : BB04 8008 B81C B60C 	dc.b	nBb4, $04, nRst, $08, nG4, $1C, nF4, $0C, nRst, nG4, nRst, nBb4
             9304 : 80B8 80BB         
(1)   88/    9308 : 14B8 0480 0CC2 E708 	dc.b	$14, nG4, $04, nRst, $0C, nF5, smpsNoAttack, $08, nRst, $04, nG5, $08
             9310 : 8004 C408         
(1)   89/    9314 : 8004 C208 C104 8008 	dc.b	nRst, $04, nF5, $08, nE5, $04, nRst, $08, nD5, $34, nRst, $0C
             931C : BF34 800C         
(1)   90/    9320 : BB14 8004 B808 8004 	dc.b	nBb4, $14, nRst, $04, nG4, $08, nRst, $04, nBb4, $14, nC5, $04
             9328 : BB14 BD04         
(1)   91/    932C : 800C C2E7 0CC0 BF08 	dc.b	nRst, $0C, nF5, smpsNoAttack, $0C, nEb5, nD5, $08, nEb5, $04, nRst, $08
             9334 : C004 8008         
(1)   92/    9338 : BD03 E7BF 0980 04BD 	dc.b	nC5, $03, smpsNoAttack, nD5, $09, nRst, $04, nC5, $0C, nBb4, $08, nC5
             9340 : 0CBB 08BD         
(1)   93/    9344 : 0CB8 04E7 14BF 4C   	dc.b	$0C, nG4, $04, smpsNoAttack, $14, nD5, $4C
(1)   94/    934B : (MACRO)             	smpsReturn
(1)   94/    934B : F9                                  dc.b    $F9
(1)   95/    934C :                     
(1)   96/    934C :                     ; FM3 Data
(1)   97/    934C :                     EveningStar_FM3:
(1)   98/    934C : (MACRO)             	smpsSetvoice        $01
(1)   98/    934C :  (MACRO-2)                  smpsFMvoice $01
(1)   98/    934C : EF01                                dc.b    $EF,$01
(1)   99/    934E : (MACRO)             	smpsCall            EveningStar_Call06
(1)   99/    934E : F8                          dc.b    $F8
(1)   99/    934F : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)  100/    9351 : (MACRO)             	smpsCall            EveningStar_Call07
(1)  100/    9351 : F8                          dc.b    $F8
(1)  100/    9352 : CE93                                dc.w    z80_ptr(EVENINGSTAR_CALL07)
(1)  101/    9354 : (MACRO)             	smpsCall            EveningStar_Call06
(1)  101/    9354 : F8                          dc.b    $F8
(1)  101/    9355 : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)  102/    9357 : (MACRO)             	smpsCall            EveningStar_Call08
(1)  102/    9357 : F8                          dc.b    $F8
(1)  102/    9358 : 1294                                dc.w    z80_ptr(EVENINGSTAR_CALL08)
(1)  103/    935A : (MACRO)             	smpsFMAlterVol      $FB
(1)  103/    935A : E6FB                                dc.b    $E6,$FB
(1)  104/    935C :                     
(1)  105/    935C :                     EveningStar_Loop04:
(1)  106/    935C : (MACRO)             	smpsCall            EveningStar_Call06
(1)  106/    935C : F8                          dc.b    $F8
(1)  106/    935D : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)  107/    935F : (MACRO)             	smpsCall            EveningStar_Call07
(1)  107/    935F : F8                          dc.b    $F8
(1)  107/    9360 : CE93                                dc.w    z80_ptr(EVENINGSTAR_CALL07)
(1)  108/    9362 : (MACRO)             	smpsCall            EveningStar_Call06
(1)  108/    9362 : F8                          dc.b    $F8
(1)  108/    9363 : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)  109/    9365 : (MACRO)             	smpsFMAlterVol      $0A
(1)  109/    9365 : E60A                                dc.b    $E6,$0A
(1)  110/    9367 : (MACRO)             	smpsPan             panLeft, $00
(1)  110/    9367 : =$0                 panNone set $00
(1)  110/    9367 : =$40                panRight set $40
(1)  110/    9367 : =$80                panLeft set $80
(1)  110/    9367 : =$C0                panCentre set $C0
(1)  110/    9367 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  110/    9367 : E080                        dc.b $E0,PANLEFT+$00
(1)  111/    9369 : B30C                	dc.b	nD4, $0C
(1)  112/    936B : (MACRO)             	smpsFMAlterVol      $F6
(1)  112/    936B : E6F6                                dc.b    $E6,$F6
(1)  113/    936D : (MACRO)             	smpsPan             panCenter, $00
(1)  113/    936D : =$0                 panNone set $00
(1)  113/    936D : =$40                panRight set $40
(1)  113/    936D : =$80                panLeft set $80
(1)  113/    936D : =$C0                panCentre set $C0
(1)  113/    936D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  113/    936D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  114/    936F : 0804                	dc.b	$08, $04
(1)  115/    9371 : (MACRO)             	smpsFMAlterVol      $0A
(1)  115/    9371 : E60A                                dc.b    $E6,$0A
(1)  116/    9373 : (MACRO)             	smpsPan             panLeft, $00
(1)  116/    9373 : =$0                 panNone set $00
(1)  116/    9373 : =$40                panRight set $40
(1)  116/    9373 : =$80                panLeft set $80
(1)  116/    9373 : =$C0                panCentre set $C0
(1)  116/    9373 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  116/    9373 : E080                        dc.b $E0,PANLEFT+$00
(1)  117/    9375 : 08                  	dc.b	$08
(1)  118/    9376 : (MACRO)             	smpsFMAlterVol      $F6
(1)  118/    9376 : E6F6                                dc.b    $E6,$F6
(1)  119/    9378 : (MACRO)             	smpsPan             panCenter, $00
(1)  119/    9378 : =$0                 panNone set $00
(1)  119/    9378 : =$40                panRight set $40
(1)  119/    9378 : =$80                panLeft set $80
(1)  119/    9378 : =$C0                panCentre set $C0
(1)  119/    9378 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  119/    9378 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  120/    937A : 04                  	dc.b	$04
(1)  121/    937B : (MACRO)             	smpsFMAlterVol      $0A
(1)  121/    937B : E60A                                dc.b    $E6,$0A
(1)  122/    937D : (MACRO)             	smpsPan             panLeft, $00
(1)  122/    937D : =$0                 panNone set $00
(1)  122/    937D : =$40                panRight set $40
(1)  122/    937D : =$80                panLeft set $80
(1)  122/    937D : =$C0                panCentre set $C0
(1)  122/    937D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  122/    937D : E080                        dc.b $E0,PANLEFT+$00
(1)  123/    937F : 08                  	dc.b	$08
(1)  124/    9380 : (MACRO)             	smpsFMAlterVol      $F6
(1)  124/    9380 : E6F6                                dc.b    $E6,$F6
(1)  125/    9382 : (MACRO)             	smpsPan             panCenter, $00
(1)  125/    9382 : =$0                 panNone set $00
(1)  125/    9382 : =$40                panRight set $40
(1)  125/    9382 : =$80                panLeft set $80
(1)  125/    9382 : =$C0                panCentre set $C0
(1)  125/    9382 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  125/    9382 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  126/    9384 : 04                  	dc.b	$04
(1)  127/    9385 : (MACRO)             	smpsCall            EveningStar_Call09
(1)  127/    9385 : F8                          dc.b    $F8
(1)  127/    9386 : FF93                                dc.w    z80_ptr(EVENINGSTAR_CALL09)
(1)  128/    9388 : (MACRO)             	smpsCall            EveningStar_Call06
(1)  128/    9388 : F8                          dc.b    $F8
(1)  128/    9389 : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)  129/    938B : (MACRO)             	smpsCall            EveningStar_Call07
(1)  129/    938B : F8                          dc.b    $F8
(1)  129/    938C : CE93                                dc.w    z80_ptr(EVENINGSTAR_CALL07)
(1)  130/    938E : (MACRO)             	smpsCall            EveningStar_Call06
(1)  130/    938E : F8                          dc.b    $F8
(1)  130/    938F : 9C93                                dc.w    z80_ptr(EVENINGSTAR_CALL06)
(1)  131/    9391 : (MACRO)             	smpsCall            EveningStar_Call08
(1)  131/    9391 : F8                          dc.b    $F8
(1)  131/    9392 : 1294                                dc.w    z80_ptr(EVENINGSTAR_CALL08)
(1)  132/    9394 : (MACRO)             	smpsLoop            $01, $02, EveningStar_Loop04
(1)  132/    9394 : F7                          dc.b    $F7
(1)  132/    9395 : 0102                        dc.b    $01,$02
(1)  132/    9397 : 5C93                                dc.w    z80_ptr(EVENINGSTAR_LOOP04)
(1)  133/    9399 : (MACRO)             	smpsJump            EveningStar_Loop04
(1)  133/    9399 : F6                          dc.b    $F6
(1)  133/    939A : 5C93                                dc.w    z80_ptr(EVENINGSTAR_LOOP04)
(1)  134/    939C :                     
(1)  135/    939C :                     EveningStar_Call06:
(1)  136/    939C : B308                	dc.b	nD4, $08
(1)  137/    939E : (MACRO)             	smpsFMAlterVol      $0A
(1)  137/    939E : E60A                                dc.b    $E6,$0A
(1)  138/    93A0 : (MACRO)             	smpsPan             panLeft, $00
(1)  138/    93A0 : =$0                 panNone set $00
(1)  138/    93A0 : =$40                panRight set $40
(1)  138/    93A0 : =$80                panLeft set $80
(1)  138/    93A0 : =$C0                panCentre set $C0
(1)  138/    93A0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  138/    93A0 : E080                        dc.b $E0,PANLEFT+$00
(1)  139/    93A2 : 04                  	dc.b	$04
(1)  140/    93A3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  140/    93A3 : E6F6                                dc.b    $E6,$F6
(1)  141/    93A5 : (MACRO)             	smpsPan             panCenter, $00
(1)  141/    93A5 : =$0                 panNone set $00
(1)  141/    93A5 : =$40                panRight set $40
(1)  141/    93A5 : =$80                panLeft set $80
(1)  141/    93A5 : =$C0                panCentre set $C0
(1)  141/    93A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  141/    93A5 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  142/    93A7 : 0804 0804           	dc.b	$08, $04, $08, $04
(1)  143/    93AB : (MACRO)             	smpsFMAlterVol      $0A
(1)  143/    93AB : E60A                                dc.b    $E6,$0A
(1)  144/    93AD : (MACRO)             	smpsPan             panLeft, $00
(1)  144/    93AD : =$0                 panNone set $00
(1)  144/    93AD : =$40                panRight set $40
(1)  144/    93AD : =$80                panLeft set $80
(1)  144/    93AD : =$C0                panCentre set $C0
(1)  144/    93AD : =$C0                panCenter set $C0 ; silly Americans :U
(1)  144/    93AD : E080                        dc.b $E0,PANLEFT+$00
(1)  145/    93AF : 0C                  	dc.b	$0C
(1)  146/    93B0 : (MACRO)             	smpsFMAlterVol      $F6
(1)  146/    93B0 : E6F6                                dc.b    $E6,$F6
(1)  147/    93B2 : (MACRO)             	smpsPan             panCenter, $00
(1)  147/    93B2 : =$0                 panNone set $00
(1)  147/    93B2 : =$40                panRight set $40
(1)  147/    93B2 : =$80                panLeft set $80
(1)  147/    93B2 : =$C0                panCentre set $C0
(1)  147/    93B2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  147/    93B2 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  148/    93B4 : 800C B308 04        	dc.b	nRst, $0C, nD4, $08, $04
(1)  149/    93B9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  149/    93B9 : E60A                                dc.b    $E6,$0A
(1)  150/    93BB : (MACRO)             	smpsPan             panLeft, $00
(1)  150/    93BB : =$0                 panNone set $00
(1)  150/    93BB : =$40                panRight set $40
(1)  150/    93BB : =$80                panLeft set $80
(1)  150/    93BB : =$C0                panCentre set $C0
(1)  150/    93BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  150/    93BB : E080                        dc.b $E0,PANLEFT+$00
(1)  151/    93BD : 08                  	dc.b	$08
(1)  152/    93BE : (MACRO)             	smpsFMAlterVol      $F6
(1)  152/    93BE : E6F6                                dc.b    $E6,$F6
(1)  153/    93C0 : (MACRO)             	smpsPan             panCenter, $00
(1)  153/    93C0 : =$0                 panNone set $00
(1)  153/    93C0 : =$40                panRight set $40
(1)  153/    93C0 : =$80                panLeft set $80
(1)  153/    93C0 : =$C0                panCentre set $C0
(1)  153/    93C0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  153/    93C0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  154/    93C2 : 04                  	dc.b	$04
(1)  155/    93C3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  155/    93C3 : E60A                                dc.b    $E6,$0A
(1)  156/    93C5 : (MACRO)             	smpsPan             panLeft, $00
(1)  156/    93C5 : =$0                 panNone set $00
(1)  156/    93C5 : =$40                panRight set $40
(1)  156/    93C5 : =$80                panLeft set $80
(1)  156/    93C5 : =$C0                panCentre set $C0
(1)  156/    93C5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  156/    93C5 : E080                        dc.b $E0,PANLEFT+$00
(1)  157/    93C7 : 08                  	dc.b	$08
(1)  158/    93C8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  158/    93C8 : E6F6                                dc.b    $E6,$F6
(1)  159/    93CA : (MACRO)             	smpsPan             panCenter, $00
(1)  159/    93CA : =$0                 panNone set $00
(1)  159/    93CA : =$40                panRight set $40
(1)  159/    93CA : =$80                panLeft set $80
(1)  159/    93CA : =$C0                panCentre set $C0
(1)  159/    93CA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  159/    93CA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  160/    93CC : 04                  	dc.b	$04
(1)  161/    93CD : (MACRO)             	smpsReturn
(1)  161/    93CD : F9                                  dc.b    $F9
(1)  162/    93CE :                     
(1)  163/    93CE :                     EveningStar_Call07:
(1)  164/    93CE : 800C B108 04        	dc.b	nRst, $0C, nC4, $08, $04
(1)  165/    93D3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  165/    93D3 : E60A                                dc.b    $E6,$0A
(1)  166/    93D5 : (MACRO)             	smpsPan             panLeft, $00
(1)  166/    93D5 : =$0                 panNone set $00
(1)  166/    93D5 : =$40                panRight set $40
(1)  166/    93D5 : =$80                panLeft set $80
(1)  166/    93D5 : =$C0                panCentre set $C0
(1)  166/    93D5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  166/    93D5 : E080                        dc.b $E0,PANLEFT+$00
(1)  167/    93D7 : 08                  	dc.b	$08
(1)  168/    93D8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  168/    93D8 : E6F6                                dc.b    $E6,$F6
(1)  169/    93DA : (MACRO)             	smpsPan             panCenter, $00
(1)  169/    93DA : =$0                 panNone set $00
(1)  169/    93DA : =$40                panRight set $40
(1)  169/    93DA : =$80                panLeft set $80
(1)  169/    93DA : =$C0                panCentre set $C0
(1)  169/    93DA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  169/    93DA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  170/    93DC : 04                  	dc.b	$04
(1)  171/    93DD : (MACRO)             	smpsFMAlterVol      $0A
(1)  171/    93DD : E60A                                dc.b    $E6,$0A
(1)  172/    93DF : (MACRO)             	smpsPan             panLeft, $00
(1)  172/    93DF : =$0                 panNone set $00
(1)  172/    93DF : =$40                panRight set $40
(1)  172/    93DF : =$80                panLeft set $80
(1)  172/    93DF : =$C0                panCentre set $C0
(1)  172/    93DF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  172/    93DF : E080                        dc.b $E0,PANLEFT+$00
(1)  173/    93E1 : 08                  	dc.b	$08
(1)  174/    93E2 : (MACRO)             	smpsFMAlterVol      $F6
(1)  174/    93E2 : E6F6                                dc.b    $E6,$F6
(1)  175/    93E4 : (MACRO)             	smpsPan             panCenter, $00
(1)  175/    93E4 : =$0                 panNone set $00
(1)  175/    93E4 : =$40                panRight set $40
(1)  175/    93E4 : =$80                panLeft set $80
(1)  175/    93E4 : =$C0                panCentre set $C0
(1)  175/    93E4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  175/    93E4 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  176/    93E6 : 0408 04             	dc.b	$04, $08, $04
(1)  177/    93E9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  177/    93E9 : E60A                                dc.b    $E6,$0A
(1)  178/    93EB : (MACRO)             	smpsPan             panLeft, $00
(1)  178/    93EB : =$0                 panNone set $00
(1)  178/    93EB : =$40                panRight set $40
(1)  178/    93EB : =$80                panLeft set $80
(1)  178/    93EB : =$C0                panCentre set $C0
(1)  178/    93EB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  178/    93EB : E080                        dc.b $E0,PANLEFT+$00
(1)  179/    93ED : 08                  	dc.b	$08
(1)  180/    93EE : (MACRO)             	smpsFMAlterVol      $F6
(1)  180/    93EE : E6F6                                dc.b    $E6,$F6
(1)  181/    93F0 : (MACRO)             	smpsPan             panCenter, $00
(1)  181/    93F0 : =$0                 panNone set $00
(1)  181/    93F0 : =$40                panRight set $40
(1)  181/    93F0 : =$80                panLeft set $80
(1)  181/    93F0 : =$C0                panCentre set $C0
(1)  181/    93F0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  181/    93F0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  182/    93F2 : 04                  	dc.b	$04
(1)  183/    93F3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  183/    93F3 : E60A                                dc.b    $E6,$0A
(1)  184/    93F5 : (MACRO)             	smpsPan             panLeft, $00
(1)  184/    93F5 : =$0                 panNone set $00
(1)  184/    93F5 : =$40                panRight set $40
(1)  184/    93F5 : =$80                panLeft set $80
(1)  184/    93F5 : =$C0                panCentre set $C0
(1)  184/    93F5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  184/    93F5 : E080                        dc.b $E0,PANLEFT+$00
(1)  185/    93F7 : 0C                  	dc.b	$0C
(1)  186/    93F8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  186/    93F8 : E6F6                                dc.b    $E6,$F6
(1)  187/    93FA : (MACRO)             	smpsPan             panCenter, $00
(1)  187/    93FA : =$0                 panNone set $00
(1)  187/    93FA : =$40                panRight set $40
(1)  187/    93FA : =$80                panLeft set $80
(1)  187/    93FA : =$C0                panCentre set $C0
(1)  187/    93FA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  187/    93FA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  188/    93FC : 0804                	dc.b	$08, $04
(1)  189/    93FE : (MACRO)             	smpsReturn
(1)  189/    93FE : F9                                  dc.b    $F9
(1)  190/    93FF :                     
(1)  191/    93FF :                     EveningStar_Call09:
(1)  192/    93FF : (MACRO)             	smpsFMAlterVol      $FE
(1)  192/    93FF : E6FE                                dc.b    $E6,$FE
(1)  193/    9401 : 8008 AA04 AC08 AF0C 	dc.b	nRst, $08, nF3, $04, nG3, $08, nBb3, $0C, nG3, $04, nBb3, $08
             9409 : AC04 AF08         
(1)  194/    940D : B104                	dc.b	nC4, $04
(1)  195/    940F : (MACRO)             	smpsFMAlterVol      $02
(1)  195/    940F : E602                                dc.b    $E6,$02
(1)  196/    9411 : (MACRO)             	smpsReturn
(1)  196/    9411 : F9                                  dc.b    $F9
(1)  197/    9412 :                     
(1)  198/    9412 :                     EveningStar_Call08:
(1)  199/    9412 : (MACRO)             	smpsFMAlterVol      $0A
(1)  199/    9412 : E60A                                dc.b    $E6,$0A
(1)  200/    9414 : (MACRO)             	smpsPan             panLeft, $00
(1)  200/    9414 : =$0                 panNone set $00
(1)  200/    9414 : =$40                panRight set $40
(1)  200/    9414 : =$80                panLeft set $80
(1)  200/    9414 : =$C0                panCentre set $C0
(1)  200/    9414 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  200/    9414 : E080                        dc.b $E0,PANLEFT+$00
(1)  201/    9416 : B308                	dc.b	nD4, $08
(1)  202/    9418 : (MACRO)             	smpsFMAlterVol      $F6
(1)  202/    9418 : E6F6                                dc.b    $E6,$F6
(1)  203/    941A : (MACRO)             	smpsPan             panCenter, $00
(1)  203/    941A : =$0                 panNone set $00
(1)  203/    941A : =$40                panRight set $40
(1)  203/    941A : =$80                panLeft set $80
(1)  203/    941A : =$C0                panCentre set $C0
(1)  203/    941A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  203/    941A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  204/    941C : 04                  	dc.b	$04
(1)  205/    941D : (MACRO)             	smpsLoop            $00, $08, EveningStar_Call08
(1)  205/    941D : F7                          dc.b    $F7
(1)  205/    941E : 0008                        dc.b    $00,$08
(1)  205/    9420 : 1294                                dc.w    z80_ptr(EVENINGSTAR_CALL08)
(1)  206/    9422 : (MACRO)             	smpsReturn
(1)  206/    9422 : F9                                  dc.b    $F9
(1)  207/    9423 :                     
(1)  208/    9423 :                     ; FM4 Data
(1)  209/    9423 :                     EveningStar_FM4:
(1)  210/    9423 : (MACRO)             	smpsSetvoice        $01
(1)  210/    9423 :  (MACRO-2)                  smpsFMvoice $01
(1)  210/    9423 : EF01                                dc.b    $EF,$01
(1)  211/    9425 : (MACRO)             	smpsAlterPitch      $FC
(1)  211/    9425 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  211/    9425 : FBFC                                dc.b    $FB,$FC
(1)  212/    9427 : (MACRO)             	smpsCall            EveningStar_Call02
(1)  212/    9427 : F8                          dc.b    $F8
(1)  212/    9428 : A294                                dc.w    z80_ptr(EVENINGSTAR_CALL02)
(1)  213/    942A : (MACRO)             	smpsAlterPitch      $FE
(1)  213/    942A :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  213/    942A : FBFE                                dc.b    $FB,$FE
(1)  214/    942C : (MACRO)             	smpsCall            EveningStar_Call03
(1)  214/    942C : F8                          dc.b    $F8
(1)  214/    942D : D494                                dc.w    z80_ptr(EVENINGSTAR_CALL03)
(1)  215/    942F : (MACRO)             	smpsAlterPitch      $FD
(1)  215/    942F :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  215/    942F : FBFD                                dc.b    $FB,$FD
(1)  216/    9431 : (MACRO)             	smpsCall            EveningStar_Call02
(1)  216/    9431 : F8                          dc.b    $F8
(1)  216/    9432 : A294                                dc.w    z80_ptr(EVENINGSTAR_CALL02)
(1)  217/    9434 : (MACRO)             	smpsCall            EveningStar_Call04
(1)  217/    9434 : F8                          dc.b    $F8
(1)  217/    9435 : 0595                                dc.w    z80_ptr(EVENINGSTAR_CALL04)
(1)  218/    9437 : (MACRO)             	smpsAlterPitch      $09
(1)  218/    9437 :  (MACRO-2)                  smpsChangeTransposition $09
(1)  218/    9437 : FB09                                dc.b    $FB,$09
(1)  219/    9439 : (MACRO)             	smpsFMAlterVol      $FB
(1)  219/    9439 : E6FB                                dc.b    $E6,$FB
(1)  220/    943B :                     
(1)  221/    943B :                     EveningStar_Loop03:
(1)  222/    943B : (MACRO)             	smpsAlterPitch      $FC
(1)  222/    943B :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  222/    943B : FBFC                                dc.b    $FB,$FC
(1)  223/    943D : (MACRO)             	smpsCall            EveningStar_Call02
(1)  223/    943D : F8                          dc.b    $F8
(1)  223/    943E : A294                                dc.w    z80_ptr(EVENINGSTAR_CALL02)
(1)  224/    9440 : (MACRO)             	smpsAlterPitch      $FE
(1)  224/    9440 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  224/    9440 : FBFE                                dc.b    $FB,$FE
(1)  225/    9442 : (MACRO)             	smpsCall            EveningStar_Call03
(1)  225/    9442 : F8                          dc.b    $F8
(1)  225/    9443 : D494                                dc.w    z80_ptr(EVENINGSTAR_CALL03)
(1)  226/    9445 : (MACRO)             	smpsAlterPitch      $FD
(1)  226/    9445 :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  226/    9445 : FBFD                                dc.b    $FB,$FD
(1)  227/    9447 : (MACRO)             	smpsCall            EveningStar_Call02
(1)  227/    9447 : F8                          dc.b    $F8
(1)  227/    9448 : A294                                dc.w    z80_ptr(EVENINGSTAR_CALL02)
(1)  228/    944A : (MACRO)             	smpsAlterPitch      $09
(1)  228/    944A :  (MACRO-2)                  smpsChangeTransposition $09
(1)  228/    944A : FB09                                dc.b    $FB,$09
(1)  229/    944C : (MACRO)             	smpsFMAlterVol      $0A
(1)  229/    944C : E60A                                dc.b    $E6,$0A
(1)  230/    944E : (MACRO)             	smpsPan             panRight, $00
(1)  230/    944E : =$0                 panNone set $00
(1)  230/    944E : =$40                panRight set $40
(1)  230/    944E : =$80                panLeft set $80
(1)  230/    944E : =$C0                panCentre set $C0
(1)  230/    944E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  230/    944E : E040                        dc.b $E0,PANRIGHT+$00
(1)  231/    9450 : AA0C                	dc.b	nF3, $0C
(1)  232/    9452 : (MACRO)             	smpsFMAlterVol      $F6
(1)  232/    9452 : E6F6                                dc.b    $E6,$F6
(1)  233/    9454 : (MACRO)             	smpsPan             panCenter, $00
(1)  233/    9454 : =$0                 panNone set $00
(1)  233/    9454 : =$40                panRight set $40
(1)  233/    9454 : =$80                panLeft set $80
(1)  233/    9454 : =$C0                panCentre set $C0
(1)  233/    9454 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  233/    9454 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  234/    9456 : 0804                	dc.b	$08, $04
(1)  235/    9458 : (MACRO)             	smpsFMAlterVol      $0A
(1)  235/    9458 : E60A                                dc.b    $E6,$0A
(1)  236/    945A : (MACRO)             	smpsPan             panRight, $00
(1)  236/    945A : =$0                 panNone set $00
(1)  236/    945A : =$40                panRight set $40
(1)  236/    945A : =$80                panLeft set $80
(1)  236/    945A : =$C0                panCentre set $C0
(1)  236/    945A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  236/    945A : E040                        dc.b $E0,PANRIGHT+$00
(1)  237/    945C : 08                  	dc.b	$08
(1)  238/    945D : (MACRO)             	smpsFMAlterVol      $F6
(1)  238/    945D : E6F6                                dc.b    $E6,$F6
(1)  239/    945F : (MACRO)             	smpsPan             panCenter, $00
(1)  239/    945F : =$0                 panNone set $00
(1)  239/    945F : =$40                panRight set $40
(1)  239/    945F : =$80                panLeft set $80
(1)  239/    945F : =$C0                panCentre set $C0
(1)  239/    945F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  239/    945F : E0C0                        dc.b $E0,PANCENTER+$00
(1)  240/    9461 : 04                  	dc.b	$04
(1)  241/    9462 : (MACRO)             	smpsFMAlterVol      $0A
(1)  241/    9462 : E60A                                dc.b    $E6,$0A
(1)  242/    9464 : (MACRO)             	smpsPan             panRight, $00
(1)  242/    9464 : =$0                 panNone set $00
(1)  242/    9464 : =$40                panRight set $40
(1)  242/    9464 : =$80                panLeft set $80
(1)  242/    9464 : =$C0                panCentre set $C0
(1)  242/    9464 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  242/    9464 : E040                        dc.b $E0,PANRIGHT+$00
(1)  243/    9466 : 08                  	dc.b	$08
(1)  244/    9467 : (MACRO)             	smpsFMAlterVol      $F6
(1)  244/    9467 : E6F6                                dc.b    $E6,$F6
(1)  245/    9469 : (MACRO)             	smpsPan             panCenter, $00
(1)  245/    9469 : =$0                 panNone set $00
(1)  245/    9469 : =$40                panRight set $40
(1)  245/    9469 : =$80                panLeft set $80
(1)  245/    9469 : =$C0                panCentre set $C0
(1)  245/    9469 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  245/    9469 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  246/    946B : 04                  	dc.b	$04
(1)  247/    946C : (MACRO)             	smpsCall            EveningStar_Call05
(1)  247/    946C : F8                          dc.b    $F8
(1)  247/    946D : 8B94                                dc.w    z80_ptr(EVENINGSTAR_CALL05)
(1)  248/    946F : (MACRO)             	smpsAlterPitch      $FC
(1)  248/    946F :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  248/    946F : FBFC                                dc.b    $FB,$FC
(1)  249/    9471 : (MACRO)             	smpsCall            EveningStar_Call02
(1)  249/    9471 : F8                          dc.b    $F8
(1)  249/    9472 : A294                                dc.w    z80_ptr(EVENINGSTAR_CALL02)
(1)  250/    9474 : (MACRO)             	smpsAlterPitch      $FE
(1)  250/    9474 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  250/    9474 : FBFE                                dc.b    $FB,$FE
(1)  251/    9476 : (MACRO)             	smpsCall            EveningStar_Call03
(1)  251/    9476 : F8                          dc.b    $F8
(1)  251/    9477 : D494                                dc.w    z80_ptr(EVENINGSTAR_CALL03)
(1)  252/    9479 : (MACRO)             	smpsAlterPitch      $FD
(1)  252/    9479 :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  252/    9479 : FBFD                                dc.b    $FB,$FD
(1)  253/    947B : (MACRO)             	smpsCall            EveningStar_Call02
(1)  253/    947B : F8                          dc.b    $F8
(1)  253/    947C : A294                                dc.w    z80_ptr(EVENINGSTAR_CALL02)
(1)  254/    947E : (MACRO)             	smpsCall            EveningStar_Call04
(1)  254/    947E : F8                          dc.b    $F8
(1)  254/    947F : 0595                                dc.w    z80_ptr(EVENINGSTAR_CALL04)
(1)  255/    9481 : (MACRO)             	smpsAlterPitch      $09
(1)  255/    9481 :  (MACRO-2)                  smpsChangeTransposition $09
(1)  255/    9481 : FB09                                dc.b    $FB,$09
(1)  256/    9483 : (MACRO)             	smpsLoop            $01, $02, EveningStar_Loop03
(1)  256/    9483 : F7                          dc.b    $F7
(1)  256/    9484 : 0102                        dc.b    $01,$02
(1)  256/    9486 : 3B94                                dc.w    z80_ptr(EVENINGSTAR_LOOP03)
(1)  257/    9488 : (MACRO)             	smpsJump            EveningStar_Loop03
(1)  257/    9488 : F6                          dc.b    $F6
(1)  257/    9489 : 3B94                                dc.w    z80_ptr(EVENINGSTAR_LOOP03)
(1)  258/    948B :                     
(1)  259/    948B :                     EveningStar_Call05:
(1)  260/    948B : (MACRO)             	smpsPan             panRight, $00
(1)  260/    948B : =$0                 panNone set $00
(1)  260/    948B : =$40                panRight set $40
(1)  260/    948B : =$80                panLeft set $80
(1)  260/    948B : =$C0                panCentre set $C0
(1)  260/    948B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  260/    948B : E040                        dc.b $E0,PANRIGHT+$00
(1)  261/    948D : (MACRO)             	smpsFMAlterVol      $08
(1)  261/    948D : E608                                dc.b    $E6,$08
(1)  262/    948F : 800B AA04 AC08 AF0C 	dc.b	nRst, $0B, nF3, $04, nG3, $08, nBb3, $0C, nG3, $04, nBb3, $08
             9497 : AC04 AF08         
(1)  263/    949B : B101                	dc.b	nC4, $01
(1)  264/    949D : (MACRO)             	smpsPan             panCenter, $00
(1)  264/    949D : =$0                 panNone set $00
(1)  264/    949D : =$40                panRight set $40
(1)  264/    949D : =$80                panLeft set $80
(1)  264/    949D : =$C0                panCentre set $C0
(1)  264/    949D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  264/    949D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  265/    949F : (MACRO)             	smpsFMAlterVol      $F8
(1)  265/    949F : E6F8                                dc.b    $E6,$F8
(1)  266/    94A1 : (MACRO)             	smpsReturn
(1)  266/    94A1 : F9                                  dc.b    $F9
(1)  267/    94A2 :                     
(1)  268/    94A2 :                     EveningStar_Call02:
(1)  269/    94A2 : B308                	dc.b	nD4, $08
(1)  270/    94A4 : (MACRO)             	smpsFMAlterVol      $0A
(1)  270/    94A4 : E60A                                dc.b    $E6,$0A
(1)  271/    94A6 : (MACRO)             	smpsPan             panRight, $00
(1)  271/    94A6 : =$0                 panNone set $00
(1)  271/    94A6 : =$40                panRight set $40
(1)  271/    94A6 : =$80                panLeft set $80
(1)  271/    94A6 : =$C0                panCentre set $C0
(1)  271/    94A6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  271/    94A6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  272/    94A8 : 04                  	dc.b	$04
(1)  273/    94A9 : (MACRO)             	smpsFMAlterVol      $F6
(1)  273/    94A9 : E6F6                                dc.b    $E6,$F6
(1)  274/    94AB : (MACRO)             	smpsPan             panCenter, $00
(1)  274/    94AB : =$0                 panNone set $00
(1)  274/    94AB : =$40                panRight set $40
(1)  274/    94AB : =$80                panLeft set $80
(1)  274/    94AB : =$C0                panCentre set $C0
(1)  274/    94AB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  274/    94AB : E0C0                        dc.b $E0,PANCENTER+$00
(1)  275/    94AD : 0804 0804           	dc.b	$08, $04, $08, $04
(1)  276/    94B1 : (MACRO)             	smpsFMAlterVol      $0A
(1)  276/    94B1 : E60A                                dc.b    $E6,$0A
(1)  277/    94B3 : (MACRO)             	smpsPan             panRight, $00
(1)  277/    94B3 : =$0                 panNone set $00
(1)  277/    94B3 : =$40                panRight set $40
(1)  277/    94B3 : =$80                panLeft set $80
(1)  277/    94B3 : =$C0                panCentre set $C0
(1)  277/    94B3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  277/    94B3 : E040                        dc.b $E0,PANRIGHT+$00
(1)  278/    94B5 : 0C                  	dc.b	$0C
(1)  279/    94B6 : (MACRO)             	smpsFMAlterVol      $F6
(1)  279/    94B6 : E6F6                                dc.b    $E6,$F6
(1)  280/    94B8 : (MACRO)             	smpsPan             panCenter, $00
(1)  280/    94B8 : =$0                 panNone set $00
(1)  280/    94B8 : =$40                panRight set $40
(1)  280/    94B8 : =$80                panLeft set $80
(1)  280/    94B8 : =$C0                panCentre set $C0
(1)  280/    94B8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  280/    94B8 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  281/    94BA : 800C B308 04        	dc.b	nRst, $0C, nD4, $08, $04
(1)  282/    94BF : (MACRO)             	smpsFMAlterVol      $0A
(1)  282/    94BF : E60A                                dc.b    $E6,$0A
(1)  283/    94C1 : (MACRO)             	smpsPan             panRight, $00
(1)  283/    94C1 : =$0                 panNone set $00
(1)  283/    94C1 : =$40                panRight set $40
(1)  283/    94C1 : =$80                panLeft set $80
(1)  283/    94C1 : =$C0                panCentre set $C0
(1)  283/    94C1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  283/    94C1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  284/    94C3 : 08                  	dc.b	$08
(1)  285/    94C4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  285/    94C4 : E6F6                                dc.b    $E6,$F6
(1)  286/    94C6 : (MACRO)             	smpsPan             panCenter, $00
(1)  286/    94C6 : =$0                 panNone set $00
(1)  286/    94C6 : =$40                panRight set $40
(1)  286/    94C6 : =$80                panLeft set $80
(1)  286/    94C6 : =$C0                panCentre set $C0
(1)  286/    94C6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  286/    94C6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  287/    94C8 : 04                  	dc.b	$04
(1)  288/    94C9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  288/    94C9 : E60A                                dc.b    $E6,$0A
(1)  289/    94CB : (MACRO)             	smpsPan             panRight, $00
(1)  289/    94CB : =$0                 panNone set $00
(1)  289/    94CB : =$40                panRight set $40
(1)  289/    94CB : =$80                panLeft set $80
(1)  289/    94CB : =$C0                panCentre set $C0
(1)  289/    94CB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  289/    94CB : E040                        dc.b $E0,PANRIGHT+$00
(1)  290/    94CD : 08                  	dc.b	$08
(1)  291/    94CE : (MACRO)             	smpsFMAlterVol      $F6
(1)  291/    94CE : E6F6                                dc.b    $E6,$F6
(1)  292/    94D0 : (MACRO)             	smpsPan             panCenter, $00
(1)  292/    94D0 : =$0                 panNone set $00
(1)  292/    94D0 : =$40                panRight set $40
(1)  292/    94D0 : =$80                panLeft set $80
(1)  292/    94D0 : =$C0                panCentre set $C0
(1)  292/    94D0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  292/    94D0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  293/    94D2 : 04                  	dc.b	$04
(1)  294/    94D3 : (MACRO)             	smpsReturn
(1)  294/    94D3 : F9                                  dc.b    $F9
(1)  295/    94D4 :                     
(1)  296/    94D4 :                     EveningStar_Call03:
(1)  297/    94D4 : 800C B108 04        	dc.b	nRst, $0C, nC4, $08, $04
(1)  298/    94D9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  298/    94D9 : E60A                                dc.b    $E6,$0A
(1)  299/    94DB : (MACRO)             	smpsPan             panRight, $00
(1)  299/    94DB : =$0                 panNone set $00
(1)  299/    94DB : =$40                panRight set $40
(1)  299/    94DB : =$80                panLeft set $80
(1)  299/    94DB : =$C0                panCentre set $C0
(1)  299/    94DB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  299/    94DB : E040                        dc.b $E0,PANRIGHT+$00
(1)  300/    94DD : 08                  	dc.b	$08
(1)  301/    94DE : (MACRO)             	smpsFMAlterVol      $F6
(1)  301/    94DE : E6F6                                dc.b    $E6,$F6
(1)  302/    94E0 : (MACRO)             	smpsPan             panCenter, $00
(1)  302/    94E0 : =$0                 panNone set $00
(1)  302/    94E0 : =$40                panRight set $40
(1)  302/    94E0 : =$80                panLeft set $80
(1)  302/    94E0 : =$C0                panCentre set $C0
(1)  302/    94E0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  302/    94E0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  303/    94E2 : 04                  	dc.b	$04
(1)  304/    94E3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  304/    94E3 : E60A                                dc.b    $E6,$0A
(1)  305/    94E5 : (MACRO)             	smpsPan             panRight, $00
(1)  305/    94E5 : =$0                 panNone set $00
(1)  305/    94E5 : =$40                panRight set $40
(1)  305/    94E5 : =$80                panLeft set $80
(1)  305/    94E5 : =$C0                panCentre set $C0
(1)  305/    94E5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  305/    94E5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  306/    94E7 : 08                  	dc.b	$08
(1)  307/    94E8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  307/    94E8 : E6F6                                dc.b    $E6,$F6
(1)  308/    94EA : (MACRO)             	smpsPan             panCenter, $00
(1)  308/    94EA : =$0                 panNone set $00
(1)  308/    94EA : =$40                panRight set $40
(1)  308/    94EA : =$80                panLeft set $80
(1)  308/    94EA : =$C0                panCentre set $C0
(1)  308/    94EA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  308/    94EA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  309/    94EC : 0408 04             	dc.b	$04, $08, $04
(1)  310/    94EF : (MACRO)             	smpsFMAlterVol      $0A
(1)  310/    94EF : E60A                                dc.b    $E6,$0A
(1)  311/    94F1 : (MACRO)             	smpsPan             panRight, $00
(1)  311/    94F1 : =$0                 panNone set $00
(1)  311/    94F1 : =$40                panRight set $40
(1)  311/    94F1 : =$80                panLeft set $80
(1)  311/    94F1 : =$C0                panCentre set $C0
(1)  311/    94F1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  311/    94F1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  312/    94F3 : 08                  	dc.b	$08
(1)  313/    94F4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  313/    94F4 : E6F6                                dc.b    $E6,$F6
(1)  314/    94F6 : (MACRO)             	smpsPan             panCenter, $00
(1)  314/    94F6 : =$0                 panNone set $00
(1)  314/    94F6 : =$40                panRight set $40
(1)  314/    94F6 : =$80                panLeft set $80
(1)  314/    94F6 : =$C0                panCentre set $C0
(1)  314/    94F6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  314/    94F6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  315/    94F8 : 04                  	dc.b	$04
(1)  316/    94F9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  316/    94F9 : E60A                                dc.b    $E6,$0A
(1)  317/    94FB : (MACRO)             	smpsPan             panRight, $00
(1)  317/    94FB : =$0                 panNone set $00
(1)  317/    94FB : =$40                panRight set $40
(1)  317/    94FB : =$80                panLeft set $80
(1)  317/    94FB : =$C0                panCentre set $C0
(1)  317/    94FB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  317/    94FB : E040                        dc.b $E0,PANRIGHT+$00
(1)  318/    94FD : 0C                  	dc.b	$0C
(1)  319/    94FE : (MACRO)             	smpsFMAlterVol      $F6
(1)  319/    94FE : E6F6                                dc.b    $E6,$F6
(1)  320/    9500 : (MACRO)             	smpsPan             panCenter, $00
(1)  320/    9500 : =$0                 panNone set $00
(1)  320/    9500 : =$40                panRight set $40
(1)  320/    9500 : =$80                panLeft set $80
(1)  320/    9500 : =$C0                panCentre set $C0
(1)  320/    9500 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  320/    9500 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  321/    9502 : 0804                	dc.b	$08, $04
(1)  322/    9504 : (MACRO)             	smpsReturn
(1)  322/    9504 : F9                                  dc.b    $F9
(1)  323/    9505 :                     
(1)  324/    9505 :                     EveningStar_Call04:
(1)  325/    9505 : (MACRO)             	smpsFMAlterVol      $0A
(1)  325/    9505 : E60A                                dc.b    $E6,$0A
(1)  326/    9507 : (MACRO)             	smpsPan             panRight, $00
(1)  326/    9507 : =$0                 panNone set $00
(1)  326/    9507 : =$40                panRight set $40
(1)  326/    9507 : =$80                panLeft set $80
(1)  326/    9507 : =$C0                panCentre set $C0
(1)  326/    9507 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  326/    9507 : E040                        dc.b $E0,PANRIGHT+$00
(1)  327/    9509 : B308                	dc.b	nD4, $08
(1)  328/    950B : (MACRO)             	smpsFMAlterVol      $F6
(1)  328/    950B : E6F6                                dc.b    $E6,$F6
(1)  329/    950D : (MACRO)             	smpsPan             panCenter, $00
(1)  329/    950D : =$0                 panNone set $00
(1)  329/    950D : =$40                panRight set $40
(1)  329/    950D : =$80                panLeft set $80
(1)  329/    950D : =$C0                panCentre set $C0
(1)  329/    950D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  329/    950D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  330/    950F : 04                  	dc.b	$04
(1)  331/    9510 : (MACRO)             	smpsLoop            $00, $08, EveningStar_Call04
(1)  331/    9510 : F7                          dc.b    $F7
(1)  331/    9511 : 0008                        dc.b    $00,$08
(1)  331/    9513 : 0595                                dc.w    z80_ptr(EVENINGSTAR_CALL04)
(1)  332/    9515 : (MACRO)             	smpsReturn
(1)  332/    9515 : F9                                  dc.b    $F9
(1)  333/    9516 :                     
(1)  334/    9516 :                     ; FM5 Data
(1)  335/    9516 :                     EveningStar_FM5:
(1)  336/    9516 : (MACRO)             	smpsSetvoice        $02
(1)  336/    9516 :  (MACRO-2)                  smpsFMvoice $02
(1)  336/    9516 : EF02                                dc.b    $EF,$02
(1)  337/    9518 : 8060 8080 80        	dc.b	nRst, $60, nRst, nRst, nRst
(1)  338/    951D : (MACRO)             	smpsPan             panRight, $00
(1)  338/    951D : =$0                 panNone set $00
(1)  338/    951D : =$40                panRight set $40
(1)  338/    951D : =$80                panLeft set $80
(1)  338/    951D : =$C0                panCentre set $C0
(1)  338/    951D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  338/    951D : E040                        dc.b $E0,PANRIGHT+$00
(1)  339/    951F : (MACRO)             	smpsModSet          $05, $01, $03, $02
(1)  339/    951F : F0                          dc.b    $F0
(1)  339/    9520 : 0501 0302                           dc.b    $05,$01,$03,$02
(1)  339/    9524 :                             ;dc.b   $01,$03,$02
(1)  340/    9524 :                     
(1)  341/    9524 :                     EveningStar_Jump00:
(1)  342/    9524 : 8004                	dc.b	nRst, $04
(1)  343/    9526 : (MACRO)             	smpsCall            EveningStar_Call01
(1)  343/    9526 : F8                          dc.b    $F8
(1)  343/    9527 : D892                                dc.w    z80_ptr(EVENINGSTAR_CALL01)
(1)  344/    9529 : 8060                	dc.b	nRst, $60
(1)  345/    952B : (MACRO)             	smpsCall            EveningStar_Call01
(1)  345/    952B : F8                          dc.b    $F8
(1)  345/    952C : D892                                dc.w    z80_ptr(EVENINGSTAR_CALL01)
(1)  346/    952E : 805C                	dc.b	nRst, $5C
(1)  347/    9530 : (MACRO)             	smpsJump            EveningStar_Jump00
(1)  347/    9530 : F6                          dc.b    $F6
(1)  347/    9531 : 2495                                dc.w    z80_ptr(EVENINGSTAR_JUMP00)
(1)  348/    9533 :                     
(1)  349/    9533 :                     ; PSG1 Data
(1)  350/    9533 :                     EveningStar_PSG1:
(1)  351/    9533 : (MACRO)             	smpsPSGvoice        sTone_04
(1)  351/    9533 : F504                        dc.b    $F5,STONE_04
(1)  352/    9535 : 8060 8080 8030 AC0C 	dc.b	nRst, $60, nRst, nRst, nRst, $30, nG3, $0C, nA3, nBb3, $08, nC4
             953D : AEAF 08B1         
(1)  353/    9541 : 04B3 08B4 04        	dc.b	$04, nD4, $08, nEb4, $04
(1)  354/    9546 :                     
(1)  355/    9546 :                     EveningStar_Jump03:
(1)  356/    9546 : B660 E718 B4B3 B4B3 	dc.b	nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack, $18, nC4
             954E : 60E7 18B1         
(1)  357/    9552 : AFB1 AC60 AB30 A7AC 	dc.b	nBb3, nC4, nG3, $60, nFs3, $30, nD3, nG3, $60, nG3, $18, nA3
             955A : 60AC 18AE         
(1)  358/    955E : AFB1 B660 E718 B4B3 	dc.b	nBb3, nC4, nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack
             9566 : B4B3 60E7         
(1)  359/    956A : 3080 20AF 04B1 08B3 	dc.b	$30, nRst, $20, nBb3, $04, nC4, $08, nD4, $04, nG3, $60, nFs3
             9572 : 04AC 60AB         
(1)  360/    9576 : 30A7 AC60 AC18 AEAF 	dc.b	$30, nD3, nG3, $60, nG3, $18, nA3, nBb3, $0C, nC4, nD4, nEb4
             957E : 0CB1 B3B4         
(1)  361/    9582 : (MACRO)             	smpsJump            EveningStar_Jump03
(1)  361/    9582 : F6                          dc.b    $F6
(1)  361/    9583 : 4695                                dc.w    z80_ptr(EVENINGSTAR_JUMP03)
(1)  362/    9585 :                     
(1)  363/    9585 :                     ; PSG2 Data
(1)  364/    9585 :                     EveningStar_PSG2:
(1)  365/    9585 : (MACRO)             	smpsPSGvoice        sTone_04
(1)  365/    9585 : F504                        dc.b    $F5,STONE_04
(1)  366/    9587 : (MACRO)             	smpsModSet          $04, $01, $01, $03
(1)  366/    9587 : F0                          dc.b    $F0
(1)  366/    9588 : 0401 0103                           dc.b    $04,$01,$01,$03
(1)  366/    958C :                             ;dc.b   $01,$01,$03
(1)  367/    958C : 8004 8060 8080 8030 	dc.b	nRst, $04, nRst, $60, nRst, nRst, nRst, $30, nG3, $0C, nA3, nBb3
             9594 : AC0C AEAF         
(1)  368/    9598 : 08B1 04B3 08B4 04   	dc.b	$08, nC4, $04, nD4, $08, nEb4, $04
(1)  369/    959F :                     
(1)  370/    959F :                     EveningStar_Jump02:
(1)  371/    959F : B660 E718 B4B3 B4B3 	dc.b	nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack, $18, nC4
             95A7 : 60E7 18B1         
(1)  372/    95AB : AFB1 AC60 AB30 A7AC 	dc.b	nBb3, nC4, nG3, $60, nFs3, $30, nD3, nG3, $60, nG3, $18, nA3
             95B3 : 60AC 18AE         
(1)  373/    95B7 : AFB1 B660 E718 B4B3 	dc.b	nBb3, nC4, nF4, $60, smpsNoAttack, $18, nEb4, nD4, nEb4, nD4, $60, smpsNoAttack
             95BF : B4B3 60E7         
(1)  374/    95C3 : 3080 20AF 04B1 08B3 	dc.b	$30, nRst, $20, nBb3, $04, nC4, $08, nD4, $04, nG3, $60, nFs3
             95CB : 04AC 60AB         
(1)  375/    95CF : 30A7 AC60 AC18 AEAF 	dc.b	$30, nD3, nG3, $60, nG3, $18, nA3, nBb3, $0C, nC4, nD4, nEb4
             95D7 : 0CB1 B3B4         
(1)  376/    95DB : (MACRO)             	smpsJump            EveningStar_Jump02
(1)  376/    95DB : F6                          dc.b    $F6
(1)  376/    95DC : 9F95                                dc.w    z80_ptr(EVENINGSTAR_JUMP02)
(1)  377/    95DE :                     
(1)  378/    95DE :                     ; PSG3 Data
(1)  379/    95DE :                     EveningStar_PSG3:
(1)  380/    95DE : (MACRO)             	smpsPSGform         $E7
(1)  380/    95DE : F3E7                        dc.b    $F3,$E7
(1)  381/    95E0 :                     
(1)  382/    95E0 :                     EveningStar_Loop06:
(1)  383/    95E0 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  383/    95E0 : F502                        dc.b    $F5,STONE_02
(1)  384/    95E2 : B108 04             	dc.b	(nMaxPSG2-$23)&$FF, $08, $04
(1)  385/    95E5 : (MACRO)             	smpsLoop            $00, $1F, EveningStar_Loop06
(1)  385/    95E5 : F7                          dc.b    $F7
(1)  385/    95E6 : 001F                        dc.b    $00,$1F
(1)  385/    95E8 : E095                                dc.w    z80_ptr(EVENINGSTAR_LOOP06)
(1)  386/    95EA : (MACRO)             	smpsPSGvoice        sTone_05
(1)  386/    95EA : F505                        dc.b    $F5,STONE_05
(1)  387/    95EC : 0C                  	dc.b	$0C
(1)  388/    95ED :                     
(1)  389/    95ED :                     EveningStar_Loop07:
(1)  390/    95ED : (MACRO)             	smpsCall            EveningStar_Call0C
(1)  390/    95ED : F8                          dc.b    $F8
(1)  390/    95EE : 2B96                                dc.w    z80_ptr(EVENINGSTAR_CALL0C)
(1)  391/    95F0 : (MACRO)             	smpsCall            EveningStar_Call0D
(1)  391/    95F0 : F8                          dc.b    $F8
(1)  391/    95F1 : 3696                                dc.w    z80_ptr(EVENINGSTAR_CALL0D)
(1)  392/    95F3 : (MACRO)             	smpsLoop            $01, $04, EveningStar_Loop07
(1)  392/    95F3 : F7                          dc.b    $F7
(1)  392/    95F4 : 0104                        dc.b    $01,$04
(1)  392/    95F6 : ED95                                dc.w    z80_ptr(EVENINGSTAR_LOOP07)
(1)  393/    95F8 : (MACRO)             	smpsCall            EveningStar_Call0C
(1)  393/    95F8 : F8                          dc.b    $F8
(1)  393/    95F9 : 2B96                                dc.w    z80_ptr(EVENINGSTAR_CALL0C)
(1)  394/    95FB : (MACRO)             	smpsCall            EveningStar_Call0D
(1)  394/    95FB : F8                          dc.b    $F8
(1)  394/    95FC : 3696                                dc.w    z80_ptr(EVENINGSTAR_CALL0D)
(1)  395/    95FE : (MACRO)             	smpsCall            EveningStar_Call0C
(1)  395/    95FE : F8                          dc.b    $F8
(1)  395/    95FF : 2B96                                dc.w    z80_ptr(EVENINGSTAR_CALL0C)
(1)  396/    9601 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  396/    9601 : F502                        dc.b    $F5,STONE_02
(1)  397/    9603 : B108 0408 0408 04   	dc.b	(nMaxPSG2-$23)&$FF, $08, $04, $08, $04, $08, $04
(1)  398/    960A : (MACRO)             	smpsPSGvoice        sTone_05
(1)  398/    960A : F505                        dc.b    $F5,STONE_05
(1)  399/    960C : 08                  	dc.b	$08
(1)  400/    960D : (MACRO)             	smpsPSGvoice        sTone_02
(1)  400/    960D : F502                        dc.b    $F5,STONE_02
(1)  401/    960F : 0480 1880 08B1 04   	dc.b	$04, nRst, $18, nRst, $08, (nMaxPSG2-$23)&$FF, $04
(1)  402/    9616 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  402/    9616 : F505                        dc.b    $F5,STONE_05
(1)  403/    9618 : 08                  	dc.b	$08
(1)  404/    9619 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  404/    9619 : F502                        dc.b    $F5,STONE_02
(1)  405/    961B : 04                  	dc.b	$04
(1)  406/    961C : (MACRO)             	smpsCall            EveningStar_Call0C
(1)  406/    961C : F8                          dc.b    $F8
(1)  406/    961D : 2B96                                dc.w    z80_ptr(EVENINGSTAR_CALL0C)
(1)  407/    961F : (MACRO)             	smpsCall            EveningStar_Call0D
(1)  407/    961F : F8                          dc.b    $F8
(1)  407/    9620 : 3696                                dc.w    z80_ptr(EVENINGSTAR_CALL0D)
(1)  408/    9622 : (MACRO)             	smpsCall            EveningStar_Call0C
(1)  408/    9622 : F8                          dc.b    $F8
(1)  408/    9623 : 2B96                                dc.w    z80_ptr(EVENINGSTAR_CALL0C)
(1)  409/    9625 : (MACRO)             	smpsCall            EveningStar_Call0D
(1)  409/    9625 : F8                          dc.b    $F8
(1)  409/    9626 : 3696                                dc.w    z80_ptr(EVENINGSTAR_CALL0D)
(1)  410/    9628 : (MACRO)             	smpsJump            EveningStar_Loop07
(1)  410/    9628 : F6                          dc.b    $F6
(1)  410/    9629 : ED95                                dc.w    z80_ptr(EVENINGSTAR_LOOP07)
(1)  411/    962B :                     
(1)  412/    962B :                     EveningStar_Call0C:
(1)  413/    962B : (MACRO)             	smpsPSGvoice        sTone_02
(1)  413/    962B : F502                        dc.b    $F5,STONE_02
(1)  414/    962D : B108 04             	dc.b	(nMaxPSG2-$23)&$FF, $08, $04
(1)  415/    9630 : (MACRO)             	smpsLoop            $00, $08, EveningStar_Call0C
(1)  415/    9630 : F7                          dc.b    $F7
(1)  415/    9631 : 0008                        dc.b    $00,$08
(1)  415/    9633 : 2B96                                dc.w    z80_ptr(EVENINGSTAR_CALL0C)
(1)  416/    9635 : (MACRO)             	smpsReturn
(1)  416/    9635 : F9                                  dc.b    $F9
(1)  417/    9636 :                     
(1)  418/    9636 :                     EveningStar_Call0D:
(1)  419/    9636 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  419/    9636 : F502                        dc.b    $F5,STONE_02
(1)  420/    9638 : B108 04             	dc.b	(nMaxPSG2-$23)&$FF, $08, $04
(1)  421/    963B : (MACRO)             	smpsLoop            $00, $07, EveningStar_Call0D
(1)  421/    963B : F7                          dc.b    $F7
(1)  421/    963C : 0007                        dc.b    $00,$07
(1)  421/    963E : 3696                                dc.w    z80_ptr(EVENINGSTAR_CALL0D)
(1)  422/    9640 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  422/    9640 : F505                        dc.b    $F5,STONE_05
(1)  423/    9642 : 0C                  	dc.b	$0C
(1)  424/    9643 : (MACRO)             	smpsReturn
(1)  424/    9643 : F9                                  dc.b    $F9
(1)  425/    9644 :                     
(1)  426/    9644 :                     ; DAC Data
(1)  427/    9644 :                     EveningStar_DAC:
(1)  428/    9644 : 8018 81             	dc.b	nRst, $18, dSnareS3
(1)  429/    9647 : (MACRO)             	smpsLoop            $00, $07, EveningStar_DAC
(1)  429/    9647 : F7                          dc.b    $F7
(1)  429/    9648 : 0007                        dc.b    $00,$07
(1)  429/    964A : 4496                                dc.w    z80_ptr(EVENINGSTAR_DAC)
(1)  430/    964C : 810C 8208 0483 0884 	dc.b	dSnareS3, $0C, dHighTom, $08, $04, dMidTomS3, $08, dLowTomS3, $04, dFloorTomS3, $08, $04
             9654 : 0485 0804         
(1)  431/    9658 :                     
(1)  432/    9658 :                     EveningStar_Loop00:
(1)  433/    9658 : (MACRO)             	smpsCall            EveningStar_Call00
(1)  433/    9658 : F8                          dc.b    $F8
(1)  433/    9659 : 8196                                dc.w    z80_ptr(EVENINGSTAR_CALL00)
(1)  434/    965B : (MACRO)             	smpsLoop            $00, $08, EveningStar_Loop00
(1)  434/    965B : F7                          dc.b    $F7
(1)  434/    965C : 0008                        dc.b    $00,$08
(1)  434/    965E : 5896                                dc.w    z80_ptr(EVENINGSTAR_LOOP00)
(1)  435/    9660 :                     
(1)  436/    9660 :                     EveningStar_Loop01:
(1)  437/    9660 : (MACRO)             	smpsCall            EveningStar_Call00
(1)  437/    9660 : F8                          dc.b    $F8
(1)  437/    9661 : 8196                                dc.w    z80_ptr(EVENINGSTAR_CALL00)
(1)  438/    9663 : (MACRO)             	smpsLoop            $00, $03, EveningStar_Loop01
(1)  438/    9663 : F7                          dc.b    $F7
(1)  438/    9664 : 0003                        dc.b    $00,$03
(1)  438/    9666 : 6096                                dc.w    z80_ptr(EVENINGSTAR_LOOP01)
(1)  439/    9668 : 810C 8182 1404 8018 	dc.b	dSnareS3, $0C, dSnareS3, dHighTom, $14, $04, nRst, $18, nRst, $08, dHighTom, $04
             9670 : 8008 8204         
(1)  440/    9674 : 0804                	dc.b	$08, $04
(1)  441/    9676 :                     
(1)  442/    9676 :                     EveningStar_Loop02:
(1)  443/    9676 : (MACRO)             	smpsCall            EveningStar_Call00
(1)  443/    9676 : F8                          dc.b    $F8
(1)  443/    9677 : 8196                                dc.w    z80_ptr(EVENINGSTAR_CALL00)
(1)  444/    9679 : (MACRO)             	smpsLoop            $00, $04, EveningStar_Loop02
(1)  444/    9679 : F7                          dc.b    $F7
(1)  444/    967A : 0004                        dc.b    $00,$04
(1)  444/    967C : 7696                                dc.w    z80_ptr(EVENINGSTAR_LOOP02)
(1)  445/    967E : (MACRO)             	smpsJump            EveningStar_Loop00
(1)  445/    967E : F6                          dc.b    $F6
(1)  445/    967F : 5896                                dc.w    z80_ptr(EVENINGSTAR_LOOP00)
(1)  446/    9681 :                     
(1)  447/    9681 :                     EveningStar_Call00:
(1)  448/    9681 : 810C 8182 2481 0C82 	dc.b	dSnareS3, $0C, dSnareS3, dHighTom, $24, dSnareS3, $0C, dHighTom, $08, dMidTomS3, $04, dLowTomS3
             9689 : 0883 0484         
(1)  449/    968D : 0885 04             	dc.b	$08, dFloorTomS3, $04
(1)  450/    9690 : (MACRO)             	smpsReturn
(1)  450/    9690 : F9                                  dc.b    $F9
(1)  451/    9691 :                     
(1)  452/    9691 :                     EveningStar_Voices:
(1)  453/    9691 :                     ;	Voice $00
(1)  454/    9691 :                     ;	$29
(1)  455/    9691 :                     ;	$59, $54, $01, $02, 	$DF, $DF, $9F, $9F, 	$10, $0C, $03, $05
(1)  456/    9691 :                     ;	$12, $0F, $04, $07, 	$7F, $2F, $4F, $9F, 	$15, $1E, $1C, $80
(1)  457/    9691 : (MACRO)             	smpsVcAlgorithm     $01
(1)  457/    9691 : =$1                 vcAlgorithm set $01
(1)  458/    9691 : (MACRO)             	smpsVcFeedback      $05
(1)  458/    9691 : =$5                 vcFeedback set $05
(1)  459/    9691 : (MACRO)             	smpsVcUnusedBits    $00
(1)  459/    9691 : =$0                 vcUnusedBits set $00
(1)  459/    9691 : =$0                 vcD1R1Unk set 0
(1)  459/    9691 : =$0                 vcD1R2Unk set 0
(1)  459/    9691 : =$0                 vcD1R3Unk set 0
(1)  459/    9691 : =$0                 vcD1R4Unk set 0
(1)  460/    9691 : (MACRO)             	smpsVcDetune        $00, $00, $05, $05
(1)  460/    9691 : =$0                 vcDT1 set $00
(1)  460/    9691 : =$0                 vcDT2 set $00
(1)  460/    9691 : =$5                 vcDT3 set $05
(1)  460/    9691 : =$5                 vcDT4 set $05
(1)  461/    9691 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $04, $09
(1)  461/    9691 : =$2                 vcCF1 set $02
(1)  461/    9691 : =$1                 vcCF2 set $01
(1)  461/    9691 : =$4                 vcCF3 set $04
(1)  461/    9691 : =$9                 vcCF4 set $09
(1)  462/    9691 : (MACRO)             	smpsVcRateScale     $02, $02, $03, $03
(1)  462/    9691 : =$2                 vcRS1 set $02
(1)  462/    9691 : =$2                 vcRS2 set $02
(1)  462/    9691 : =$3                 vcRS3 set $03
(1)  462/    9691 : =$3                 vcRS4 set $03
(1)  463/    9691 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  463/    9691 : =$1F                vcAR1 set $1F
(1)  463/    9691 : =$1F                vcAR2 set $1F
(1)  463/    9691 : =$1F                vcAR3 set $1F
(1)  463/    9691 : =$1F                vcAR4 set $1F
(1)  464/    9691 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  464/    9691 : =$0                 vcAM1 set $00<<5
(1)  464/    9691 : =$0                 vcAM2 set $00<<5
(1)  464/    9691 : =$0                 vcAM3 set $00<<5
(1)  464/    9691 : =$0                 vcAM4 set $00<<5
(1)  465/    9691 : (MACRO)             	smpsVcDecayRate1    $05, $03, $0C, $10
(1)  465/    9691 : =$5                 vcD1R1 set $05
(1)  465/    9691 : =$3                 vcD1R2 set $03
(1)  465/    9691 : =$C                 vcD1R3 set $0C
(1)  465/    9691 : =$10                vcD1R4 set $10
(1)  466/    9691 : (MACRO)             	smpsVcDecayRate2    $07, $04, $0F, $12
(1)  466/    9691 : =$7                 vcD2R1 set $07
(1)  466/    9691 : =$4                 vcD2R2 set $04
(1)  466/    9691 : =$F                 vcD2R3 set $0F
(1)  466/    9691 : =$12                vcD2R4 set $12
(1)  467/    9691 : (MACRO)             	smpsVcDecayLevel    $09, $04, $02, $07
(1)  467/    9691 : =$9                 vcDL1 set $09
(1)  467/    9691 : =$4                 vcDL2 set $04
(1)  467/    9691 : =$2                 vcDL3 set $02
(1)  467/    9691 : =$7                 vcDL4 set $07
(1)  468/    9691 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  468/    9691 : =$F                 vcRR1 set $0F
(1)  468/    9691 : =$F                 vcRR2 set $0F
(1)  468/    9691 : =$F                 vcRR3 set $0F
(1)  468/    9691 : =$F                 vcRR4 set $0F
(1)  469/    9691 : (MACRO)             	smpsVcTotalLevel    $00, $1C, $1E, $15
(1)  469/    9691 : =$0                 vcTL1 set $00
(1)  469/    9691 : =$1C                vcTL2 set $1C
(1)  469/    9691 : =$1E                vcTL3 set $1E
(1)  469/    9691 : =$15                vcTL4 set $15
(1)  469/    9691 : 29                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  469/    9692 :                     ;   0     1     2     3     4     5     6     7
(1)  469/    9692 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  469/    9692 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  469/    9692 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  469/    9692 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  469/    9692 : =$80                vcTLMask1 set $80
(1)  469/    9692 :                     
(1)  469/    9692 :                     
(1)  469/    9692 : 5954 0102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  469/    9696 : DFDF 9F9F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  469/    969A : 100C 0305                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  469/    969E : 120F 0407                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  469/    96A2 : 7F2F 4F9F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  469/    96A6 : 151E 1C80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  470/    96AA :                     
(1)  471/    96AA :                     ;	Voice $01
(1)  472/    96AA :                     ;	$01
(1)  473/    96AA :                     ;	$75, $75, $71, $31, 	$D5, $55, $96, $94, 	$02, $0B, $05, $0D
(1)  474/    96AA :                     ;	$0A, $0A, $0F, $06, 	$FF, $2F, $3F, $6F, 	$25, $2B, $0F, $80
(1)  475/    96AA : (MACRO)             	smpsVcAlgorithm     $01
(1)  475/    96AA : =$1                 vcAlgorithm set $01
(1)  476/    96AA : (MACRO)             	smpsVcFeedback      $00
(1)  476/    96AA : =$0                 vcFeedback set $00
(1)  477/    96AA : (MACRO)             	smpsVcUnusedBits    $00
(1)  477/    96AA : =$0                 vcUnusedBits set $00
(1)  477/    96AA : =$0                 vcD1R1Unk set 0
(1)  477/    96AA : =$0                 vcD1R2Unk set 0
(1)  477/    96AA : =$0                 vcD1R3Unk set 0
(1)  477/    96AA : =$0                 vcD1R4Unk set 0
(1)  478/    96AA : (MACRO)             	smpsVcDetune        $03, $07, $07, $07
(1)  478/    96AA : =$3                 vcDT1 set $03
(1)  478/    96AA : =$7                 vcDT2 set $07
(1)  478/    96AA : =$7                 vcDT3 set $07
(1)  478/    96AA : =$7                 vcDT4 set $07
(1)  479/    96AA : (MACRO)             	smpsVcCoarseFreq    $01, $01, $05, $05
(1)  479/    96AA : =$1                 vcCF1 set $01
(1)  479/    96AA : =$1                 vcCF2 set $01
(1)  479/    96AA : =$5                 vcCF3 set $05
(1)  479/    96AA : =$5                 vcCF4 set $05
(1)  480/    96AA : (MACRO)             	smpsVcRateScale     $02, $02, $01, $03
(1)  480/    96AA : =$2                 vcRS1 set $02
(1)  480/    96AA : =$2                 vcRS2 set $02
(1)  480/    96AA : =$1                 vcRS3 set $01
(1)  480/    96AA : =$3                 vcRS4 set $03
(1)  481/    96AA : (MACRO)             	smpsVcAttackRate    $14, $16, $15, $15
(1)  481/    96AA : =$14                vcAR1 set $14
(1)  481/    96AA : =$16                vcAR2 set $16
(1)  481/    96AA : =$15                vcAR3 set $15
(1)  481/    96AA : =$15                vcAR4 set $15
(1)  482/    96AA : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  482/    96AA : =$0                 vcAM1 set $00<<5
(1)  482/    96AA : =$0                 vcAM2 set $00<<5
(1)  482/    96AA : =$0                 vcAM3 set $00<<5
(1)  482/    96AA : =$0                 vcAM4 set $00<<5
(1)  483/    96AA : (MACRO)             	smpsVcDecayRate1    $0D, $05, $0B, $02
(1)  483/    96AA : =$D                 vcD1R1 set $0D
(1)  483/    96AA : =$5                 vcD1R2 set $05
(1)  483/    96AA : =$B                 vcD1R3 set $0B
(1)  483/    96AA : =$2                 vcD1R4 set $02
(1)  484/    96AA : (MACRO)             	smpsVcDecayRate2    $06, $0F, $0A, $0A
(1)  484/    96AA : =$6                 vcD2R1 set $06
(1)  484/    96AA : =$F                 vcD2R2 set $0F
(1)  484/    96AA : =$A                 vcD2R3 set $0A
(1)  484/    96AA : =$A                 vcD2R4 set $0A
(1)  485/    96AA : (MACRO)             	smpsVcDecayLevel    $06, $03, $02, $0F
(1)  485/    96AA : =$6                 vcDL1 set $06
(1)  485/    96AA : =$3                 vcDL2 set $03
(1)  485/    96AA : =$2                 vcDL3 set $02
(1)  485/    96AA : =$F                 vcDL4 set $0F
(1)  486/    96AA : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  486/    96AA : =$F                 vcRR1 set $0F
(1)  486/    96AA : =$F                 vcRR2 set $0F
(1)  486/    96AA : =$F                 vcRR3 set $0F
(1)  486/    96AA : =$F                 vcRR4 set $0F
(1)  487/    96AA : (MACRO)             	smpsVcTotalLevel    $00, $0F, $2B, $25
(1)  487/    96AA : =$0                 vcTL1 set $00
(1)  487/    96AA : =$F                 vcTL2 set $0F
(1)  487/    96AA : =$2B                vcTL3 set $2B
(1)  487/    96AA : =$25                vcTL4 set $25
(1)  487/    96AA : 01                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  487/    96AB :                     ;   0     1     2     3     4     5     6     7
(1)  487/    96AB :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  487/    96AB : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  487/    96AB : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  487/    96AB : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  487/    96AB : =$80                vcTLMask1 set $80
(1)  487/    96AB :                     
(1)  487/    96AB :                     
(1)  487/    96AB : 7575 7131                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  487/    96AF : D555 9694                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  487/    96B3 : 020B 050D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  487/    96B7 : 0A0A 0F06                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  487/    96BB : FF2F 3F6F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  487/    96BF : 252B 0F80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  488/    96C3 :                     
(1)  489/    96C3 :                     ;	Voice $02
(1)  490/    96C3 :                     ;	$0D
(1)  491/    96C3 :                     ;	$77, $65, $05, $15, 	$1F, $5F, $5F, $5F, 	$00, $10, $08, $10
(1)  492/    96C3 :                     ;	$00, $03, $05, $04, 	$0F, $FC, $8C, $CC, 	$1F, $80, $80, $80
(1)  493/    96C3 : (MACRO)             	smpsVcAlgorithm     $05
(1)  493/    96C3 : =$5                 vcAlgorithm set $05
(1)  494/    96C3 : (MACRO)             	smpsVcFeedback      $01
(1)  494/    96C3 : =$1                 vcFeedback set $01
(1)  495/    96C3 : (MACRO)             	smpsVcUnusedBits    $00
(1)  495/    96C3 : =$0                 vcUnusedBits set $00
(1)  495/    96C3 : =$0                 vcD1R1Unk set 0
(1)  495/    96C3 : =$0                 vcD1R2Unk set 0
(1)  495/    96C3 : =$0                 vcD1R3Unk set 0
(1)  495/    96C3 : =$0                 vcD1R4Unk set 0
(1)  496/    96C3 : (MACRO)             	smpsVcDetune        $01, $00, $06, $07
(1)  496/    96C3 : =$1                 vcDT1 set $01
(1)  496/    96C3 : =$0                 vcDT2 set $00
(1)  496/    96C3 : =$6                 vcDT3 set $06
(1)  496/    96C3 : =$7                 vcDT4 set $07
(1)  497/    96C3 : (MACRO)             	smpsVcCoarseFreq    $05, $05, $05, $07
(1)  497/    96C3 : =$5                 vcCF1 set $05
(1)  497/    96C3 : =$5                 vcCF2 set $05
(1)  497/    96C3 : =$5                 vcCF3 set $05
(1)  497/    96C3 : =$7                 vcCF4 set $07
(1)  498/    96C3 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1)  498/    96C3 : =$1                 vcRS1 set $01
(1)  498/    96C3 : =$1                 vcRS2 set $01
(1)  498/    96C3 : =$1                 vcRS3 set $01
(1)  498/    96C3 : =$0                 vcRS4 set $00
(1)  499/    96C3 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  499/    96C3 : =$1F                vcAR1 set $1F
(1)  499/    96C3 : =$1F                vcAR2 set $1F
(1)  499/    96C3 : =$1F                vcAR3 set $1F
(1)  499/    96C3 : =$1F                vcAR4 set $1F
(1)  500/    96C3 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  500/    96C3 : =$0                 vcAM1 set $00<<5
(1)  500/    96C3 : =$0                 vcAM2 set $00<<5
(1)  500/    96C3 : =$0                 vcAM3 set $00<<5
(1)  500/    96C3 : =$0                 vcAM4 set $00<<5
(1)  501/    96C3 : (MACRO)             	smpsVcDecayRate1    $10, $08, $10, $00
(1)  501/    96C3 : =$10                vcD1R1 set $10
(1)  501/    96C3 : =$8                 vcD1R2 set $08
(1)  501/    96C3 : =$10                vcD1R3 set $10
(1)  501/    96C3 : =$0                 vcD1R4 set $00
(1)  502/    96C3 : (MACRO)             	smpsVcDecayRate2    $04, $05, $03, $00
(1)  502/    96C3 : =$4                 vcD2R1 set $04
(1)  502/    96C3 : =$5                 vcD2R2 set $05
(1)  502/    96C3 : =$3                 vcD2R3 set $03
(1)  502/    96C3 : =$0                 vcD2R4 set $00
(1)  503/    96C3 : (MACRO)             	smpsVcDecayLevel    $0C, $08, $0F, $00
(1)  503/    96C3 : =$C                 vcDL1 set $0C
(1)  503/    96C3 : =$8                 vcDL2 set $08
(1)  503/    96C3 : =$F                 vcDL3 set $0F
(1)  503/    96C3 : =$0                 vcDL4 set $00
(1)  504/    96C3 : (MACRO)             	smpsVcReleaseRate   $0C, $0C, $0C, $0F
(1)  504/    96C3 : =$C                 vcRR1 set $0C
(1)  504/    96C3 : =$C                 vcRR2 set $0C
(1)  504/    96C3 : =$C                 vcRR3 set $0C
(1)  504/    96C3 : =$F                 vcRR4 set $0F
(1)  505/    96C3 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $1F
(1)  505/    96C3 : =$0                 vcTL1 set $00
(1)  505/    96C3 : =$0                 vcTL2 set $00
(1)  505/    96C3 : =$0                 vcTL3 set $00
(1)  505/    96C3 : =$1F                vcTL4 set $1F
(1)  505/    96C3 : 0D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  505/    96C4 :                     ;   0     1     2     3     4     5     6     7
(1)  505/    96C4 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  505/    96C4 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  505/    96C4 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  505/    96C4 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  505/    96C4 : =$80                vcTLMask1 set $80
(1)  505/    96C4 :                     
(1)  505/    96C4 :                     
(1)  505/    96C4 : 7765 0515                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  505/    96C8 : 1F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  505/    96CC : 0010 0810                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  505/    96D0 : 0003 0504                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  505/    96D4 : 0FFC 8CCC                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  505/    96D8 : 1F80 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  506/    96DC :                     
(1)  507/    96DC :                     
   27/    96DC :                        		include		"Music/Moonrise.asm"
(1)    1/    96DC :                     Moonrise_Header:
(1)    2/    96DC : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    96DC :                     
(1)    2/    96DC : =$3                 SourceDriver set 3
(1)    2/    96DC :                     
(1)    2/    96DC : =$0                 SourceSMPS2ASM set 0
(1)    2/    96DC :                     
(1)    2/    96DC : =$96DC              songStart set *
(1)    2/    96DC :                     
(1)    2/    96DC :                     
(1)    3/    96DC : (MACRO)             	smpsHeaderVoice     Moonrise_Voices
(1)    3/    96DC : 439A                                dc.w    z80_ptr(MOONRISE_VOICES)
(1)    4/    96DE : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    96DE : 0603                        dc.b    $06,$03
(1)    5/    96E0 : (MACRO)             	smpsHeaderTempo     $01, $25
(1)    5/    96E0 : 01                          dc.b    $01
(1)    5/    96E1 :  (MACRO-2)                  convertMainTempoMod $25
(1)    5/    96E1 : 25                                  dc.b    $25
(1)    6/    96E2 :                     
(1)    7/    96E2 : (MACRO)             	smpsHeaderDAC       Moonrise_DAC
(1)    7/    96E2 :  (MACRO-2)                  CheckedChannelPointer MOONRISE_DAC
(1)    7/    96E2 : DD99                                dc.w    z80_ptr(MOONRISE_DAC)
(1)    7/    96E4 : 0000                                dc.w    $00
(1)    8/    96E6 : (MACRO)             	smpsHeaderFM        Moonrise_FM1,	$00, $0D
(1)    8/    96E6 :  (MACRO-2)                  CheckedChannelPointer MOONRISE_FM1
(1)    8/    96E6 : 0C97                                dc.w    z80_ptr(MOONRISE_FM1)
(1)    8/    96E8 : 000D                        dc.b    $00,$0D
(1)    9/    96EA : (MACRO)             	smpsHeaderFM        Moonrise_FM2,	$00, $0A
(1)    9/    96EA :  (MACRO-2)                  CheckedChannelPointer MOONRISE_FM2
(1)    9/    96EA : 3197                                dc.w    z80_ptr(MOONRISE_FM2)
(1)    9/    96EC : 000A                        dc.b    $00,$0A
(1)   10/    96EE : (MACRO)             	smpsHeaderFM        Moonrise_FM3,	$00, $0A
(1)   10/    96EE :  (MACRO-2)                  CheckedChannelPointer MOONRISE_FM3
(1)   10/    96EE : FF97                                dc.w    z80_ptr(MOONRISE_FM3)
(1)   10/    96F0 : 000A                        dc.b    $00,$0A
(1)   11/    96F2 : (MACRO)             	smpsHeaderFM        Moonrise_FM4,	$00, $0A
(1)   11/    96F2 :  (MACRO-2)                  CheckedChannelPointer MOONRISE_FM4
(1)   11/    96F2 : 3298                                dc.w    z80_ptr(MOONRISE_FM4)
(1)   11/    96F4 : 000A                        dc.b    $00,$0A
(1)   12/    96F6 : (MACRO)             	smpsHeaderFM        Moonrise_FM5,	$00, $0A
(1)   12/    96F6 :  (MACRO-2)                  CheckedChannelPointer MOONRISE_FM5
(1)   12/    96F6 : 6998                                dc.w    z80_ptr(MOONRISE_FM5)
(1)   12/    96F8 : 000A                        dc.b    $00,$0A
(1)   13/    96FA : (MACRO)             	smpsHeaderPSG       Moonrise_PSG1,	$00, $00, $00, $00
(1)   13/    96FA :  (MACRO-2)                  CheckedChannelPointer MOONRISE_PSG1
(1)   13/    96FA : 2199                                dc.w    z80_ptr(MOONRISE_PSG1)
(1)   13/    96FC :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/    96FC : 00                                  dc.b    $00
(1)   13/    96FD : 0000 00                     dc.b    $00,$00,$00
(1)   14/    9700 : (MACRO)             	smpsHeaderPSG       Moonrise_PSG2,	$00, $05, $00, $00
(1)   14/    9700 :  (MACRO-2)                  CheckedChannelPointer MOONRISE_PSG2
(1)   14/    9700 : 9999                                dc.w    z80_ptr(MOONRISE_PSG2)
(1)   14/    9702 :  (MACRO-2)                  PSGPitchConvert $00
(1)   14/    9702 : 00                                  dc.b    $00
(1)   14/    9703 : 0500 00                     dc.b    $05,$00,$00
(1)   15/    9706 : (MACRO)             	smpsHeaderPSG       Moonrise_PSG3,	$23, $01, $00, $00
(1)   15/    9706 :  (MACRO-2)                  CheckedChannelPointer MOONRISE_PSG3
(1)   15/    9706 : B499                                dc.w    z80_ptr(MOONRISE_PSG3)
(1)   15/    9708 :  (MACRO-2)                  PSGPitchConvert $23
(1)   15/    9708 : 23                                  dc.b    $23
(1)   15/    9709 : 0100 00                     dc.b    $01,$00,$00
(1)   16/    970C :                     
(1)   17/    970C :                     ; FM1 Data
(1)   18/    970C :                     Moonrise_FM1:
(1)   19/    970C : (MACRO)             	smpsSetvoice        $00
(1)   19/    970C :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    970C : EF00                                dc.b    $EF,$00
(1)   20/    970E :                     
(1)   21/    970E :                     Moonrise_Loop05:
(1)   22/    970E : (MACRO)             	smpsCall            Moonrise_Call09
(1)   22/    970E : F8                          dc.b    $F8
(1)   22/    970F : 2197                                dc.w    z80_ptr(MOONRISE_CALL09)
(1)   23/    9711 : (MACRO)             	smpsLoop            $01, $02, Moonrise_Loop05
(1)   23/    9711 : F7                          dc.b    $F7
(1)   23/    9712 : 0102                        dc.b    $01,$02
(1)   23/    9714 : 0E97                                dc.w    z80_ptr(MOONRISE_LOOP05)
(1)   24/    9716 :                     
(1)   25/    9716 :                     Moonrise_Loop06:
(1)   26/    9716 : (MACRO)             	smpsCall            Moonrise_Call09
(1)   26/    9716 : F8                          dc.b    $F8
(1)   26/    9717 : 2197                                dc.w    z80_ptr(MOONRISE_CALL09)
(1)   27/    9719 : (MACRO)             	smpsLoop            $01, $04, Moonrise_Loop06
(1)   27/    9719 : F7                          dc.b    $F7
(1)   27/    971A : 0104                        dc.b    $01,$04
(1)   27/    971C : 1697                                dc.w    z80_ptr(MOONRISE_LOOP06)
(1)   28/    971E : (MACRO)             	smpsJump            Moonrise_Loop06
(1)   28/    971E : F6                          dc.b    $F6
(1)   28/    971F : 1697                                dc.w    z80_ptr(MOONRISE_LOOP06)
(1)   29/    9721 :                     
(1)   30/    9721 :                     Moonrise_Call09:
(1)   31/    9721 : 9B12 9B99 0C        	dc.b	nD2, $12, nD2, nC2, $0C
(1)   32/    9726 : (MACRO)             	smpsLoop            $00, $03, Moonrise_Call09
(1)   32/    9726 : F7                          dc.b    $F7
(1)   32/    9727 : 0003                        dc.b    $00,$03
(1)   32/    9729 : 2197                                dc.w    z80_ptr(MOONRISE_CALL09)
(1)   33/    972B : A012 9E99 0C        	dc.b	nG2, $12, nF2, nC2, $0C
(1)   34/    9730 : (MACRO)             	smpsReturn
(1)   34/    9730 : F9                                  dc.b    $F9
(1)   35/    9731 :                     
(1)   36/    9731 :                     ; FM2 Data
(1)   37/    9731 :                     Moonrise_FM2:
(1)   38/    9731 : (MACRO)             	smpsSetvoice        $01
(1)   38/    9731 :  (MACRO-2)                  smpsFMvoice $01
(1)   38/    9731 : EF01                                dc.b    $EF,$01
(1)   39/    9733 : (MACRO)             	smpsPan             panLeft, $00
(1)   39/    9733 : =$0                 panNone set $00
(1)   39/    9733 : =$40                panRight set $40
(1)   39/    9733 : =$80                panLeft set $80
(1)   39/    9733 : =$C0                panCentre set $C0
(1)   39/    9733 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   39/    9733 : E080                        dc.b $E0,PANLEFT+$00
(1)   40/    9735 : 8060 8054 A70C E760 	dc.b	nRst, $60, nRst, $54, nD3, $0C, smpsNoAttack, $60
(1)   41/    973D : (MACRO)             	smpsPan             panCenter, $00
(1)   41/    973D : =$0                 panNone set $00
(1)   41/    973D : =$40                panRight set $40
(1)   41/    973D : =$80                panLeft set $80
(1)   41/    973D : =$C0                panCentre set $C0
(1)   41/    973D : =$C0                panCenter set $C0 ; silly Americans :U
(1)   41/    973D : E0C0                        dc.b $E0,PANCENTER+$00
(1)   42/    973F : (MACRO)             	smpsSetvoice        $02
(1)   42/    973F :  (MACRO-2)                  smpsFMvoice $02
(1)   42/    973F : EF02                                dc.b    $EF,$02
(1)   43/    9741 : (MACRO)             	smpsFMAlterVol      $09
(1)   43/    9741 : E609                                dc.b    $E6,$09
(1)   44/    9743 : B812                	dc.b	nG4, $12
(1)   45/    9745 : (MACRO)             	smpsFMAlterVol      $0A
(1)   45/    9745 : E60A                                dc.b    $E6,$0A
(1)   46/    9747 : (MACRO)             	smpsPan             panLeft, $00
(1)   46/    9747 : =$0                 panNone set $00
(1)   46/    9747 : =$40                panRight set $40
(1)   46/    9747 : =$80                panLeft set $80
(1)   46/    9747 : =$C0                panCentre set $C0
(1)   46/    9747 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   46/    9747 : E080                        dc.b $E0,PANLEFT+$00
(1)   47/    9749 : 06                  	dc.b	$06
(1)   48/    974A : (MACRO)             	smpsFMAlterVol      $F6
(1)   48/    974A : E6F6                                dc.b    $E6,$F6
(1)   49/    974C : (MACRO)             	smpsPan             panCenter, $00
(1)   49/    974C : =$0                 panNone set $00
(1)   49/    974C : =$40                panRight set $40
(1)   49/    974C : =$80                panLeft set $80
(1)   49/    974C : =$C0                panCentre set $C0
(1)   49/    974C : =$C0                panCenter set $C0 ; silly Americans :U
(1)   49/    974C : E0C0                        dc.b $E0,PANCENTER+$00
(1)   50/    974E : B712                	dc.b	nFs4, $12
(1)   51/    9750 : (MACRO)             	smpsFMAlterVol      $0A
(1)   51/    9750 : E60A                                dc.b    $E6,$0A
(1)   52/    9752 : (MACRO)             	smpsPan             panLeft, $00
(1)   52/    9752 : =$0                 panNone set $00
(1)   52/    9752 : =$40                panRight set $40
(1)   52/    9752 : =$80                panLeft set $80
(1)   52/    9752 : =$C0                panCentre set $C0
(1)   52/    9752 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   52/    9752 : E080                        dc.b $E0,PANLEFT+$00
(1)   53/    9754 : 06                  	dc.b	$06
(1)   54/    9755 : (MACRO)             	smpsFMAlterVol      $F6
(1)   54/    9755 : E6F6                                dc.b    $E6,$F6
(1)   55/    9757 : (MACRO)             	smpsPan             panCenter, $00
(1)   55/    9757 : =$0                 panNone set $00
(1)   55/    9757 : =$40                panRight set $40
(1)   55/    9757 : =$80                panLeft set $80
(1)   55/    9757 : =$C0                panCentre set $C0
(1)   55/    9757 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   55/    9757 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   56/    9759 : B606 B1B3           	dc.b	nF4, $06, nC4, nD4
(1)   57/    975D : (MACRO)             	smpsFMAlterVol      $0A
(1)   57/    975D : E60A                                dc.b    $E6,$0A
(1)   58/    975F : (MACRO)             	smpsPan             panLeft, $00
(1)   58/    975F : =$0                 panNone set $00
(1)   58/    975F : =$40                panRight set $40
(1)   58/    975F : =$80                panLeft set $80
(1)   58/    975F : =$C0                panCentre set $C0
(1)   58/    975F : =$C0                panCenter set $C0 ; silly Americans :U
(1)   58/    975F : E080                        dc.b $E0,PANLEFT+$00
(1)   59/    9761 : B3                  	dc.b	nD4
(1)   60/    9762 : (MACRO)             	smpsFMAlterVol      $F6
(1)   60/    9762 : E6F6                                dc.b    $E6,$F6
(1)   61/    9764 : (MACRO)             	smpsPan             panCenter, $00
(1)   61/    9764 : =$0                 panNone set $00
(1)   61/    9764 : =$40                panRight set $40
(1)   61/    9764 : =$80                panLeft set $80
(1)   61/    9764 : =$C0                panCentre set $C0
(1)   61/    9764 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   61/    9764 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   62/    9766 : B60C B306           	dc.b	nF4, $0C, nD4, $06
(1)   63/    976A : (MACRO)             	smpsFMAlterVol      $0A
(1)   63/    976A : E60A                                dc.b    $E6,$0A
(1)   64/    976C : (MACRO)             	smpsPan             panLeft, $00
(1)   64/    976C : =$0                 panNone set $00
(1)   64/    976C : =$40                panRight set $40
(1)   64/    976C : =$80                panLeft set $80
(1)   64/    976C : =$C0                panCentre set $C0
(1)   64/    976C : =$C0                panCenter set $C0 ; silly Americans :U
(1)   64/    976C : E080                        dc.b $E0,PANLEFT+$00
(1)   65/    976E : B3                  	dc.b	nD4
(1)   66/    976F : (MACRO)             	smpsFMAlterVol      $F6
(1)   66/    976F : E6F6                                dc.b    $E6,$F6
(1)   67/    9771 : (MACRO)             	smpsPan             panCenter, $00
(1)   67/    9771 : =$0                 panNone set $00
(1)   67/    9771 : =$40                panRight set $40
(1)   67/    9771 : =$80                panLeft set $80
(1)   67/    9771 : =$C0                panCentre set $C0
(1)   67/    9771 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   67/    9771 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   68/    9773 :                     
(1)   69/    9773 :                     Moonrise_Jump01:
(1)   70/    9773 : B612 B30C           	dc.b	nF4, $12, nD4, $0C
(1)   71/    9777 : (MACRO)             	smpsFMAlterVol      $0A
(1)   71/    9777 : E60A                                dc.b    $E6,$0A
(1)   72/    9779 : (MACRO)             	smpsPan             panLeft, $00
(1)   72/    9779 : =$0                 panNone set $00
(1)   72/    9779 : =$40                panRight set $40
(1)   72/    9779 : =$80                panLeft set $80
(1)   72/    9779 : =$C0                panCentre set $C0
(1)   72/    9779 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   72/    9779 : E080                        dc.b $E0,PANLEFT+$00
(1)   73/    977B : 0C                  	dc.b	$0C
(1)   74/    977C : (MACRO)             	smpsFMAlterVol      $F6
(1)   74/    977C : E6F6                                dc.b    $E6,$F6
(1)   75/    977E : (MACRO)             	smpsPan             panCenter, $00
(1)   75/    977E : =$0                 panNone set $00
(1)   75/    977E : =$40                panRight set $40
(1)   75/    977E : =$80                panLeft set $80
(1)   75/    977E : =$C0                panCentre set $C0
(1)   75/    977E : =$C0                panCenter set $C0 ; silly Americans :U
(1)   75/    977E : E0C0                        dc.b $E0,PANCENTER+$00
(1)   76/    9780 : 8006                	dc.b	nRst, $06
(1)   77/    9782 : (MACRO)             	smpsSetvoice        $01
(1)   77/    9782 :  (MACRO-2)                  smpsFMvoice $01
(1)   77/    9782 : EF01                                dc.b    $EF,$01
(1)   78/    9784 : (MACRO)             	smpsFMAlterVol      $F7
(1)   78/    9784 : E6F7                                dc.b    $E6,$F7
(1)   79/    9786 :                     
(1)   80/    9786 :                     Moonrise_Loop03:
(1)   81/    9786 : (MACRO)             	smpsCall            Moonrise_Call08
(1)   81/    9786 : F8                          dc.b    $F8
(1)   81/    9787 : F297                                dc.w    z80_ptr(MOONRISE_CALL08)
(1)   82/    9789 : (MACRO)             	smpsLoop            $00, $06, Moonrise_Loop03
(1)   82/    9789 : F7                          dc.b    $F7
(1)   82/    978A : 0006                        dc.b    $00,$06
(1)   82/    978C : 8697                                dc.w    z80_ptr(MOONRISE_LOOP03)
(1)   83/    978E : (MACRO)             	smpsSetvoice        $02
(1)   83/    978E :  (MACRO-2)                  smpsFMvoice $02
(1)   83/    978E : EF02                                dc.b    $EF,$02
(1)   84/    9790 : (MACRO)             	smpsFMAlterVol      $09
(1)   84/    9790 : E609                                dc.b    $E6,$09
(1)   85/    9792 : 8006 B1B3           	dc.b	nRst, $06, nC4, nD4
(1)   86/    9796 : (MACRO)             	smpsFMAlterVol      $0A
(1)   86/    9796 : E60A                                dc.b    $E6,$0A
(1)   87/    9798 : (MACRO)             	smpsPan             panLeft, $00
(1)   87/    9798 : =$0                 panNone set $00
(1)   87/    9798 : =$40                panRight set $40
(1)   87/    9798 : =$80                panLeft set $80
(1)   87/    9798 : =$C0                panCentre set $C0
(1)   87/    9798 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   87/    9798 : E080                        dc.b $E0,PANLEFT+$00
(1)   88/    979A : B3                  	dc.b	nD4
(1)   89/    979B : (MACRO)             	smpsFMAlterVol      $F6
(1)   89/    979B : E6F6                                dc.b    $E6,$F6
(1)   90/    979D : (MACRO)             	smpsPan             panCenter, $00
(1)   90/    979D : =$0                 panNone set $00
(1)   90/    979D : =$40                panRight set $40
(1)   90/    979D : =$80                panLeft set $80
(1)   90/    979D : =$C0                panCentre set $C0
(1)   90/    979D : =$C0                panCenter set $C0 ; silly Americans :U
(1)   90/    979D : E0C0                        dc.b $E0,PANCENTER+$00
(1)   91/    979F : B60C B306           	dc.b	nF4, $0C, nD4, $06
(1)   92/    97A3 : (MACRO)             	smpsFMAlterVol      $0A
(1)   92/    97A3 : E60A                                dc.b    $E6,$0A
(1)   93/    97A5 : (MACRO)             	smpsPan             panLeft, $00
(1)   93/    97A5 : =$0                 panNone set $00
(1)   93/    97A5 : =$40                panRight set $40
(1)   93/    97A5 : =$80                panLeft set $80
(1)   93/    97A5 : =$C0                panCentre set $C0
(1)   93/    97A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   93/    97A5 : E080                        dc.b $E0,PANLEFT+$00
(1)   94/    97A7 : B3                  	dc.b	nD4
(1)   95/    97A8 : (MACRO)             	smpsFMAlterVol      $F6
(1)   95/    97A8 : E6F6                                dc.b    $E6,$F6
(1)   96/    97AA : (MACRO)             	smpsPan             panCenter, $00
(1)   96/    97AA : =$0                 panNone set $00
(1)   96/    97AA : =$40                panRight set $40
(1)   96/    97AA : =$80                panLeft set $80
(1)   96/    97AA : =$C0                panCentre set $C0
(1)   96/    97AA : =$C0                panCenter set $C0 ; silly Americans :U
(1)   96/    97AA : E0C0                        dc.b $E0,PANCENTER+$00
(1)   97/    97AC : B612 B30C 8012      	dc.b	nF4, $12, nD4, $0C, nRst, $12
(1)   98/    97B2 : (MACRO)             	smpsPan             panCenter, $00
(1)   98/    97B2 : =$0                 panNone set $00
(1)   98/    97B2 : =$40                panRight set $40
(1)   98/    97B2 : =$80                panLeft set $80
(1)   98/    97B2 : =$C0                panCentre set $C0
(1)   98/    97B2 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   98/    97B2 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   99/    97B4 : (MACRO)             	smpsSetvoice        $01
(1)   99/    97B4 :  (MACRO-2)                  smpsFMvoice $01
(1)   99/    97B4 : EF01                                dc.b    $EF,$01
(1)  100/    97B6 : (MACRO)             	smpsFMAlterVol      $F7
(1)  100/    97B6 : E6F7                                dc.b    $E6,$F7
(1)  101/    97B8 : (MACRO)             	smpsCall            Moonrise_Call08
(1)  101/    97B8 : F8                          dc.b    $F8
(1)  101/    97B9 : F297                                dc.w    z80_ptr(MOONRISE_CALL08)
(1)  102/    97BB : (MACRO)             	smpsCall            Moonrise_Call08
(1)  102/    97BB : F8                          dc.b    $F8
(1)  102/    97BC : F297                                dc.w    z80_ptr(MOONRISE_CALL08)
(1)  103/    97BE : (MACRO)             	smpsCall            Moonrise_Call08
(1)  103/    97BE : F8                          dc.b    $F8
(1)  103/    97BF : F297                                dc.w    z80_ptr(MOONRISE_CALL08)
(1)  104/    97C1 : (MACRO)             	smpsSetvoice        $02
(1)  104/    97C1 :  (MACRO-2)                  smpsFMvoice $02
(1)  104/    97C1 : EF02                                dc.b    $EF,$02
(1)  105/    97C3 : (MACRO)             	smpsFMAlterVol      $09
(1)  105/    97C3 : E609                                dc.b    $E6,$09
(1)  106/    97C5 :                     
(1)  107/    97C5 :                     Moonrise_Loop04:
(1)  108/    97C5 : B612                	dc.b	nF4, $12
(1)  109/    97C7 : (MACRO)             	smpsFMAlterVol      $0A
(1)  109/    97C7 : E60A                                dc.b    $E6,$0A
(1)  110/    97C9 : (MACRO)             	smpsPan             panLeft, $00
(1)  110/    97C9 : =$0                 panNone set $00
(1)  110/    97C9 : =$40                panRight set $40
(1)  110/    97C9 : =$80                panLeft set $80
(1)  110/    97C9 : =$C0                panCentre set $C0
(1)  110/    97C9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  110/    97C9 : E080                        dc.b $E0,PANLEFT+$00
(1)  111/    97CB : 06                  	dc.b	$06
(1)  112/    97CC : (MACRO)             	smpsFMAlterVol      $F6
(1)  112/    97CC : E6F6                                dc.b    $E6,$F6
(1)  113/    97CE : (MACRO)             	smpsPan             panCenter, $00
(1)  113/    97CE : =$0                 panNone set $00
(1)  113/    97CE : =$40                panRight set $40
(1)  113/    97CE : =$80                panLeft set $80
(1)  113/    97CE : =$C0                panCentre set $C0
(1)  113/    97CE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  113/    97CE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  114/    97D0 : (MACRO)             	smpsLoop            $00, $06, Moonrise_Loop04
(1)  114/    97D0 : F7                          dc.b    $F7
(1)  114/    97D1 : 0006                        dc.b    $00,$06
(1)  114/    97D3 : C597                                dc.w    z80_ptr(MOONRISE_LOOP04)
(1)  115/    97D5 : B606 B1B3           	dc.b	nF4, $06, nC4, nD4
(1)  116/    97D9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  116/    97D9 : E60A                                dc.b    $E6,$0A
(1)  117/    97DB : (MACRO)             	smpsPan             panLeft, $00
(1)  117/    97DB : =$0                 panNone set $00
(1)  117/    97DB : =$40                panRight set $40
(1)  117/    97DB : =$80                panLeft set $80
(1)  117/    97DB : =$C0                panCentre set $C0
(1)  117/    97DB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  117/    97DB : E080                        dc.b $E0,PANLEFT+$00
(1)  118/    97DD : B3                  	dc.b	nD4
(1)  119/    97DE : (MACRO)             	smpsFMAlterVol      $F6
(1)  119/    97DE : E6F6                                dc.b    $E6,$F6
(1)  120/    97E0 : (MACRO)             	smpsPan             panCenter, $00
(1)  120/    97E0 : =$0                 panNone set $00
(1)  120/    97E0 : =$40                panRight set $40
(1)  120/    97E0 : =$80                panLeft set $80
(1)  120/    97E0 : =$C0                panCentre set $C0
(1)  120/    97E0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  120/    97E0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  121/    97E2 : B60C B306           	dc.b	nF4, $0C, nD4, $06
(1)  122/    97E6 : (MACRO)             	smpsFMAlterVol      $0A
(1)  122/    97E6 : E60A                                dc.b    $E6,$0A
(1)  123/    97E8 : (MACRO)             	smpsPan             panLeft, $00
(1)  123/    97E8 : =$0                 panNone set $00
(1)  123/    97E8 : =$40                panRight set $40
(1)  123/    97E8 : =$80                panLeft set $80
(1)  123/    97E8 : =$C0                panCentre set $C0
(1)  123/    97E8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  123/    97E8 : E080                        dc.b $E0,PANLEFT+$00
(1)  124/    97EA : B3                  	dc.b	nD4
(1)  125/    97EB : (MACRO)             	smpsFMAlterVol      $F6
(1)  125/    97EB : E6F6                                dc.b    $E6,$F6
(1)  126/    97ED : (MACRO)             	smpsPan             panCenter, $00
(1)  126/    97ED : =$0                 panNone set $00
(1)  126/    97ED : =$40                panRight set $40
(1)  126/    97ED : =$80                panLeft set $80
(1)  126/    97ED : =$C0                panCentre set $C0
(1)  126/    97ED : =$C0                panCenter set $C0 ; silly Americans :U
(1)  126/    97ED : E0C0                        dc.b $E0,PANCENTER+$00
(1)  127/    97EF : (MACRO)             	smpsJump            Moonrise_Jump01
(1)  127/    97EF : F6                          dc.b    $F6
(1)  127/    97F0 : 7397                                dc.w    z80_ptr(MOONRISE_JUMP01)
(1)  128/    97F2 :                     
(1)  129/    97F2 :                     Moonrise_Call08:
(1)  130/    97F2 : AA12 06             	dc.b	nF3, $12, $06
(1)  131/    97F5 : (MACRO)             	smpsFMAlterVol      $0A
(1)  131/    97F5 : E60A                                dc.b    $E6,$0A
(1)  132/    97F7 : 800C AA06 80        	dc.b	nRst, $0C, nF3, $06, nRst
(1)  133/    97FC : (MACRO)             	smpsFMAlterVol      $F6
(1)  133/    97FC : E6F6                                dc.b    $E6,$F6
(1)  134/    97FE : (MACRO)             	smpsReturn
(1)  134/    97FE : F9                                  dc.b    $F9
(1)  135/    97FF :                     
(1)  136/    97FF :                     ; FM3 Data
(1)  137/    97FF :                     Moonrise_FM3:
(1)  138/    97FF : (MACRO)             	smpsSetvoice        $01
(1)  138/    97FF :  (MACRO-2)                  smpsFMvoice $01
(1)  138/    97FF : EF01                                dc.b    $EF,$01
(1)  139/    9801 : 8060 8058 AA08 E760 	dc.b	nRst, $60, nRst, $58, nF3, $08, smpsNoAttack, $60, smpsNoAttack, $60
             9809 : E760               
(1)  140/    980B : (MACRO)             	smpsPan             panRight, $00
(1)  140/    980B : =$0                 panNone set $00
(1)  140/    980B : =$40                panRight set $40
(1)  140/    980B : =$80                panLeft set $80
(1)  140/    980B : =$C0                panCentre set $C0
(1)  140/    980B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  140/    980B : E040                        dc.b $E0,PANRIGHT+$00
(1)  141/    980D :                     
(1)  142/    980D :                     Moonrise_Loop02:
(1)  143/    980D : (MACRO)             	smpsCall            Moonrise_Call07
(1)  143/    980D : F8                          dc.b    $F8
(1)  143/    980E : 2598                                dc.w    z80_ptr(MOONRISE_CALL07)
(1)  144/    9810 : (MACRO)             	smpsCall            Moonrise_Call07
(1)  144/    9810 : F8                          dc.b    $F8
(1)  144/    9811 : 2598                                dc.w    z80_ptr(MOONRISE_CALL07)
(1)  145/    9813 : (MACRO)             	smpsCall            Moonrise_Call07
(1)  145/    9813 : F8                          dc.b    $F8
(1)  145/    9814 : 2598                                dc.w    z80_ptr(MOONRISE_CALL07)
(1)  146/    9816 : (MACRO)             	smpsAlterPitch      $02
(1)  146/    9816 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  146/    9816 : FB02                                dc.b    $FB,$02
(1)  147/    9818 : (MACRO)             	smpsCall            Moonrise_Call07
(1)  147/    9818 : F8                          dc.b    $F8
(1)  147/    9819 : 2598                                dc.w    z80_ptr(MOONRISE_CALL07)
(1)  148/    981B : (MACRO)             	smpsAlterPitch      $FE
(1)  148/    981B :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  148/    981B : FBFE                                dc.b    $FB,$FE
(1)  149/    981D : (MACRO)             	smpsLoop            $00, $04, Moonrise_Loop02
(1)  149/    981D : F7                          dc.b    $F7
(1)  149/    981E : 0004                        dc.b    $00,$04
(1)  149/    9820 : 0D98                                dc.w    z80_ptr(MOONRISE_LOOP02)
(1)  150/    9822 : (MACRO)             	smpsJump            Moonrise_Loop02
(1)  150/    9822 : F6                          dc.b    $F6
(1)  150/    9823 : 0D98                                dc.w    z80_ptr(MOONRISE_LOOP02)
(1)  151/    9825 :                     
(1)  152/    9825 :                     Moonrise_Call07:
(1)  153/    9825 : AE12 06             	dc.b	nA3, $12, $06
(1)  154/    9828 : (MACRO)             	smpsFMAlterVol      $0A
(1)  154/    9828 : E60A                                dc.b    $E6,$0A
(1)  155/    982A : 800C AE06 80        	dc.b	nRst, $0C, nA3, $06, nRst
(1)  156/    982F : (MACRO)             	smpsFMAlterVol      $F6
(1)  156/    982F : E6F6                                dc.b    $E6,$F6
(1)  157/    9831 : (MACRO)             	smpsReturn
(1)  157/    9831 : F9                                  dc.b    $F9
(1)  158/    9832 :                     
(1)  159/    9832 :                     ; FM4 Data
(1)  160/    9832 :                     Moonrise_FM4:
(1)  161/    9832 : (MACRO)             	smpsSetvoice        $01
(1)  161/    9832 :  (MACRO-2)                  smpsFMvoice $01
(1)  161/    9832 : EF01                                dc.b    $EF,$01
(1)  162/    9834 : 8060 805C AE04 E760 	dc.b	nRst, $60, nRst, $5C, nA3, $04, smpsNoAttack, $60, smpsNoAttack, $60
             983C : E760               
(1)  163/    983E : (MACRO)             	smpsPan             panLeft, $00
(1)  163/    983E : =$0                 panNone set $00
(1)  163/    983E : =$40                panRight set $40
(1)  163/    983E : =$80                panLeft set $80
(1)  163/    983E : =$C0                panCentre set $C0
(1)  163/    983E : =$C0                panCenter set $C0 ; silly Americans :U
(1)  163/    983E : E080                        dc.b $E0,PANLEFT+$00
(1)  164/    9840 :                     
(1)  165/    9840 :                     Moonrise_Loop01:
(1)  166/    9840 : (MACRO)             	smpsCall            Moonrise_Call06
(1)  166/    9840 : F8                          dc.b    $F8
(1)  166/    9841 : 5C98                                dc.w    z80_ptr(MOONRISE_CALL06)
(1)  167/    9843 : (MACRO)             	smpsAlterPitch      $FF
(1)  167/    9843 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  167/    9843 : FBFF                                dc.b    $FB,$FF
(1)  168/    9845 : (MACRO)             	smpsCall            Moonrise_Call06
(1)  168/    9845 : F8                          dc.b    $F8
(1)  168/    9846 : 5C98                                dc.w    z80_ptr(MOONRISE_CALL06)
(1)  169/    9848 : (MACRO)             	smpsAlterPitch      $01
(1)  169/    9848 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  169/    9848 : FB01                                dc.b    $FB,$01
(1)  170/    984A : (MACRO)             	smpsCall            Moonrise_Call06
(1)  170/    984A : F8                          dc.b    $F8
(1)  170/    984B : 5C98                                dc.w    z80_ptr(MOONRISE_CALL06)
(1)  171/    984D : (MACRO)             	smpsAlterPitch      $02
(1)  171/    984D :  (MACRO-2)                  smpsChangeTransposition $02
(1)  171/    984D : FB02                                dc.b    $FB,$02
(1)  172/    984F : (MACRO)             	smpsCall            Moonrise_Call06
(1)  172/    984F : F8                          dc.b    $F8
(1)  172/    9850 : 5C98                                dc.w    z80_ptr(MOONRISE_CALL06)
(1)  173/    9852 : (MACRO)             	smpsAlterPitch      $FE
(1)  173/    9852 :  (MACRO-2)                  smpsChangeTransposition $FE
(1)  173/    9852 : FBFE                                dc.b    $FB,$FE
(1)  174/    9854 : (MACRO)             	smpsLoop            $00, $04, Moonrise_Loop01
(1)  174/    9854 : F7                          dc.b    $F7
(1)  174/    9855 : 0004                        dc.b    $00,$04
(1)  174/    9857 : 4098                                dc.w    z80_ptr(MOONRISE_LOOP01)
(1)  175/    9859 : (MACRO)             	smpsJump            Moonrise_Loop01
(1)  175/    9859 : F6                          dc.b    $F6
(1)  175/    985A : 4098                                dc.w    z80_ptr(MOONRISE_LOOP01)
(1)  176/    985C :                     
(1)  177/    985C :                     Moonrise_Call06:
(1)  178/    985C : A512 06             	dc.b	nC3, $12, $06
(1)  179/    985F : (MACRO)             	smpsFMAlterVol      $0A
(1)  179/    985F : E60A                                dc.b    $E6,$0A
(1)  180/    9861 : 800C A506 80        	dc.b	nRst, $0C, nC3, $06, nRst
(1)  181/    9866 : (MACRO)             	smpsFMAlterVol      $F6
(1)  181/    9866 : E6F6                                dc.b    $E6,$F6
(1)  182/    9868 : (MACRO)             	smpsReturn
(1)  182/    9868 : F9                                  dc.b    $F9
(1)  183/    9869 :                     
(1)  184/    9869 :                     ; FM5 Data
(1)  185/    9869 :                     Moonrise_FM5:
(1)  186/    9869 : (MACRO)             	smpsSetvoice        $01
(1)  186/    9869 :  (MACRO-2)                  smpsFMvoice $01
(1)  186/    9869 : EF01                                dc.b    $EF,$01
(1)  187/    986B : (MACRO)             	smpsPan             panRight, $00
(1)  187/    986B : =$0                 panNone set $00
(1)  187/    986B : =$40                panRight set $40
(1)  187/    986B : =$80                panLeft set $80
(1)  187/    986B : =$C0                panCentre set $C0
(1)  187/    986B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  187/    986B : E040                        dc.b $E0,PANRIGHT+$00
(1)  188/    986D : 8060 80B1 E730      	dc.b	nRst, $60, nRst, nC4, smpsNoAttack, $30
(1)  189/    9873 : (MACRO)             	smpsFMAlterVol      $0A
(1)  189/    9873 : E60A                                dc.b    $E6,$0A
(1)  190/    9875 : (MACRO)             	smpsCall            Moonrise_Call02
(1)  190/    9875 : F8                          dc.b    $F8
(1)  190/    9876 : 9898                                dc.w    z80_ptr(MOONRISE_CALL02)
(1)  191/    9878 :                     
(1)  192/    9878 :                     Moonrise_Loop00:
(1)  193/    9878 : (MACRO)             	smpsCall            Moonrise_Call03
(1)  193/    9878 : F8                          dc.b    $F8
(1)  193/    9879 : AC98                                dc.w    z80_ptr(MOONRISE_CALL03)
(1)  194/    987B : (MACRO)             	smpsCall            Moonrise_Call04
(1)  194/    987B : F8                          dc.b    $F8
(1)  194/    987C : D998                                dc.w    z80_ptr(MOONRISE_CALL04)
(1)  195/    987E : (MACRO)             	smpsCall            Moonrise_Call03
(1)  195/    987E : F8                          dc.b    $F8
(1)  195/    987F : AC98                                dc.w    z80_ptr(MOONRISE_CALL03)
(1)  196/    9881 : (MACRO)             	smpsCall            Moonrise_Call05
(1)  196/    9881 : F8                          dc.b    $F8
(1)  196/    9882 : FD98                                dc.w    z80_ptr(MOONRISE_CALL05)
(1)  197/    9884 : (MACRO)             	smpsCall            Moonrise_Call03
(1)  197/    9884 : F8                          dc.b    $F8
(1)  197/    9885 : AC98                                dc.w    z80_ptr(MOONRISE_CALL03)
(1)  198/    9887 : (MACRO)             	smpsCall            Moonrise_Call04
(1)  198/    9887 : F8                          dc.b    $F8
(1)  198/    9888 : D998                                dc.w    z80_ptr(MOONRISE_CALL04)
(1)  199/    988A : (MACRO)             	smpsCall            Moonrise_Call03
(1)  199/    988A : F8                          dc.b    $F8
(1)  199/    988B : AC98                                dc.w    z80_ptr(MOONRISE_CALL03)
(1)  200/    988D : (MACRO)             	smpsCall            Moonrise_Call02
(1)  200/    988D : F8                          dc.b    $F8
(1)  200/    988E : 9898                                dc.w    z80_ptr(MOONRISE_CALL02)
(1)  201/    9890 : (MACRO)             	smpsLoop            $00, $02, Moonrise_Loop00
(1)  201/    9890 : F7                          dc.b    $F7
(1)  201/    9891 : 0002                        dc.b    $00,$02
(1)  201/    9893 : 7898                                dc.w    z80_ptr(MOONRISE_LOOP00)
(1)  202/    9895 : (MACRO)             	smpsJump            Moonrise_Loop00
(1)  202/    9895 : F6                          dc.b    $F6
(1)  202/    9896 : 7898                                dc.w    z80_ptr(MOONRISE_LOOP00)
(1)  203/    9898 :                     
(1)  204/    9898 :                     Moonrise_Call02:
(1)  205/    9898 : (MACRO)             	smpsSetvoice        $03
(1)  205/    9898 :  (MACRO-2)                  smpsFMvoice $03
(1)  205/    9898 : EF03                                dc.b    $EF,$03
(1)  206/    989A : (MACRO)             	smpsPan             panLeft, $00
(1)  206/    989A : =$0                 panNone set $00
(1)  206/    989A : =$40                panRight set $40
(1)  206/    989A : =$80                panLeft set $80
(1)  206/    989A : =$C0                panCentre set $C0
(1)  206/    989A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  206/    989A : E080                        dc.b $E0,PANLEFT+$00
(1)  207/    989C : C406 C2BF B8        	dc.b	nG5, $06, nF5, nD5, nG4
(1)  208/    98A1 : (MACRO)             	smpsPan             panRight, $00
(1)  208/    98A1 : =$0                 panNone set $00
(1)  208/    98A1 : =$40                panRight set $40
(1)  208/    98A1 : =$80                panLeft set $80
(1)  208/    98A1 : =$C0                panCentre set $C0
(1)  208/    98A1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  208/    98A1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  209/    98A3 : C4C2 BFB8           	dc.b	nG5, nF5, nD5, nG4
(1)  210/    98A7 : (MACRO)             	smpsPan             panCenter, $00
(1)  210/    98A7 : =$0                 panNone set $00
(1)  210/    98A7 : =$40                panRight set $40
(1)  210/    98A7 : =$80                panLeft set $80
(1)  210/    98A7 : =$C0                panCentre set $C0
(1)  210/    98A7 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  210/    98A7 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  211/    98A9 : (MACRO)             	smpsSetvoice        $04
(1)  211/    98A9 :  (MACRO-2)                  smpsFMvoice $04
(1)  211/    98A9 : EF04                                dc.b    $EF,$04
(1)  212/    98AB : (MACRO)             	smpsReturn
(1)  212/    98AB : F9                                  dc.b    $F9
(1)  213/    98AC :                     
(1)  214/    98AC :                     Moonrise_Call03:
(1)  215/    98AC : B806                	dc.b	nG4, $06
(1)  216/    98AE : (MACRO)             	smpsFMAlterVol      $0A
(1)  216/    98AE : E60A                                dc.b    $E6,$0A
(1)  217/    98B0 : (MACRO)             	smpsPan             panRight, $00
(1)  217/    98B0 : =$0                 panNone set $00
(1)  217/    98B0 : =$40                panRight set $40
(1)  217/    98B0 : =$80                panLeft set $80
(1)  217/    98B0 : =$C0                panCentre set $C0
(1)  217/    98B0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  217/    98B0 : E040                        dc.b $E0,PANRIGHT+$00
(1)  218/    98B2 : B8                  	dc.b	nG4
(1)  219/    98B3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  219/    98B3 : E6F6                                dc.b    $E6,$F6
(1)  220/    98B5 : (MACRO)             	smpsPan             panCenter, $00
(1)  220/    98B5 : =$0                 panNone set $00
(1)  220/    98B5 : =$40                panRight set $40
(1)  220/    98B5 : =$80                panLeft set $80
(1)  220/    98B5 : =$C0                panCentre set $C0
(1)  220/    98B5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  220/    98B5 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  221/    98B7 : B606                	dc.b	nF4, $06
(1)  222/    98B9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  222/    98B9 : E60A                                dc.b    $E6,$0A
(1)  223/    98BB : (MACRO)             	smpsPan             panRight, $00
(1)  223/    98BB : =$0                 panNone set $00
(1)  223/    98BB : =$40                panRight set $40
(1)  223/    98BB : =$80                panLeft set $80
(1)  223/    98BB : =$C0                panCentre set $C0
(1)  223/    98BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  223/    98BB : E040                        dc.b $E0,PANRIGHT+$00
(1)  224/    98BD : B6                  	dc.b	nF4
(1)  225/    98BE : (MACRO)             	smpsFMAlterVol      $F6
(1)  225/    98BE : E6F6                                dc.b    $E6,$F6
(1)  226/    98C0 : (MACRO)             	smpsPan             panCenter, $00
(1)  226/    98C0 : =$0                 panNone set $00
(1)  226/    98C0 : =$40                panRight set $40
(1)  226/    98C0 : =$80                panLeft set $80
(1)  226/    98C0 : =$C0                panCentre set $C0
(1)  226/    98C0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  226/    98C0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  227/    98C2 : B306                	dc.b	nD4, $06
(1)  228/    98C4 : (MACRO)             	smpsFMAlterVol      $0A
(1)  228/    98C4 : E60A                                dc.b    $E6,$0A
(1)  229/    98C6 : (MACRO)             	smpsPan             panRight, $00
(1)  229/    98C6 : =$0                 panNone set $00
(1)  229/    98C6 : =$40                panRight set $40
(1)  229/    98C6 : =$80                panLeft set $80
(1)  229/    98C6 : =$C0                panCentre set $C0
(1)  229/    98C6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  229/    98C6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  230/    98C8 : B3                  	dc.b	nD4
(1)  231/    98C9 : (MACRO)             	smpsFMAlterVol      $F6
(1)  231/    98C9 : E6F6                                dc.b    $E6,$F6
(1)  232/    98CB : (MACRO)             	smpsPan             panCenter, $00
(1)  232/    98CB : =$0                 panNone set $00
(1)  232/    98CB : =$40                panRight set $40
(1)  232/    98CB : =$80                panLeft set $80
(1)  232/    98CB : =$C0                panCentre set $C0
(1)  232/    98CB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  232/    98CB : E0C0                        dc.b $E0,PANCENTER+$00
(1)  233/    98CD : AE06                	dc.b	nA3, $06
(1)  234/    98CF : (MACRO)             	smpsFMAlterVol      $0A
(1)  234/    98CF : E60A                                dc.b    $E6,$0A
(1)  235/    98D1 : (MACRO)             	smpsPan             panRight, $00
(1)  235/    98D1 : =$0                 panNone set $00
(1)  235/    98D1 : =$40                panRight set $40
(1)  235/    98D1 : =$80                panLeft set $80
(1)  235/    98D1 : =$C0                panCentre set $C0
(1)  235/    98D1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  235/    98D1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  236/    98D3 : AE                  	dc.b	nA3
(1)  237/    98D4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  237/    98D4 : E6F6                                dc.b    $E6,$F6
(1)  238/    98D6 : (MACRO)             	smpsPan             panCenter, $00
(1)  238/    98D6 : =$0                 panNone set $00
(1)  238/    98D6 : =$40                panRight set $40
(1)  238/    98D6 : =$80                panLeft set $80
(1)  238/    98D6 : =$C0                panCentre set $C0
(1)  238/    98D6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  238/    98D6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  239/    98D8 : (MACRO)             	smpsReturn
(1)  239/    98D8 : F9                                  dc.b    $F9
(1)  240/    98D9 :                     
(1)  241/    98D9 :                     Moonrise_Call04:
(1)  242/    98D9 : B806 B6             	dc.b	nG4, $06, nF4
(1)  243/    98DC : (MACRO)             	smpsFMAlterVol      $0A
(1)  243/    98DC : E60A                                dc.b    $E6,$0A
(1)  244/    98DE : (MACRO)             	smpsPan             panRight, $00
(1)  244/    98DE : =$0                 panNone set $00
(1)  244/    98DE : =$40                panRight set $40
(1)  244/    98DE : =$80                panLeft set $80
(1)  244/    98DE : =$C0                panCentre set $C0
(1)  244/    98DE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  244/    98DE : E040                        dc.b $E0,PANRIGHT+$00
(1)  245/    98E0 : B6                  	dc.b	nF4
(1)  246/    98E1 : (MACRO)             	smpsFMAlterVol      $F6
(1)  246/    98E1 : E6F6                                dc.b    $E6,$F6
(1)  247/    98E3 : (MACRO)             	smpsPan             panCenter, $00
(1)  247/    98E3 : =$0                 panNone set $00
(1)  247/    98E3 : =$40                panRight set $40
(1)  247/    98E3 : =$80                panLeft set $80
(1)  247/    98E3 : =$C0                panCentre set $C0
(1)  247/    98E3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  247/    98E3 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  248/    98E5 : B306                	dc.b	nD4, $06
(1)  249/    98E7 : (MACRO)             	smpsFMAlterVol      $0A
(1)  249/    98E7 : E60A                                dc.b    $E6,$0A
(1)  250/    98E9 : (MACRO)             	smpsPan             panRight, $00
(1)  250/    98E9 : =$0                 panNone set $00
(1)  250/    98E9 : =$40                panRight set $40
(1)  250/    98E9 : =$80                panLeft set $80
(1)  250/    98E9 : =$C0                panCentre set $C0
(1)  250/    98E9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  250/    98E9 : E040                        dc.b $E0,PANRIGHT+$00
(1)  251/    98EB : B3                  	dc.b	nD4
(1)  252/    98EC : (MACRO)             	smpsFMAlterVol      $F6
(1)  252/    98EC : E6F6                                dc.b    $E6,$F6
(1)  253/    98EE : (MACRO)             	smpsPan             panCenter, $00
(1)  253/    98EE : =$0                 panNone set $00
(1)  253/    98EE : =$40                panRight set $40
(1)  253/    98EE : =$80                panLeft set $80
(1)  253/    98EE : =$C0                panCentre set $C0
(1)  253/    98EE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  253/    98EE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  254/    98F0 : AE06                	dc.b	nA3, $06
(1)  255/    98F2 : (MACRO)             	smpsFMAlterVol      $0A
(1)  255/    98F2 : E60A                                dc.b    $E6,$0A
(1)  256/    98F4 : (MACRO)             	smpsPan             panRight, $00
(1)  256/    98F4 : =$0                 panNone set $00
(1)  256/    98F4 : =$40                panRight set $40
(1)  256/    98F4 : =$80                panLeft set $80
(1)  256/    98F4 : =$C0                panCentre set $C0
(1)  256/    98F4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  256/    98F4 : E040                        dc.b $E0,PANRIGHT+$00
(1)  257/    98F6 : AE                  	dc.b	nA3
(1)  258/    98F7 : (MACRO)             	smpsFMAlterVol      $F6
(1)  258/    98F7 : E6F6                                dc.b    $E6,$F6
(1)  259/    98F9 : (MACRO)             	smpsPan             panCenter, $00
(1)  259/    98F9 : =$0                 panNone set $00
(1)  259/    98F9 : =$40                panRight set $40
(1)  259/    98F9 : =$80                panLeft set $80
(1)  259/    98F9 : =$C0                panCentre set $C0
(1)  259/    98F9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  259/    98F9 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  260/    98FB : AE                  	dc.b	nA3
(1)  261/    98FC : (MACRO)             	smpsReturn
(1)  261/    98FC : F9                                  dc.b    $F9
(1)  262/    98FD :                     
(1)  263/    98FD :                     Moonrise_Call05:
(1)  264/    98FD : B806 B6             	dc.b	nG4, $06, nF4
(1)  265/    9900 : (MACRO)             	smpsFMAlterVol      $0A
(1)  265/    9900 : E60A                                dc.b    $E6,$0A
(1)  266/    9902 : (MACRO)             	smpsPan             panRight, $00
(1)  266/    9902 : =$0                 panNone set $00
(1)  266/    9902 : =$40                panRight set $40
(1)  266/    9902 : =$80                panLeft set $80
(1)  266/    9902 : =$C0                panCentre set $C0
(1)  266/    9902 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  266/    9902 : E040                        dc.b $E0,PANRIGHT+$00
(1)  267/    9904 : B6                  	dc.b	nF4
(1)  268/    9905 : (MACRO)             	smpsFMAlterVol      $F6
(1)  268/    9905 : E6F6                                dc.b    $E6,$F6
(1)  269/    9907 : (MACRO)             	smpsPan             panCenter, $00
(1)  269/    9907 : =$0                 panNone set $00
(1)  269/    9907 : =$40                panRight set $40
(1)  269/    9907 : =$80                panLeft set $80
(1)  269/    9907 : =$C0                panCentre set $C0
(1)  269/    9907 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  269/    9907 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  270/    9909 : B306                	dc.b	nD4, $06
(1)  271/    990B : (MACRO)             	smpsFMAlterVol      $0A
(1)  271/    990B : E60A                                dc.b    $E6,$0A
(1)  272/    990D : (MACRO)             	smpsPan             panRight, $00
(1)  272/    990D : =$0                 panNone set $00
(1)  272/    990D : =$40                panRight set $40
(1)  272/    990D : =$80                panLeft set $80
(1)  272/    990D : =$C0                panCentre set $C0
(1)  272/    990D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  272/    990D : E040                        dc.b $E0,PANRIGHT+$00
(1)  273/    990F : B3                  	dc.b	nD4
(1)  274/    9910 : (MACRO)             	smpsFMAlterVol      $F6
(1)  274/    9910 : E6F6                                dc.b    $E6,$F6
(1)  275/    9912 : (MACRO)             	smpsPan             panCenter, $00
(1)  275/    9912 : =$0                 panNone set $00
(1)  275/    9912 : =$40                panRight set $40
(1)  275/    9912 : =$80                panLeft set $80
(1)  275/    9912 : =$C0                panCentre set $C0
(1)  275/    9912 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  275/    9912 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  276/    9914 : AC06                	dc.b	nG3, $06
(1)  277/    9916 : (MACRO)             	smpsFMAlterVol      $0A
(1)  277/    9916 : E60A                                dc.b    $E6,$0A
(1)  278/    9918 : (MACRO)             	smpsPan             panRight, $00
(1)  278/    9918 : =$0                 panNone set $00
(1)  278/    9918 : =$40                panRight set $40
(1)  278/    9918 : =$80                panLeft set $80
(1)  278/    9918 : =$C0                panCentre set $C0
(1)  278/    9918 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  278/    9918 : E040                        dc.b $E0,PANRIGHT+$00
(1)  279/    991A : AC                  	dc.b	nG3
(1)  280/    991B : (MACRO)             	smpsFMAlterVol      $F6
(1)  280/    991B : E6F6                                dc.b    $E6,$F6
(1)  281/    991D : (MACRO)             	smpsPan             panCenter, $00
(1)  281/    991D : =$0                 panNone set $00
(1)  281/    991D : =$40                panRight set $40
(1)  281/    991D : =$80                panLeft set $80
(1)  281/    991D : =$C0                panCentre set $C0
(1)  281/    991D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  281/    991D : E0C0                        dc.b $E0,PANCENTER+$00
(1)  282/    991F : AC                  	dc.b	nG3
(1)  283/    9920 : (MACRO)             	smpsReturn
(1)  283/    9920 : F9                                  dc.b    $F9
(1)  284/    9921 :                     
(1)  285/    9921 :                     ; PSG1 Data
(1)  286/    9921 :                     Moonrise_PSG1:
(1)  287/    9921 : (MACRO)             	smpsPSGvoice        sTone_03
(1)  287/    9921 : F503                        dc.b    $F5,STONE_03
(1)  288/    9923 : 8060 8080 8030 B806 	dc.b	nRst, $60, nRst, nRst, nRst, $30, nG4, $06, nFs4, nF4, nD4, nC4
             992B : B7B6 B3B1         
(1)  289/    992F : AEAC A7             	dc.b	nA3, nG3, nD3
(1)  290/    9932 :                     
(1)  291/    9932 :                     Moonrise_Jump03:
(1)  292/    9932 : (MACRO)             	smpsCall            Moonrise_Call0B
(1)  292/    9932 : F8                          dc.b    $F8
(1)  292/    9933 : 3899                                dc.w    z80_ptr(MOONRISE_CALL0B)
(1)  293/    9935 : (MACRO)             	smpsJump            Moonrise_Jump03
(1)  293/    9935 : F6                          dc.b    $F6
(1)  293/    9936 : 3299                                dc.w    z80_ptr(MOONRISE_JUMP03)
(1)  294/    9938 :                     
(1)  295/    9938 :                     Moonrise_Call0B:
(1)  296/    9938 : AA0C 80AC 80B0 12AC 	dc.b	nF3, $0C, nRst, nG3, nRst, nB3, $12, nG3, $06, nRst, $0C, nC4
             9940 : 0680 0CB1         
(1)  297/    9944 : E706 80B0 80B1 B380 	dc.b	smpsNoAttack, $06, nRst, nB3, nRst, nC4, nD4, nRst, nC4, $0C, nRst, $06
             994C : B10C 8006         
(1)  298/    9950 : B012 8006 AC0C AA0C 	dc.b	nB3, $12, nRst, $06, nG3, $0C, nF3, $0C, nRst, nG3, nRst, nB3
             9958 : 80AC 80B0         
(1)  299/    995C : 12AC 0680 0CB6 E706 	dc.b	$12, nG3, $06, nRst, $0C, nF4, smpsNoAttack, $06, nRst, nG4, nRst, nF4
             9964 : 80B8 80B6         
(1)  300/    9968 : B580 B336 800C B118 	dc.b	nE4, nRst, nD4, $36, nRst, $0C, nC4, $18, nA3, $06, nRst, nD4
             9970 : AE06 80B3         
(1)  301/    9974 : 12AE 0680 1880 0CB1 	dc.b	$12, nA3, $06, nRst, $18, nRst, $0C, nC4, $18, nA3, $06, nRst
             997C : 18AE 0680         
(1)  302/    9980 : B112 B306 800C B606 	dc.b	nC4, $12, nD4, $06, nRst, $0C, nF4, $06, nFs4, nG4, $60, smpsNoAttack
             9988 : B7B8 60E7         
(1)  303/    998C : 2480 0CB8 06B7 B6B3 	dc.b	$24, nRst, $0C, nG4, $06, nFs4, nF4, nD4, nC4, nA3, nG3, nD3
             9994 : B1AE ACA7         
(1)  304/    9998 : (MACRO)             	smpsReturn
(1)  304/    9998 : F9                                  dc.b    $F9
(1)  305/    9999 :                     
(1)  306/    9999 :                     ; PSG2 Data
(1)  307/    9999 :                     Moonrise_PSG2:
(1)  308/    9999 : (MACRO)             	smpsAlterNote       $01
(1)  308/    9999 :  (MACRO-2)                  smpsDetune      $01
(1)  308/    9999 : E101                        dc.b    $E1,$01
(1)  309/    999B : (MACRO)             	smpsSetvoice        sTone_03
(1)  309/    999B :  (MACRO-2)                  smpsFMvoice sTone_03
(1)  309/    999B : EF03                                dc.b    $EF,STONE_03
(1)  310/    999D : 8006 8060 8080 8030 	dc.b	nRst, $06, nRst, $60, nRst, nRst, nRst, $30, nG4, $06, nFs4, nF4
             99A5 : B806 B7B6         
(1)  311/    99A9 : B3B1 AEAC A7        	dc.b	nD4, nC4, nA3, nG3, nD3
(1)  312/    99AE :                     
(1)  313/    99AE :                     Moonrise_Jump02:
(1)  314/    99AE : (MACRO)             	smpsCall            Moonrise_Call0B
(1)  314/    99AE : F8                          dc.b    $F8
(1)  314/    99AF : 3899                                dc.w    z80_ptr(MOONRISE_CALL0B)
(1)  315/    99B1 : (MACRO)             	smpsJump            Moonrise_Jump02
(1)  315/    99B1 : F6                          dc.b    $F6
(1)  315/    99B2 : AE99                                dc.w    z80_ptr(MOONRISE_JUMP02)
(1)  316/    99B4 :                     
(1)  317/    99B4 :                     ; PSG3 Data
(1)  318/    99B4 :                     Moonrise_PSG3:
(1)  319/    99B4 : (MACRO)             	smpsPSGform         $E7
(1)  319/    99B4 : F3E7                        dc.b    $F3,$E7
(1)  320/    99B6 :                     
(1)  321/    99B6 :                     Moonrise_Loop07:
(1)  322/    99B6 : (MACRO)             	smpsCall            Moonrise_Call0A
(1)  322/    99B6 : F8                          dc.b    $F8
(1)  322/    99B7 : C999                                dc.w    z80_ptr(MOONRISE_CALL0A)
(1)  323/    99B9 : (MACRO)             	smpsLoop            $01, $04, Moonrise_Loop07
(1)  323/    99B9 : F7                          dc.b    $F7
(1)  323/    99BA : 0104                        dc.b    $01,$04
(1)  323/    99BC : B699                                dc.w    z80_ptr(MOONRISE_LOOP07)
(1)  324/    99BE :                     
(1)  325/    99BE :                     Moonrise_Loop08:
(1)  326/    99BE : (MACRO)             	smpsCall            Moonrise_Call0A
(1)  326/    99BE : F8                          dc.b    $F8
(1)  326/    99BF : C999                                dc.w    z80_ptr(MOONRISE_CALL0A)
(1)  327/    99C1 : (MACRO)             	smpsLoop            $01, $08, Moonrise_Loop08
(1)  327/    99C1 : F7                          dc.b    $F7
(1)  327/    99C2 : 0108                        dc.b    $01,$08
(1)  327/    99C4 : BE99                                dc.w    z80_ptr(MOONRISE_LOOP08)
(1)  328/    99C6 : (MACRO)             	smpsJump            Moonrise_Loop08
(1)  328/    99C6 : F6                          dc.b    $F6
(1)  328/    99C7 : BE99                                dc.w    z80_ptr(MOONRISE_LOOP08)
(1)  329/    99C9 :                     
(1)  330/    99C9 :                     Moonrise_Call0A:
(1)  331/    99C9 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  331/    99C9 : F502                        dc.b    $F5,STONE_02
(1)  332/    99CB : B106                	dc.b	(nMaxPSG2-$23)&$FF, $06
(1)  333/    99CD : (MACRO)             	smpsLoop            $00, $0A, Moonrise_Call0A
(1)  333/    99CD : F7                          dc.b    $F7
(1)  333/    99CE : 000A                        dc.b    $00,$0A
(1)  333/    99D0 : C999                                dc.w    z80_ptr(MOONRISE_CALL0A)
(1)  334/    99D2 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  334/    99D2 : F505                        dc.b    $F5,STONE_05
(1)  335/    99D4 : 0C                  	dc.b	$0C
(1)  336/    99D5 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  336/    99D5 : F502                        dc.b    $F5,STONE_02
(1)  337/    99D7 : 0606                	dc.b	$06, $06
(1)  338/    99D9 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  338/    99D9 : F505                        dc.b    $F5,STONE_05
(1)  339/    99DB : 0C                  	dc.b	$0C
(1)  340/    99DC : (MACRO)             	smpsReturn
(1)  340/    99DC : F9                                  dc.b    $F9
(1)  341/    99DD :                     
(1)  342/    99DD :                     ; DAC Data
(1)  343/    99DD :                     Moonrise_DAC:
(1)  344/    99DD : 8130 8181 8106 8182 	dc.b	dSnareS3, $30, dSnareS3, dSnareS3, dSnareS3, $06, dSnareS3, dHighTom, dSnareS3, dMidTomS3, dMidTomS3, dLowTomS3
             99E5 : 8183 8384         
(1)  345/    99E9 : 8581 3081 8181 0682 	dc.b	dFloorTomS3, dSnareS3, $30, dSnareS3, dSnareS3, dSnareS3, $06, dHighTom, $04, dHighTom, dHighTom, dHighTom
             99F1 : 0482 8282         
(1)  346/    99F5 : 0682 8282 82        	dc.b	$06, dHighTom, dHighTom, dHighTom, dHighTom
(1)  347/    99FA :                     
(1)  348/    99FA :                     Moonrise_Jump00:
(1)  349/    99FA : (MACRO)             	smpsCall            Moonrise_Call00
(1)  349/    99FA : F8                          dc.b    $F8
(1)  349/    99FB : 2C9A                                dc.w    z80_ptr(MOONRISE_CALL00)
(1)  350/    99FD : (MACRO)             	smpsCall            Moonrise_Call01
(1)  350/    99FD : F8                          dc.b    $F8
(1)  350/    99FE : 379A                                dc.w    z80_ptr(MOONRISE_CALL01)
(1)  351/    9A00 : (MACRO)             	smpsCall            Moonrise_Call00
(1)  351/    9A00 : F8                          dc.b    $F8
(1)  351/    9A01 : 2C9A                                dc.w    z80_ptr(MOONRISE_CALL00)
(1)  352/    9A03 : 8112 0682 1881 060C 	dc.b	dSnareS3, $12, $06, dHighTom, $18, dSnareS3, $06, $0C, $06, dHighTom, $12, $06
             9A0B : 0682 1206         
(1)  353/    9A0F : (MACRO)             	smpsCall            Moonrise_Call00
(1)  353/    9A0F : F8                          dc.b    $F8
(1)  353/    9A10 : 2C9A                                dc.w    z80_ptr(MOONRISE_CALL00)
(1)  354/    9A12 : (MACRO)             	smpsCall            Moonrise_Call01
(1)  354/    9A12 : F8                          dc.b    $F8
(1)  354/    9A13 : 379A                                dc.w    z80_ptr(MOONRISE_CALL01)
(1)  355/    9A15 : (MACRO)             	smpsCall            Moonrise_Call00
(1)  355/    9A15 : F8                          dc.b    $F8
(1)  355/    9A16 : 2C9A                                dc.w    z80_ptr(MOONRISE_CALL00)
(1)  356/    9A18 : 8112 0682 1881 0681 	dc.b	dSnareS3, $12, $06, dHighTom, $18, dSnareS3, $06, dSnareS3, dHighTom, $04, dHighTom, dHighTom
             9A20 : 8204 8282         
(1)  357/    9A24 : 8206 8282 82        	dc.b	dHighTom, $06, dHighTom, dHighTom, dHighTom
(1)  358/    9A29 : (MACRO)             	smpsJump            Moonrise_Jump00
(1)  358/    9A29 : F6                          dc.b    $F6
(1)  358/    9A2A : FA99                                dc.w    z80_ptr(MOONRISE_JUMP00)
(1)  359/    9A2C :                     
(1)  360/    9A2C :                     Moonrise_Call00:
(1)  361/    9A2C : 8112 0682 18        	dc.b	dSnareS3, $12, $06, dHighTom, $18
(1)  362/    9A31 : (MACRO)             	smpsLoop            $00, $02, Moonrise_Call00
(1)  362/    9A31 : F7                          dc.b    $F7
(1)  362/    9A32 : 0002                        dc.b    $00,$02
(1)  362/    9A34 : 2C9A                                dc.w    z80_ptr(MOONRISE_CALL00)
(1)  363/    9A36 : (MACRO)             	smpsReturn
(1)  363/    9A36 : F9                                  dc.b    $F9
(1)  364/    9A37 :                     
(1)  365/    9A37 :                     Moonrise_Call01:
(1)  366/    9A37 : 8112 0682 1881 060C 	dc.b	dSnareS3, $12, $06, dHighTom, $18, dSnareS3, $06, $0C, $06, dHighTom, $18
             9A3F : 0682 18            
(1)  367/    9A42 : (MACRO)             	smpsReturn
(1)  367/    9A42 : F9                                  dc.b    $F9
(1)  368/    9A43 :                     
(1)  369/    9A43 :                     Moonrise_Voices:
(1)  370/    9A43 :                     ;	Voice $00
(1)  371/    9A43 :                     ;	$3C
(1)  372/    9A43 :                     ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $0D, $12, $05
(1)  373/    9A43 :                     ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $80, $07, $80
(1)  374/    9A43 : (MACRO)             	smpsVcAlgorithm     $04
(1)  374/    9A43 : =$4                 vcAlgorithm set $04
(1)  375/    9A43 : (MACRO)             	smpsVcFeedback      $07
(1)  375/    9A43 : =$7                 vcFeedback set $07
(1)  376/    9A43 : (MACRO)             	smpsVcUnusedBits    $00
(1)  376/    9A43 : =$0                 vcUnusedBits set $00
(1)  376/    9A43 : =$0                 vcD1R1Unk set 0
(1)  376/    9A43 : =$0                 vcD1R2Unk set 0
(1)  376/    9A43 : =$0                 vcD1R3Unk set 0
(1)  376/    9A43 : =$0                 vcD1R4Unk set 0
(1)  377/    9A43 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  377/    9A43 : =$0                 vcDT1 set $00
(1)  377/    9A43 : =$0                 vcDT2 set $00
(1)  377/    9A43 : =$0                 vcDT3 set $00
(1)  377/    9A43 : =$0                 vcDT4 set $00
(1)  378/    9A43 : (MACRO)             	smpsVcCoarseFreq    $00, $00, $00, $01
(1)  378/    9A43 : =$0                 vcCF1 set $00
(1)  378/    9A43 : =$0                 vcCF2 set $00
(1)  378/    9A43 : =$0                 vcCF3 set $00
(1)  378/    9A43 : =$1                 vcCF4 set $01
(1)  379/    9A43 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  379/    9A43 : =$0                 vcRS1 set $00
(1)  379/    9A43 : =$0                 vcRS2 set $00
(1)  379/    9A43 : =$0                 vcRS3 set $00
(1)  379/    9A43 : =$0                 vcRS4 set $00
(1)  380/    9A43 : (MACRO)             	smpsVcAttackRate    $1F, $15, $1F, $1F
(1)  380/    9A43 : =$1F                vcAR1 set $1F
(1)  380/    9A43 : =$15                vcAR2 set $15
(1)  380/    9A43 : =$1F                vcAR3 set $1F
(1)  380/    9A43 : =$1F                vcAR4 set $1F
(1)  381/    9A43 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  381/    9A43 : =$0                 vcAM1 set $00<<5
(1)  381/    9A43 : =$0                 vcAM2 set $00<<5
(1)  381/    9A43 : =$0                 vcAM3 set $00<<5
(1)  381/    9A43 : =$0                 vcAM4 set $00<<5
(1)  382/    9A43 : (MACRO)             	smpsVcDecayRate1    $05, $12, $0D, $11
(1)  382/    9A43 : =$5                 vcD1R1 set $05
(1)  382/    9A43 : =$12                vcD1R2 set $12
(1)  382/    9A43 : =$D                 vcD1R3 set $0D
(1)  382/    9A43 : =$11                vcD1R4 set $11
(1)  383/    9A43 : (MACRO)             	smpsVcDecayRate2    $02, $09, $04, $07
(1)  383/    9A43 : =$2                 vcD2R1 set $02
(1)  383/    9A43 : =$9                 vcD2R2 set $09
(1)  383/    9A43 : =$4                 vcD2R3 set $04
(1)  383/    9A43 : =$7                 vcD2R4 set $07
(1)  384/    9A43 : (MACRO)             	smpsVcDecayLevel    $01, $02, $03, $05
(1)  384/    9A43 : =$1                 vcDL1 set $01
(1)  384/    9A43 : =$2                 vcDL2 set $02
(1)  384/    9A43 : =$3                 vcDL3 set $03
(1)  384/    9A43 : =$5                 vcDL4 set $05
(1)  385/    9A43 : (MACRO)             	smpsVcReleaseRate   $0A, $05, $0A, $05
(1)  385/    9A43 : =$A                 vcRR1 set $0A
(1)  385/    9A43 : =$5                 vcRR2 set $05
(1)  385/    9A43 : =$A                 vcRR3 set $0A
(1)  385/    9A43 : =$5                 vcRR4 set $05
(1)  386/    9A43 : (MACRO)             	smpsVcTotalLevel    $00, $07, $00, $1A
(1)  386/    9A43 : =$0                 vcTL1 set $00
(1)  386/    9A43 : =$7                 vcTL2 set $07
(1)  386/    9A43 : =$0                 vcTL3 set $00
(1)  386/    9A43 : =$1A                vcTL4 set $1A
(1)  386/    9A43 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  386/    9A44 :                     ;   0     1     2     3     4     5     6     7
(1)  386/    9A44 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  386/    9A44 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  386/    9A44 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  386/    9A44 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  386/    9A44 : =$80                vcTLMask1 set $80
(1)  386/    9A44 :                     
(1)  386/    9A44 :                     
(1)  386/    9A44 : 0100 0000                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  386/    9A48 : 1F1F 151F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  386/    9A4C : 110D 1205                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  386/    9A50 : 0704 0902                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  386/    9A54 : 553A 251A                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  386/    9A58 : 1A80 0780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  387/    9A5C :                     
(1)  388/    9A5C :                     ;	Voice $01
(1)  389/    9A5C :                     ;	$84
(1)  390/    9A5C :                     ;	$3F, $01, $01, $01, 	$1F, $1F, $5F, $5F, 	$0E, $12, $0F, $12
(1)  391/    9A5C :                     ;	$0F, $06, $05, $06, 	$2F, $1F, $1F, $1F, 	$3F, $80, $12, $80
(1)  392/    9A5C : (MACRO)             	smpsVcAlgorithm     $04
(1)  392/    9A5C : =$4                 vcAlgorithm set $04
(1)  393/    9A5C : (MACRO)             	smpsVcFeedback      $00
(1)  393/    9A5C : =$0                 vcFeedback set $00
(1)  394/    9A5C : (MACRO)             	smpsVcUnusedBits    $02
(1)  394/    9A5C : =$2                 vcUnusedBits set $02
(1)  394/    9A5C : =$0                 vcD1R1Unk set 0
(1)  394/    9A5C : =$0                 vcD1R2Unk set 0
(1)  394/    9A5C : =$0                 vcD1R3Unk set 0
(1)  394/    9A5C : =$0                 vcD1R4Unk set 0
(1)  395/    9A5C : (MACRO)             	smpsVcDetune        $00, $00, $00, $03
(1)  395/    9A5C : =$0                 vcDT1 set $00
(1)  395/    9A5C : =$0                 vcDT2 set $00
(1)  395/    9A5C : =$0                 vcDT3 set $00
(1)  395/    9A5C : =$3                 vcDT4 set $03
(1)  396/    9A5C : (MACRO)             	smpsVcCoarseFreq    $01, $01, $01, $0F
(1)  396/    9A5C : =$1                 vcCF1 set $01
(1)  396/    9A5C : =$1                 vcCF2 set $01
(1)  396/    9A5C : =$1                 vcCF3 set $01
(1)  396/    9A5C : =$F                 vcCF4 set $0F
(1)  397/    9A5C : (MACRO)             	smpsVcRateScale     $01, $01, $00, $00
(1)  397/    9A5C : =$1                 vcRS1 set $01
(1)  397/    9A5C : =$1                 vcRS2 set $01
(1)  397/    9A5C : =$0                 vcRS3 set $00
(1)  397/    9A5C : =$0                 vcRS4 set $00
(1)  398/    9A5C : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  398/    9A5C : =$1F                vcAR1 set $1F
(1)  398/    9A5C : =$1F                vcAR2 set $1F
(1)  398/    9A5C : =$1F                vcAR3 set $1F
(1)  398/    9A5C : =$1F                vcAR4 set $1F
(1)  399/    9A5C : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  399/    9A5C : =$0                 vcAM1 set $00<<5
(1)  399/    9A5C : =$0                 vcAM2 set $00<<5
(1)  399/    9A5C : =$0                 vcAM3 set $00<<5
(1)  399/    9A5C : =$0                 vcAM4 set $00<<5
(1)  400/    9A5C : (MACRO)             	smpsVcDecayRate1    $12, $0F, $12, $0E
(1)  400/    9A5C : =$12                vcD1R1 set $12
(1)  400/    9A5C : =$F                 vcD1R2 set $0F
(1)  400/    9A5C : =$12                vcD1R3 set $12
(1)  400/    9A5C : =$E                 vcD1R4 set $0E
(1)  401/    9A5C : (MACRO)             	smpsVcDecayRate2    $06, $05, $06, $0F
(1)  401/    9A5C : =$6                 vcD2R1 set $06
(1)  401/    9A5C : =$5                 vcD2R2 set $05
(1)  401/    9A5C : =$6                 vcD2R3 set $06
(1)  401/    9A5C : =$F                 vcD2R4 set $0F
(1)  402/    9A5C : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $02
(1)  402/    9A5C : =$1                 vcDL1 set $01
(1)  402/    9A5C : =$1                 vcDL2 set $01
(1)  402/    9A5C : =$1                 vcDL3 set $01
(1)  402/    9A5C : =$2                 vcDL4 set $02
(1)  403/    9A5C : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  403/    9A5C : =$F                 vcRR1 set $0F
(1)  403/    9A5C : =$F                 vcRR2 set $0F
(1)  403/    9A5C : =$F                 vcRR3 set $0F
(1)  403/    9A5C : =$F                 vcRR4 set $0F
(1)  404/    9A5C : (MACRO)             	smpsVcTotalLevel    $00, $12, $00, $3F
(1)  404/    9A5C : =$0                 vcTL1 set $00
(1)  404/    9A5C : =$12                vcTL2 set $12
(1)  404/    9A5C : =$0                 vcTL3 set $00
(1)  404/    9A5C : =$3F                vcTL4 set $3F
(1)  404/    9A5C : 84                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  404/    9A5D :                     ;   0     1     2     3     4     5     6     7
(1)  404/    9A5D :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  404/    9A5D : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  404/    9A5D : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  404/    9A5D : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  404/    9A5D : =$80                vcTLMask1 set $80
(1)  404/    9A5D :                     
(1)  404/    9A5D :                     
(1)  404/    9A5D : 3F01 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  404/    9A61 : 1F1F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  404/    9A65 : 0E12 0F12                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  404/    9A69 : 0F06 0506                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  404/    9A6D : 2F1F 1F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  404/    9A71 : 3F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  405/    9A75 :                     
(1)  406/    9A75 :                     ;	Voice $02
(1)  407/    9A75 :                     ;	$2C
(1)  408/    9A75 :                     ;	$22, $04, $02, $14, 	$51, $52, $50, $52, 	$0D, $00, $06, $04
(1)  409/    9A75 :                     ;	$03, $05, $02, $00, 	$16, $18, $26, $18, 	$0F, $80, $12, $80
(1)  410/    9A75 : (MACRO)             	smpsVcAlgorithm     $04
(1)  410/    9A75 : =$4                 vcAlgorithm set $04
(1)  411/    9A75 : (MACRO)             	smpsVcFeedback      $05
(1)  411/    9A75 : =$5                 vcFeedback set $05
(1)  412/    9A75 : (MACRO)             	smpsVcUnusedBits    $00
(1)  412/    9A75 : =$0                 vcUnusedBits set $00
(1)  412/    9A75 : =$0                 vcD1R1Unk set 0
(1)  412/    9A75 : =$0                 vcD1R2Unk set 0
(1)  412/    9A75 : =$0                 vcD1R3Unk set 0
(1)  412/    9A75 : =$0                 vcD1R4Unk set 0
(1)  413/    9A75 : (MACRO)             	smpsVcDetune        $01, $00, $00, $02
(1)  413/    9A75 : =$1                 vcDT1 set $01
(1)  413/    9A75 : =$0                 vcDT2 set $00
(1)  413/    9A75 : =$0                 vcDT3 set $00
(1)  413/    9A75 : =$2                 vcDT4 set $02
(1)  414/    9A75 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $04, $02
(1)  414/    9A75 : =$4                 vcCF1 set $04
(1)  414/    9A75 : =$2                 vcCF2 set $02
(1)  414/    9A75 : =$4                 vcCF3 set $04
(1)  414/    9A75 : =$2                 vcCF4 set $02
(1)  415/    9A75 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  415/    9A75 : =$1                 vcRS1 set $01
(1)  415/    9A75 : =$1                 vcRS2 set $01
(1)  415/    9A75 : =$1                 vcRS3 set $01
(1)  415/    9A75 : =$1                 vcRS4 set $01
(1)  416/    9A75 : (MACRO)             	smpsVcAttackRate    $12, $10, $12, $11
(1)  416/    9A75 : =$12                vcAR1 set $12
(1)  416/    9A75 : =$10                vcAR2 set $10
(1)  416/    9A75 : =$12                vcAR3 set $12
(1)  416/    9A75 : =$11                vcAR4 set $11
(1)  417/    9A75 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  417/    9A75 : =$0                 vcAM1 set $00<<5
(1)  417/    9A75 : =$0                 vcAM2 set $00<<5
(1)  417/    9A75 : =$0                 vcAM3 set $00<<5
(1)  417/    9A75 : =$0                 vcAM4 set $00<<5
(1)  418/    9A75 : (MACRO)             	smpsVcDecayRate1    $04, $06, $00, $0D
(1)  418/    9A75 : =$4                 vcD1R1 set $04
(1)  418/    9A75 : =$6                 vcD1R2 set $06
(1)  418/    9A75 : =$0                 vcD1R3 set $00
(1)  418/    9A75 : =$D                 vcD1R4 set $0D
(1)  419/    9A75 : (MACRO)             	smpsVcDecayRate2    $00, $02, $05, $03
(1)  419/    9A75 : =$0                 vcD2R1 set $00
(1)  419/    9A75 : =$2                 vcD2R2 set $02
(1)  419/    9A75 : =$5                 vcD2R3 set $05
(1)  419/    9A75 : =$3                 vcD2R4 set $03
(1)  420/    9A75 : (MACRO)             	smpsVcDecayLevel    $01, $02, $01, $01
(1)  420/    9A75 : =$1                 vcDL1 set $01
(1)  420/    9A75 : =$2                 vcDL2 set $02
(1)  420/    9A75 : =$1                 vcDL3 set $01
(1)  420/    9A75 : =$1                 vcDL4 set $01
(1)  421/    9A75 : (MACRO)             	smpsVcReleaseRate   $08, $06, $08, $06
(1)  421/    9A75 : =$8                 vcRR1 set $08
(1)  421/    9A75 : =$6                 vcRR2 set $06
(1)  421/    9A75 : =$8                 vcRR3 set $08
(1)  421/    9A75 : =$6                 vcRR4 set $06
(1)  422/    9A75 : (MACRO)             	smpsVcTotalLevel    $00, $12, $00, $0F
(1)  422/    9A75 : =$0                 vcTL1 set $00
(1)  422/    9A75 : =$12                vcTL2 set $12
(1)  422/    9A75 : =$0                 vcTL3 set $00
(1)  422/    9A75 : =$F                 vcTL4 set $0F
(1)  422/    9A75 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  422/    9A76 :                     ;   0     1     2     3     4     5     6     7
(1)  422/    9A76 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  422/    9A76 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  422/    9A76 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  422/    9A76 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  422/    9A76 : =$80                vcTLMask1 set $80
(1)  422/    9A76 :                     
(1)  422/    9A76 :                     
(1)  422/    9A76 : 2204 0214                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  422/    9A7A : 5152 5052                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  422/    9A7E : 0D00 0604                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  422/    9A82 : 0305 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  422/    9A86 : 1618 2618                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  422/    9A8A : 0F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  423/    9A8E :                     
(1)  424/    9A8E :                     ;	Voice $03
(1)  425/    9A8E :                     ;	$2D
(1)  426/    9A8E :                     ;	$77, $65, $05, $15, 	$1F, $5F, $5F, $5F, 	$00, $03, $03, $05
(1)  427/    9A8E :                     ;	$00, $01, $02, $01, 	$0F, $1C, $1C, $1C, 	$22, $83, $80, $80
(1)  428/    9A8E : (MACRO)             	smpsVcAlgorithm     $05
(1)  428/    9A8E : =$5                 vcAlgorithm set $05
(1)  429/    9A8E : (MACRO)             	smpsVcFeedback      $05
(1)  429/    9A8E : =$5                 vcFeedback set $05
(1)  430/    9A8E : (MACRO)             	smpsVcUnusedBits    $00
(1)  430/    9A8E : =$0                 vcUnusedBits set $00
(1)  430/    9A8E : =$0                 vcD1R1Unk set 0
(1)  430/    9A8E : =$0                 vcD1R2Unk set 0
(1)  430/    9A8E : =$0                 vcD1R3Unk set 0
(1)  430/    9A8E : =$0                 vcD1R4Unk set 0
(1)  431/    9A8E : (MACRO)             	smpsVcDetune        $01, $00, $06, $07
(1)  431/    9A8E : =$1                 vcDT1 set $01
(1)  431/    9A8E : =$0                 vcDT2 set $00
(1)  431/    9A8E : =$6                 vcDT3 set $06
(1)  431/    9A8E : =$7                 vcDT4 set $07
(1)  432/    9A8E : (MACRO)             	smpsVcCoarseFreq    $05, $05, $05, $07
(1)  432/    9A8E : =$5                 vcCF1 set $05
(1)  432/    9A8E : =$5                 vcCF2 set $05
(1)  432/    9A8E : =$5                 vcCF3 set $05
(1)  432/    9A8E : =$7                 vcCF4 set $07
(1)  433/    9A8E : (MACRO)             	smpsVcRateScale     $01, $01, $01, $00
(1)  433/    9A8E : =$1                 vcRS1 set $01
(1)  433/    9A8E : =$1                 vcRS2 set $01
(1)  433/    9A8E : =$1                 vcRS3 set $01
(1)  433/    9A8E : =$0                 vcRS4 set $00
(1)  434/    9A8E : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  434/    9A8E : =$1F                vcAR1 set $1F
(1)  434/    9A8E : =$1F                vcAR2 set $1F
(1)  434/    9A8E : =$1F                vcAR3 set $1F
(1)  434/    9A8E : =$1F                vcAR4 set $1F
(1)  435/    9A8E : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  435/    9A8E : =$0                 vcAM1 set $00<<5
(1)  435/    9A8E : =$0                 vcAM2 set $00<<5
(1)  435/    9A8E : =$0                 vcAM3 set $00<<5
(1)  435/    9A8E : =$0                 vcAM4 set $00<<5
(1)  436/    9A8E : (MACRO)             	smpsVcDecayRate1    $05, $03, $03, $00
(1)  436/    9A8E : =$5                 vcD1R1 set $05
(1)  436/    9A8E : =$3                 vcD1R2 set $03
(1)  436/    9A8E : =$3                 vcD1R3 set $03
(1)  436/    9A8E : =$0                 vcD1R4 set $00
(1)  437/    9A8E : (MACRO)             	smpsVcDecayRate2    $01, $02, $01, $00
(1)  437/    9A8E : =$1                 vcD2R1 set $01
(1)  437/    9A8E : =$2                 vcD2R2 set $02
(1)  437/    9A8E : =$1                 vcD2R3 set $01
(1)  437/    9A8E : =$0                 vcD2R4 set $00
(1)  438/    9A8E : (MACRO)             	smpsVcDecayLevel    $01, $01, $01, $00
(1)  438/    9A8E : =$1                 vcDL1 set $01
(1)  438/    9A8E : =$1                 vcDL2 set $01
(1)  438/    9A8E : =$1                 vcDL3 set $01
(1)  438/    9A8E : =$0                 vcDL4 set $00
(1)  439/    9A8E : (MACRO)             	smpsVcReleaseRate   $0C, $0C, $0C, $0F
(1)  439/    9A8E : =$C                 vcRR1 set $0C
(1)  439/    9A8E : =$C                 vcRR2 set $0C
(1)  439/    9A8E : =$C                 vcRR3 set $0C
(1)  439/    9A8E : =$F                 vcRR4 set $0F
(1)  440/    9A8E : (MACRO)             	smpsVcTotalLevel    $00, $00, $03, $22
(1)  440/    9A8E : =$0                 vcTL1 set $00
(1)  440/    9A8E : =$0                 vcTL2 set $00
(1)  440/    9A8E : =$3                 vcTL3 set $03
(1)  440/    9A8E : =$22                vcTL4 set $22
(1)  440/    9A8E : 2D                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  440/    9A8F :                     ;   0     1     2     3     4     5     6     7
(1)  440/    9A8F :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  440/    9A8F : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  440/    9A8F : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  440/    9A8F : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  440/    9A8F : =$80                vcTLMask1 set $80
(1)  440/    9A8F :                     
(1)  440/    9A8F :                     
(1)  440/    9A8F : 7765 0515                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  440/    9A93 : 1F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  440/    9A97 : 0003 0305                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  440/    9A9B : 0001 0201                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  440/    9A9F : 0F1C 1C1C                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  440/    9AA3 : 2283 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  441/    9AA7 :                     
(1)  442/    9AA7 :                     ;	Voice $04
(1)  443/    9AA7 :                     ;	$76
(1)  444/    9AA7 :                     ;	$7A, $32, $51, $11, 	$1F, $7F, $9F, $9D, 	$0A, $0E, $0B, $0A
(1)  445/    9AA7 :                     ;	$01, $02, $05, $02, 	$AF, $8F, $9F, $8F, 	$14, $80, $80, $80
(1)  446/    9AA7 : (MACRO)             	smpsVcAlgorithm     $06
(1)  446/    9AA7 : =$6                 vcAlgorithm set $06
(1)  447/    9AA7 : (MACRO)             	smpsVcFeedback      $06
(1)  447/    9AA7 : =$6                 vcFeedback set $06
(1)  448/    9AA7 : (MACRO)             	smpsVcUnusedBits    $01
(1)  448/    9AA7 : =$1                 vcUnusedBits set $01
(1)  448/    9AA7 : =$0                 vcD1R1Unk set 0
(1)  448/    9AA7 : =$0                 vcD1R2Unk set 0
(1)  448/    9AA7 : =$0                 vcD1R3Unk set 0
(1)  448/    9AA7 : =$0                 vcD1R4Unk set 0
(1)  449/    9AA7 : (MACRO)             	smpsVcDetune        $01, $05, $03, $07
(1)  449/    9AA7 : =$1                 vcDT1 set $01
(1)  449/    9AA7 : =$5                 vcDT2 set $05
(1)  449/    9AA7 : =$3                 vcDT3 set $03
(1)  449/    9AA7 : =$7                 vcDT4 set $07
(1)  450/    9AA7 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $02, $0A
(1)  450/    9AA7 : =$1                 vcCF1 set $01
(1)  450/    9AA7 : =$1                 vcCF2 set $01
(1)  450/    9AA7 : =$2                 vcCF3 set $02
(1)  450/    9AA7 : =$A                 vcCF4 set $0A
(1)  451/    9AA7 : (MACRO)             	smpsVcRateScale     $02, $02, $01, $00
(1)  451/    9AA7 : =$2                 vcRS1 set $02
(1)  451/    9AA7 : =$2                 vcRS2 set $02
(1)  451/    9AA7 : =$1                 vcRS3 set $01
(1)  451/    9AA7 : =$0                 vcRS4 set $00
(1)  452/    9AA7 : (MACRO)             	smpsVcAttackRate    $1D, $1F, $3F, $1F
(1)  452/    9AA7 : =$1D                vcAR1 set $1D
(1)  452/    9AA7 : =$1F                vcAR2 set $1F
(1)  452/    9AA7 : =$3F                vcAR3 set $3F
(1)  452/    9AA7 : =$1F                vcAR4 set $1F
(1)  453/    9AA7 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  453/    9AA7 : =$0                 vcAM1 set $00<<5
(1)  453/    9AA7 : =$0                 vcAM2 set $00<<5
(1)  453/    9AA7 : =$0                 vcAM3 set $00<<5
(1)  453/    9AA7 : =$0                 vcAM4 set $00<<5
(1)  454/    9AA7 : (MACRO)             	smpsVcDecayRate1    $0A, $0B, $0E, $0A
(1)  454/    9AA7 : =$A                 vcD1R1 set $0A
(1)  454/    9AA7 : =$B                 vcD1R2 set $0B
(1)  454/    9AA7 : =$E                 vcD1R3 set $0E
(1)  454/    9AA7 : =$A                 vcD1R4 set $0A
(1)  455/    9AA7 : (MACRO)             	smpsVcDecayRate2    $02, $05, $02, $01
(1)  455/    9AA7 : =$2                 vcD2R1 set $02
(1)  455/    9AA7 : =$5                 vcD2R2 set $05
(1)  455/    9AA7 : =$2                 vcD2R3 set $02
(1)  455/    9AA7 : =$1                 vcD2R4 set $01
(1)  456/    9AA7 : (MACRO)             	smpsVcDecayLevel    $08, $09, $08, $0A
(1)  456/    9AA7 : =$8                 vcDL1 set $08
(1)  456/    9AA7 : =$9                 vcDL2 set $09
(1)  456/    9AA7 : =$8                 vcDL3 set $08
(1)  456/    9AA7 : =$A                 vcDL4 set $0A
(1)  457/    9AA7 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  457/    9AA7 : =$F                 vcRR1 set $0F
(1)  457/    9AA7 : =$F                 vcRR2 set $0F
(1)  457/    9AA7 : =$F                 vcRR3 set $0F
(1)  457/    9AA7 : =$F                 vcRR4 set $0F
(1)  458/    9AA7 : (MACRO)             	smpsVcTotalLevel    $00, $00, $00, $14
(1)  458/    9AA7 : =$0                 vcTL1 set $00
(1)  458/    9AA7 : =$0                 vcTL2 set $00
(1)  458/    9AA7 : =$0                 vcTL3 set $00
(1)  458/    9AA7 : =$14                vcTL4 set $14
(1)  458/    9AA7 : 76                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  458/    9AA8 :                     ;   0     1     2     3     4     5     6     7
(1)  458/    9AA8 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  458/    9AA8 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  458/    9AA8 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  458/    9AA8 : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  458/    9AA8 : =$80                vcTLMask1 set $80
(1)  458/    9AA8 :                     
(1)  458/    9AA8 :                     
(1)  458/    9AA8 : 7A32 5111                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  458/    9AAC : 1F7F 9F9D                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  458/    9AB0 : 0A0E 0B0A                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  458/    9AB4 : 0102 0502                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  458/    9AB8 : AF8F 9F8F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  458/    9ABC : 1480 8080                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  459/    9AC0 :                     
(1)  460/    9AC0 :                     
   28/    9AC0 :                        		include		"Music/GameOver.asm"
(1)    1/    9AC0 :                     GameOver_Header:
(1)    2/    9AC0 : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    9AC0 :                     
(1)    2/    9AC0 : =$3                 SourceDriver set 3
(1)    2/    9AC0 :                     
(1)    2/    9AC0 : =$0                 SourceSMPS2ASM set 0
(1)    2/    9AC0 :                     
(1)    2/    9AC0 : =$9AC0              songStart set *
(1)    2/    9AC0 :                     
(1)    2/    9AC0 :                     
(1)    3/    9AC0 : (MACRO)             	smpsHeaderVoice     GameOver_Voices
(1)    3/    9AC0 : B09B                                dc.w    z80_ptr(GAMEOVER_VOICES)
(1)    4/    9AC2 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    9AC2 : 0603                        dc.b    $06,$03
(1)    5/    9AC4 : (MACRO)             	smpsHeaderTempo     $01, $04
(1)    5/    9AC4 : 01                          dc.b    $01
(1)    5/    9AC5 :  (MACRO-2)                  convertMainTempoMod $04
(1)    5/    9AC5 : 04                                  dc.b    $04
(1)    6/    9AC6 :                     
(1)    7/    9AC6 : (MACRO)             	smpsHeaderDAC       GameOver_DAC
(1)    7/    9AC6 :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_DAC
(1)    7/    9AC6 : A79B                                dc.w    z80_ptr(GAMEOVER_DAC)
(1)    7/    9AC8 : 0000                                dc.w    $00
(1)    8/    9ACA : (MACRO)             	smpsHeaderFM        GameOver_FM1,	$E8, $0A
(1)    8/    9ACA :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_FM1
(1)    8/    9ACA : F09A                                dc.w    z80_ptr(GAMEOVER_FM1)
(1)    8/    9ACC : E80A                        dc.b    $E8,$0A
(1)    9/    9ACE : (MACRO)             	smpsHeaderFM        GameOver_FM2,	$F4, $0F
(1)    9/    9ACE :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_FM2
(1)    9/    9ACE : 279B                                dc.w    z80_ptr(GAMEOVER_FM2)
(1)    9/    9AD0 : F40F                        dc.b    $F4,$0F
(1)   10/    9AD2 : (MACRO)             	smpsHeaderFM        GameOver_FM3,	$F4, $0F
(1)   10/    9AD2 :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_FM3
(1)   10/    9AD2 : 469B                                dc.w    z80_ptr(GAMEOVER_FM3)
(1)   10/    9AD4 : F40F                        dc.b    $F4,$0F
(1)   11/    9AD6 : (MACRO)             	smpsHeaderFM        GameOver_FM4,	$F4, $0D
(1)   11/    9AD6 :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_FM4
(1)   11/    9AD6 : 5B9B                                dc.w    z80_ptr(GAMEOVER_FM4)
(1)   11/    9AD8 : F40D                        dc.b    $F4,$0D
(1)   12/    9ADA : (MACRO)             	smpsHeaderFM        GameOver_FM5,	$DC, $16
(1)   12/    9ADA :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_FM5
(1)   12/    9ADA : 919B                                dc.w    z80_ptr(GAMEOVER_FM5)
(1)   12/    9ADC : DC16                        dc.b    $DC,$16
(1)   13/    9ADE : (MACRO)             	smpsHeaderPSG       GameOver_PSG1,	$D0, $03, $03, $00
(1)   13/    9ADE :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_PSG1
(1)   13/    9ADE : A49B                                dc.w    z80_ptr(GAMEOVER_PSG1)
(1)   13/    9AE0 :  (MACRO-2)                  PSGPitchConvert $D0
(1)   13/    9AE0 : D0                                  dc.b    $D0
(1)   13/    9AE1 : 0303 00                     dc.b    $03,$03,$00
(1)   14/    9AE4 : (MACRO)             	smpsHeaderPSG       GameOver_PSG2,	$DC, $06, $03, $00
(1)   14/    9AE4 :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_PSG2
(1)   14/    9AE4 : A59B                                dc.w    z80_ptr(GAMEOVER_PSG2)
(1)   14/    9AE6 :  (MACRO-2)                  PSGPitchConvert $DC
(1)   14/    9AE6 : DC                                  dc.b    $DC
(1)   14/    9AE7 : 0603 00                     dc.b    $06,$03,$00
(1)   15/    9AEA : (MACRO)             	smpsHeaderPSG       GameOver_PSG3,	$DC, $00, $00, sTone_03
(1)   15/    9AEA :  (MACRO-2)                  CheckedChannelPointer GAMEOVER_PSG3
(1)   15/    9AEA : A69B                                dc.w    z80_ptr(GAMEOVER_PSG3)
(1)   15/    9AEC :  (MACRO-2)                  PSGPitchConvert $DC
(1)   15/    9AEC : DC                                  dc.b    $DC
(1)   15/    9AED : 0000 03                     dc.b    $00,$00,STONE_03
(1)   16/    9AF0 :                     
(1)   17/    9AF0 :                     ; FM1 Data
(1)   18/    9AF0 :                     GameOver_FM1:
(1)   19/    9AF0 : (MACRO)             	smpsSetvoice        $00
(1)   19/    9AF0 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    9AF0 : EF00                                dc.b    $EF,$00
(1)   20/    9AF2 : (MACRO)             	smpsModSet          $20, $01, $04, $05
(1)   20/    9AF2 : F0                          dc.b    $F0
(1)   20/    9AF3 : 2001 0405                           dc.b    $20,$01,$04,$05
(1)   20/    9AF7 :                             ;dc.b   $01,$04,$05
(1)   21/    9AF7 : 8018 CA24 800C CA80 	dc.b	nRst, $18, nCs6, $24, nRst, $0C, nCs6, nRst, nD6, $24, nB5, $3C
             9AFF : CB24 C83C         
(1)   22/    9B03 : CA0C 80CA 80CA 80C6 	dc.b	nCs6, $0C, nRst, nCs6, nRst, nCs6, nRst, nA5, nRst, nG5, $24, nB5
             9B0B : 80C4 24C8         
(1)   23/    9B0F : 1880 24C9 0880 C9C8 	dc.b	$18, nRst, $24, nC6, $08, nRst, nC6, nB5, $0C, nRst, nBb5, nRst
             9B17 : 0C80 C780         
(1)   24/    9B1B : C680                	dc.b	nA5, nRst
(1)   25/    9B1D : (MACRO)             	smpsModSet          $28, $01, $18, $05
(1)   25/    9B1D : F0                          dc.b    $F0
(1)   25/    9B1E : 2801 1805                           dc.b    $28,$01,$18,$05
(1)   25/    9B22 :                             ;dc.b   $01,$18,$05
(1)   26/    9B22 : C560 E760           	dc.b	nAb5, $60, smpsNoAttack, $60
(1)   27/    9B26 : (MACRO)             	smpsStop
(1)   27/    9B26 : F2                          dc.b    $F2
(1)   28/    9B27 :                     
(1)   29/    9B27 :                     ; FM2 Data
(1)   30/    9B27 :                     GameOver_FM2:
(1)   31/    9B27 : (MACRO)             	smpsSetvoice        $01
(1)   31/    9B27 :  (MACRO-2)                  smpsFMvoice $01
(1)   31/    9B27 : EF01                                dc.b    $EF,$01
(1)   32/    9B29 : 8001 D90C 80D9 80D6 	dc.b	nRst, $01, nE7, $0C, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst, nD7
             9B31 : 80D6 80D7         
(1)   33/    9B35 : 2AD7 36D9 0C80 D980 	dc.b	$2A, nD7, $36, nE7, $0C, nRst, nE7, nRst, nCs7, nRst, nCs7, nRst
             9B3D : D680 D680         
(1)   34/    9B41 : DC2A DC36           	dc.b	nG7, $2A, nG7, $36
(1)   35/    9B45 : (MACRO)             	smpsStop
(1)   35/    9B45 : F2                          dc.b    $F2
(1)   36/    9B46 :                     
(1)   37/    9B46 :                     ; FM3 Data
(1)   38/    9B46 :                     GameOver_FM3:
(1)   39/    9B46 : (MACRO)             	smpsSetvoice        $01
(1)   39/    9B46 :  (MACRO-2)                  smpsFMvoice $01
(1)   39/    9B46 : EF01                                dc.b    $EF,$01
(1)   40/    9B48 : D618 D6D2 D2D4 2AD4 	dc.b	nCs7, $18, nCs7, nA6, nA6, nB6, $2A, nB6, $36, nCs7, $18, nCs7
             9B50 : 36D6 18D6         
(1)   41/    9B54 : D2D2 D72A D736      	dc.b	nA6, nA6, nD7, $2A, nD7, $36
(1)   42/    9B5A : (MACRO)             	smpsStop
(1)   42/    9B5A : F2                          dc.b    $F2
(1)   43/    9B5B :                     
(1)   44/    9B5B :                     ; FM4 Data
(1)   45/    9B5B :                     GameOver_FM4:
(1)   46/    9B5B : (MACRO)             	smpsSetvoice        $02
(1)   46/    9B5B :  (MACRO-2)                  smpsFMvoice $02
(1)   46/    9B5B : EF02                                dc.b    $EF,$02
(1)   47/    9B5D : (MACRO)             	smpsFade            $01
(1)   47/    9B5D : E2                                  dc.b    $E2
(1)   47/    9B5E : 01                                          dc.b    $01
(1)   48/    9B5F : AE0C 80AE 80A9 80A9 	dc.b	nA3, $0C, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $2A, nFs3
             9B67 : 80AC 2AAB         
(1)   49/    9B6B : 18AC 06AB 18AE 0C80 	dc.b	$18, nG3, $06, nFs3, $18, nA3, $0C, nRst, nA3, nRst, nE3, nRst
             9B73 : AE80 A980         
(1)   50/    9B77 : A980 B32A B218 B306 	dc.b	nE3, nRst, nD4, $2A, nCs4, $18, nD4, $06, nCs4, $18, nA3, $08
             9B7F : B218 AE08         
(1)   51/    9B83 : 80AE AD0C 80AC 80AB 	dc.b	nRst, nA3, nAb3, $0C, nRst, nG3, nRst, nFs3, nRst, nFs3, $60, smpsNoAttack
             9B8B : 80AB 60E7         
(1)   52/    9B8F : 60                  	dc.b	$60
(1)   53/    9B90 : (MACRO)             	smpsStop
(1)   53/    9B90 : F2                          dc.b    $F2
(1)   54/    9B91 :                     
(1)   55/    9B91 :                     ; FM5 Data
(1)   56/    9B91 :                     GameOver_FM5:
(1)   57/    9B91 : (MACRO)             	smpsSetvoice        $03
(1)   57/    9B91 :  (MACRO-2)                  smpsFMvoice $03
(1)   57/    9B91 : EF03                                dc.b    $EF,$03
(1)   58/    9B93 : 8060 D724 8006 D736 	dc.b	nRst, $60, nD7, $24, nRst, $06, nD7, $36, nRst, $60, nG7, $24
             9B9B : 8060 DC24         
(1)   59/    9B9F : 8006 DC36           	dc.b	nRst, $06, nG7, $36
(1)   60/    9BA3 : (MACRO)             	smpsStop
(1)   60/    9BA3 : F2                          dc.b    $F2
(1)   61/    9BA4 :                     
(1)   62/    9BA4 :                     ; PSG1 Data
(1)   63/    9BA4 :                     GameOver_PSG1:
(1)   64/    9BA4 : (MACRO)             	smpsStop
(1)   64/    9BA4 : F2                          dc.b    $F2
(1)   65/    9BA5 :                     
(1)   66/    9BA5 :                     ; PSG2 Data
(1)   67/    9BA5 :                     GameOver_PSG2:
(1)   68/    9BA5 : (MACRO)             	smpsStop
(1)   68/    9BA5 : F2                          dc.b    $F2
(1)   69/    9BA6 :                     
(1)   70/    9BA6 :                     ; PSG3 Data
(1)   71/    9BA6 :                     GameOver_PSG3:
(1)   72/    9BA6 : (MACRO)             	smpsStop
(1)   72/    9BA6 : F2                          dc.b    $F2
(1)   73/    9BA7 :                     
(1)   74/    9BA7 :                     ; DAC Data
(1)   75/    9BA7 :                     GameOver_DAC:
(1)   76/    9BA7 : 8030 81             	dc.b	nRst, $30, dSnareS3
(1)   77/    9BAA : (MACRO)             	smpsLoop            $00, $04, GameOver_DAC
(1)   77/    9BAA : F7                          dc.b    $F7
(1)   77/    9BAB : 0004                        dc.b    $00,$04
(1)   77/    9BAD : A79B                                dc.w    z80_ptr(GAMEOVER_DAC)
(1)   78/    9BAF : (MACRO)             	smpsStop
(1)   78/    9BAF : F2                          dc.b    $F2
(1)   79/    9BB0 :                     
(1)   80/    9BB0 :                     GameOver_Voices:
(1)   81/    9BB0 :                     ;	Voice $00
(1)   82/    9BB0 :                     ;	$3A
(1)   83/    9BB0 :                     ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
(1)   84/    9BB0 :                     ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
(1)   85/    9BB0 : (MACRO)             	smpsVcAlgorithm     $02
(1)   85/    9BB0 : =$2                 vcAlgorithm set $02
(1)   86/    9BB0 : (MACRO)             	smpsVcFeedback      $07
(1)   86/    9BB0 : =$7                 vcFeedback set $07
(1)   87/    9BB0 : (MACRO)             	smpsVcUnusedBits    $00
(1)   87/    9BB0 : =$0                 vcUnusedBits set $00
(1)   87/    9BB0 : =$0                 vcD1R1Unk set 0
(1)   87/    9BB0 : =$0                 vcD1R2Unk set 0
(1)   87/    9BB0 : =$0                 vcD1R3Unk set 0
(1)   87/    9BB0 : =$0                 vcD1R4Unk set 0
(1)   88/    9BB0 : (MACRO)             	smpsVcDetune        $00, $05, $00, $05
(1)   88/    9BB0 : =$0                 vcDT1 set $00
(1)   88/    9BB0 : =$5                 vcDT2 set $05
(1)   88/    9BB0 : =$0                 vcDT3 set $00
(1)   88/    9BB0 : =$5                 vcDT4 set $05
(1)   89/    9BB0 : (MACRO)             	smpsVcCoarseFreq    $02, $01, $08, $01
(1)   89/    9BB0 : =$2                 vcCF1 set $02
(1)   89/    9BB0 : =$1                 vcCF2 set $01
(1)   89/    9BB0 : =$8                 vcCF3 set $08
(1)   89/    9BB0 : =$1                 vcCF4 set $01
(1)   90/    9BB0 : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)   90/    9BB0 : =$0                 vcRS1 set $00
(1)   90/    9BB0 : =$0                 vcRS2 set $00
(1)   90/    9BB0 : =$0                 vcRS3 set $00
(1)   90/    9BB0 : =$0                 vcRS4 set $00
(1)   91/    9BB0 : (MACRO)             	smpsVcAttackRate    $10, $1E, $1E, $1E
(1)   91/    9BB0 : =$10                vcAR1 set $10
(1)   91/    9BB0 : =$1E                vcAR2 set $1E
(1)   91/    9BB0 : =$1E                vcAR3 set $1E
(1)   91/    9BB0 : =$1E                vcAR4 set $1E
(1)   92/    9BB0 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)   92/    9BB0 : =$0                 vcAM1 set $00<<5
(1)   92/    9BB0 : =$0                 vcAM2 set $00<<5
(1)   92/    9BB0 : =$0                 vcAM3 set $00<<5
(1)   92/    9BB0 : =$0                 vcAM4 set $00<<5
(1)   93/    9BB0 : (MACRO)             	smpsVcDecayRate1    $0F, $1F, $1F, $1F
(1)   93/    9BB0 : =$F                 vcD1R1 set $0F
(1)   93/    9BB0 : =$1F                vcD1R2 set $1F
(1)   93/    9BB0 : =$1F                vcD1R3 set $1F
(1)   93/    9BB0 : =$1F                vcD1R4 set $1F
(1)   94/    9BB0 : (MACRO)             	smpsVcDecayRate2    $02, $00, $00, $00
(1)   94/    9BB0 : =$2                 vcD2R1 set $02
(1)   94/    9BB0 : =$0                 vcD2R2 set $00
(1)   94/    9BB0 : =$0                 vcD2R3 set $00
(1)   94/    9BB0 : =$0                 vcD2R4 set $00
(1)   95/    9BB0 : (MACRO)             	smpsVcDecayLevel    $01, $00, $00, $00
(1)   95/    9BB0 : =$1                 vcDL1 set $01
(1)   95/    9BB0 : =$0                 vcDL2 set $00
(1)   95/    9BB0 : =$0                 vcDL3 set $00
(1)   95/    9BB0 : =$0                 vcDL4 set $00
(1)   96/    9BB0 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)   96/    9BB0 : =$F                 vcRR1 set $0F
(1)   96/    9BB0 : =$F                 vcRR2 set $0F
(1)   96/    9BB0 : =$F                 vcRR3 set $0F
(1)   96/    9BB0 : =$F                 vcRR4 set $0F
(1)   97/    9BB0 : (MACRO)             	smpsVcTotalLevel    $01, $22, $24, $18
(1)   97/    9BB0 : =$1                 vcTL1 set $01
(1)   97/    9BB0 : =$22                vcTL2 set $22
(1)   97/    9BB0 : =$24                vcTL3 set $24
(1)   97/    9BB0 : =$18                vcTL4 set $18
(1)   97/    9BB0 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)   97/    9BB1 :                     ;   0     1     2     3     4     5     6     7
(1)   97/    9BB1 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)   97/    9BB1 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)   97/    9BB1 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)   97/    9BB1 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)   97/    9BB1 : =$80                vcTLMask1 set $80
(1)   97/    9BB1 :                     
(1)   97/    9BB1 :                     
(1)   97/    9BB1 : 5108 5102                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)   97/    9BB5 : 1E1E 1E10                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)   97/    9BB9 : 1F1F 1F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)   97/    9BBD : 0000 0002                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)   97/    9BC1 : 0F0F 0F1F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)   97/    9BC5 : 1824 2281                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)   98/    9BC9 :                     
(1)   99/    9BC9 :                     ;	Voice $01
(1)  100/    9BC9 :                     ;	$3C
(1)  101/    9BC9 :                     ;	$33, $30, $73, $70, 	$94, $9F, $96, $9F, 	$12, $00, $14, $0F
(1)  102/    9BC9 :                     ;	$04, $0A, $04, $0D, 	$2F, $0F, $4F, $2F, 	$33, $80, $1A, $80
(1)  103/    9BC9 : (MACRO)             	smpsVcAlgorithm     $04
(1)  103/    9BC9 : =$4                 vcAlgorithm set $04
(1)  104/    9BC9 : (MACRO)             	smpsVcFeedback      $07
(1)  104/    9BC9 : =$7                 vcFeedback set $07
(1)  105/    9BC9 : (MACRO)             	smpsVcUnusedBits    $00
(1)  105/    9BC9 : =$0                 vcUnusedBits set $00
(1)  105/    9BC9 : =$0                 vcD1R1Unk set 0
(1)  105/    9BC9 : =$0                 vcD1R2Unk set 0
(1)  105/    9BC9 : =$0                 vcD1R3Unk set 0
(1)  105/    9BC9 : =$0                 vcD1R4Unk set 0
(1)  106/    9BC9 : (MACRO)             	smpsVcDetune        $07, $07, $03, $03
(1)  106/    9BC9 : =$7                 vcDT1 set $07
(1)  106/    9BC9 : =$7                 vcDT2 set $07
(1)  106/    9BC9 : =$3                 vcDT3 set $03
(1)  106/    9BC9 : =$3                 vcDT4 set $03
(1)  107/    9BC9 : (MACRO)             	smpsVcCoarseFreq    $00, $03, $00, $03
(1)  107/    9BC9 : =$0                 vcCF1 set $00
(1)  107/    9BC9 : =$3                 vcCF2 set $03
(1)  107/    9BC9 : =$0                 vcCF3 set $00
(1)  107/    9BC9 : =$3                 vcCF4 set $03
(1)  108/    9BC9 : (MACRO)             	smpsVcRateScale     $02, $02, $02, $02
(1)  108/    9BC9 : =$2                 vcRS1 set $02
(1)  108/    9BC9 : =$2                 vcRS2 set $02
(1)  108/    9BC9 : =$2                 vcRS3 set $02
(1)  108/    9BC9 : =$2                 vcRS4 set $02
(1)  109/    9BC9 : (MACRO)             	smpsVcAttackRate    $1F, $16, $1F, $14
(1)  109/    9BC9 : =$1F                vcAR1 set $1F
(1)  109/    9BC9 : =$16                vcAR2 set $16
(1)  109/    9BC9 : =$1F                vcAR3 set $1F
(1)  109/    9BC9 : =$14                vcAR4 set $14
(1)  110/    9BC9 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  110/    9BC9 : =$0                 vcAM1 set $00<<5
(1)  110/    9BC9 : =$0                 vcAM2 set $00<<5
(1)  110/    9BC9 : =$0                 vcAM3 set $00<<5
(1)  110/    9BC9 : =$0                 vcAM4 set $00<<5
(1)  111/    9BC9 : (MACRO)             	smpsVcDecayRate1    $0F, $14, $00, $12
(1)  111/    9BC9 : =$F                 vcD1R1 set $0F
(1)  111/    9BC9 : =$14                vcD1R2 set $14
(1)  111/    9BC9 : =$0                 vcD1R3 set $00
(1)  111/    9BC9 : =$12                vcD1R4 set $12
(1)  112/    9BC9 : (MACRO)             	smpsVcDecayRate2    $0D, $04, $0A, $04
(1)  112/    9BC9 : =$D                 vcD2R1 set $0D
(1)  112/    9BC9 : =$4                 vcD2R2 set $04
(1)  112/    9BC9 : =$A                 vcD2R3 set $0A
(1)  112/    9BC9 : =$4                 vcD2R4 set $04
(1)  113/    9BC9 : (MACRO)             	smpsVcDecayLevel    $02, $04, $00, $02
(1)  113/    9BC9 : =$2                 vcDL1 set $02
(1)  113/    9BC9 : =$4                 vcDL2 set $04
(1)  113/    9BC9 : =$0                 vcDL3 set $00
(1)  113/    9BC9 : =$2                 vcDL4 set $02
(1)  114/    9BC9 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  114/    9BC9 : =$F                 vcRR1 set $0F
(1)  114/    9BC9 : =$F                 vcRR2 set $0F
(1)  114/    9BC9 : =$F                 vcRR3 set $0F
(1)  114/    9BC9 : =$F                 vcRR4 set $0F
(1)  115/    9BC9 : (MACRO)             	smpsVcTotalLevel    $00, $1A, $00, $33
(1)  115/    9BC9 : =$0                 vcTL1 set $00
(1)  115/    9BC9 : =$1A                vcTL2 set $1A
(1)  115/    9BC9 : =$0                 vcTL3 set $00
(1)  115/    9BC9 : =$33                vcTL4 set $33
(1)  115/    9BC9 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  115/    9BCA :                     ;   0     1     2     3     4     5     6     7
(1)  115/    9BCA :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  115/    9BCA : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  115/    9BCA : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  115/    9BCA : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  115/    9BCA : =$80                vcTLMask1 set $80
(1)  115/    9BCA :                     
(1)  115/    9BCA :                     
(1)  115/    9BCA : 3330 7370                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  115/    9BCE : 949F 969F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  115/    9BD2 : 1200 140F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  115/    9BD6 : 040A 040D                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  115/    9BDA : 2F0F 4F2F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  115/    9BDE : 3380 1A80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  116/    9BE2 :                     
(1)  117/    9BE2 :                     ;	Voice $02
(1)  118/    9BE2 :                     ;	$3A
(1)  119/    9BE2 :                     ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
(1)  120/    9BE2 :                     ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$1C, $28, $27, $80
(1)  121/    9BE2 : (MACRO)             	smpsVcAlgorithm     $02
(1)  121/    9BE2 : =$2                 vcAlgorithm set $02
(1)  122/    9BE2 : (MACRO)             	smpsVcFeedback      $07
(1)  122/    9BE2 : =$7                 vcFeedback set $07
(1)  123/    9BE2 : (MACRO)             	smpsVcUnusedBits    $00
(1)  123/    9BE2 : =$0                 vcUnusedBits set $00
(1)  123/    9BE2 : =$0                 vcD1R1Unk set 0
(1)  123/    9BE2 : =$0                 vcD1R2Unk set 0
(1)  123/    9BE2 : =$0                 vcD1R3Unk set 0
(1)  123/    9BE2 : =$0                 vcD1R4Unk set 0
(1)  124/    9BE2 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  124/    9BE2 : =$0                 vcDT1 set $00
(1)  124/    9BE2 : =$0                 vcDT2 set $00
(1)  124/    9BE2 : =$0                 vcDT3 set $00
(1)  124/    9BE2 : =$0                 vcDT4 set $00
(1)  125/    9BE2 : (MACRO)             	smpsVcCoarseFreq    $01, $01, $07, $01
(1)  125/    9BE2 : =$1                 vcCF1 set $01
(1)  125/    9BE2 : =$1                 vcCF2 set $01
(1)  125/    9BE2 : =$7                 vcCF3 set $07
(1)  125/    9BE2 : =$1                 vcCF4 set $01
(1)  126/    9BE2 : (MACRO)             	smpsVcRateScale     $01, $02, $02, $02
(1)  126/    9BE2 : =$1                 vcRS1 set $01
(1)  126/    9BE2 : =$2                 vcRS2 set $02
(1)  126/    9BE2 : =$2                 vcRS3 set $02
(1)  126/    9BE2 : =$2                 vcRS4 set $02
(1)  127/    9BE2 : (MACRO)             	smpsVcAttackRate    $13, $0D, $0E, $0E
(1)  127/    9BE2 : =$13                vcAR1 set $13
(1)  127/    9BE2 : =$D                 vcAR2 set $0D
(1)  127/    9BE2 : =$E                 vcAR3 set $0E
(1)  127/    9BE2 : =$E                 vcAR4 set $0E
(1)  128/    9BE2 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  128/    9BE2 : =$0                 vcAM1 set $00<<5
(1)  128/    9BE2 : =$0                 vcAM2 set $00<<5
(1)  128/    9BE2 : =$0                 vcAM3 set $00<<5
(1)  128/    9BE2 : =$0                 vcAM4 set $00<<5
(1)  129/    9BE2 : (MACRO)             	smpsVcDecayRate1    $03, $0E, $0E, $0E
(1)  129/    9BE2 : =$3                 vcD1R1 set $03
(1)  129/    9BE2 : =$E                 vcD1R2 set $0E
(1)  129/    9BE2 : =$E                 vcD1R3 set $0E
(1)  129/    9BE2 : =$E                 vcD1R4 set $0E
(1)  130/    9BE2 : (MACRO)             	smpsVcDecayRate2    $07, $00, $00, $00
(1)  130/    9BE2 : =$7                 vcD2R1 set $07
(1)  130/    9BE2 : =$0                 vcD2R2 set $00
(1)  130/    9BE2 : =$0                 vcD2R3 set $00
(1)  130/    9BE2 : =$0                 vcD2R4 set $00
(1)  131/    9BE2 : (MACRO)             	smpsVcDecayLevel    $00, $01, $0F, $01
(1)  131/    9BE2 : =$0                 vcDL1 set $00
(1)  131/    9BE2 : =$1                 vcDL2 set $01
(1)  131/    9BE2 : =$F                 vcDL3 set $0F
(1)  131/    9BE2 : =$1                 vcDL4 set $01
(1)  132/    9BE2 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  132/    9BE2 : =$F                 vcRR1 set $0F
(1)  132/    9BE2 : =$F                 vcRR2 set $0F
(1)  132/    9BE2 : =$F                 vcRR3 set $0F
(1)  132/    9BE2 : =$F                 vcRR4 set $0F
(1)  133/    9BE2 : (MACRO)             	smpsVcTotalLevel    $00, $27, $28, $1C
(1)  133/    9BE2 : =$0                 vcTL1 set $00
(1)  133/    9BE2 : =$27                vcTL2 set $27
(1)  133/    9BE2 : =$28                vcTL3 set $28
(1)  133/    9BE2 : =$1C                vcTL4 set $1C
(1)  133/    9BE2 : 3A                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  133/    9BE3 :                     ;   0     1     2     3     4     5     6     7
(1)  133/    9BE3 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  133/    9BE3 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  133/    9BE3 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  133/    9BE3 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  133/    9BE3 : =$80                vcTLMask1 set $80
(1)  133/    9BE3 :                     
(1)  133/    9BE3 :                     
(1)  133/    9BE3 : 0107 0101                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  133/    9BE7 : 8E8E 8D53                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  133/    9BEB : 0E0E 0E03                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  133/    9BEF : 0000 0007                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  133/    9BF3 : 1FFF 1F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  133/    9BF7 : 1C28 2780                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  134/    9BFB :                     
(1)  135/    9BFB :                     ;	Voice $03
(1)  136/    9BFB :                     ;	$1F
(1)  137/    9BFB :                     ;	$66, $31, $53, $22, 	$1C, $98, $1F, $1F, 	$12, $0F, $0F, $0F
(1)  138/    9BFB :                     ;	$00, $00, $00, $00, 	$FF, $0F, $0F, $0F, 	$8C, $8D, $8A, $8B
(1)  139/    9BFB : (MACRO)             	smpsVcAlgorithm     $07
(1)  139/    9BFB : =$7                 vcAlgorithm set $07
(1)  140/    9BFB : (MACRO)             	smpsVcFeedback      $03
(1)  140/    9BFB : =$3                 vcFeedback set $03
(1)  141/    9BFB : (MACRO)             	smpsVcUnusedBits    $00
(1)  141/    9BFB : =$0                 vcUnusedBits set $00
(1)  141/    9BFB : =$0                 vcD1R1Unk set 0
(1)  141/    9BFB : =$0                 vcD1R2Unk set 0
(1)  141/    9BFB : =$0                 vcD1R3Unk set 0
(1)  141/    9BFB : =$0                 vcD1R4Unk set 0
(1)  142/    9BFB : (MACRO)             	smpsVcDetune        $02, $05, $03, $06
(1)  142/    9BFB : =$2                 vcDT1 set $02
(1)  142/    9BFB : =$5                 vcDT2 set $05
(1)  142/    9BFB : =$3                 vcDT3 set $03
(1)  142/    9BFB : =$6                 vcDT4 set $06
(1)  143/    9BFB : (MACRO)             	smpsVcCoarseFreq    $02, $03, $01, $06
(1)  143/    9BFB : =$2                 vcCF1 set $02
(1)  143/    9BFB : =$3                 vcCF2 set $03
(1)  143/    9BFB : =$1                 vcCF3 set $01
(1)  143/    9BFB : =$6                 vcCF4 set $06
(1)  144/    9BFB : (MACRO)             	smpsVcRateScale     $00, $00, $02, $00
(1)  144/    9BFB : =$0                 vcRS1 set $00
(1)  144/    9BFB : =$0                 vcRS2 set $00
(1)  144/    9BFB : =$2                 vcRS3 set $02
(1)  144/    9BFB : =$0                 vcRS4 set $00
(1)  145/    9BFB : (MACRO)             	smpsVcAttackRate    $1F, $1F, $18, $1C
(1)  145/    9BFB : =$1F                vcAR1 set $1F
(1)  145/    9BFB : =$1F                vcAR2 set $1F
(1)  145/    9BFB : =$18                vcAR3 set $18
(1)  145/    9BFB : =$1C                vcAR4 set $1C
(1)  146/    9BFB : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  146/    9BFB : =$0                 vcAM1 set $00<<5
(1)  146/    9BFB : =$0                 vcAM2 set $00<<5
(1)  146/    9BFB : =$0                 vcAM3 set $00<<5
(1)  146/    9BFB : =$0                 vcAM4 set $00<<5
(1)  147/    9BFB : (MACRO)             	smpsVcDecayRate1    $0F, $0F, $0F, $12
(1)  147/    9BFB : =$F                 vcD1R1 set $0F
(1)  147/    9BFB : =$F                 vcD1R2 set $0F
(1)  147/    9BFB : =$F                 vcD1R3 set $0F
(1)  147/    9BFB : =$12                vcD1R4 set $12
(1)  148/    9BFB : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  148/    9BFB : =$0                 vcD2R1 set $00
(1)  148/    9BFB : =$0                 vcD2R2 set $00
(1)  148/    9BFB : =$0                 vcD2R3 set $00
(1)  148/    9BFB : =$0                 vcD2R4 set $00
(1)  149/    9BFB : (MACRO)             	smpsVcDecayLevel    $00, $00, $00, $0F
(1)  149/    9BFB : =$0                 vcDL1 set $00
(1)  149/    9BFB : =$0                 vcDL2 set $00
(1)  149/    9BFB : =$0                 vcDL3 set $00
(1)  149/    9BFB : =$F                 vcDL4 set $0F
(1)  150/    9BFB : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  150/    9BFB : =$F                 vcRR1 set $0F
(1)  150/    9BFB : =$F                 vcRR2 set $0F
(1)  150/    9BFB : =$F                 vcRR3 set $0F
(1)  150/    9BFB : =$F                 vcRR4 set $0F
(1)  151/    9BFB : (MACRO)             	smpsVcTotalLevel    $0B, $0A, $0D, $0C
(1)  151/    9BFB : =$B                 vcTL1 set $0B
(1)  151/    9BFB : =$A                 vcTL2 set $0A
(1)  151/    9BFB : =$D                 vcTL3 set $0D
(1)  151/    9BFB : =$C                 vcTL4 set $0C
(1)  151/    9BFB : 1F                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  151/    9BFC :                     ;   0     1     2     3     4     5     6     7
(1)  151/    9BFC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  151/    9BFC : =$80                vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  151/    9BFC : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  151/    9BFC : =$80                vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  151/    9BFC : =$80                vcTLMask1 set $80
(1)  151/    9BFC :                     
(1)  151/    9BFC :                     
(1)  151/    9BFC : 6631 5322                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  151/    9C00 : 1C98 1F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  151/    9C04 : 120F 0F0F                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  151/    9C08 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  151/    9C0C : FF0F 0F0F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  151/    9C10 : 8C8D 8A8B                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  152/    9C14 :                     
(1)  153/    9C14 :                     
 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 2 - 11/2/2023 23:7:44


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
*CASESENSITIVE :                  0 - | *CFM3 :                           2 - |
*CFM4 :                           4 - | *CFM5 :                           5 - |
*CFM6 :                           6 - | *CNOISE :                        E0 - |
*CONSTPI :        3.141592653589793 - | *CPSG1 :                         80 - |
*CPSG2 :                         A0 - | *CPSG3 :                         C0 - |
*DATE :                 "11/2/2023" - | *DBASSHEY :                      B6 - |
*DCLAP :                         C7 - | *DCLAPS3 :                       8F - |
*DCLICK :                        9C - | *DCOMEON :                       A5 - |
*DCRASHCYMBAL :                  88 - | *DCRASHINGNOISEWOO :             BE - |
*DDANCESNARE :                   A6 - | *DDANCESTYLEKICK :               B7 - |
 DECHOEDCLAPHIT :                B2 - | *DECHOEDCLAPHIT_S3 :             D8 - |
 DELECTRICFLOORTOM :             93 - |  DELECTRICHIGHTOM :              90 - |
*DELECTRICLOWTOM :               92 - | *DELECTRICMIDTOM :               91 - |
*DFINALFIGHTMETALCRASH :         D6 - | *DFLOORTOM :                     D2 - |
 DFLOORTOMS3 :                   85 - | *DGLASSCRASH :                   A0 - |
*DGLASSCRASHKICK :               A1 - | *DGLASSCRASHSNARE :              9F - |
*DGO :                           AA - |  DHICLAP :                       D3 - |
*DHIGHERMETALHIT :               8D - |  DHIGHMETALHIT :                 8C - |
 DHIGHTOM :                      82 - | *DHIHITDRUM :                    AF - |
*DHIPHOPHITKICK :                B4 - | *DHIPHOPHITKICK2 :               B8 - |
 DHIPHOPHITKICK3 :               B9 - |  DHIPHOPHITPOWERKICK :           B5 - |
*DHITIMPANI :                    CC - | *DHITIMPANIS3 :                  98 - |
*DHITOM :                        CA - | *DHIWOODBLOCK :                  AD - |
 DINTROKICK :                    D7 - |  DKICK :                         C5 - |
*DKICKEXTRABASS :                A4 - | *DKICKHEY :                      C0 - |
*DKICKS3 :                       86 - |  DLOOSEKICK :                    A7 - |
 DLOOSERSNARE :                  97 - | *DLOOSESNARE :                   96 - |
*DLOOSESNARENOISE :              BC - |  DLOWCLAP :                      D5 - |
*DLOWERECHOEDCLAPHIT :           B3 - | *DLOWERECHOEDCLAPHIT_S3 :        D9 - |
*DLOWERPOWERKICKHIT :            C3 - |  DLOWESTPOWERKICKHIT :           C4 - |
*DLOWHITDRUM :                   B0 - | *DLOWMETALHIT :                  8A - |
*DLOWPOWERKICKHIT :              C2 - | *DLOWTIMPANI :                   CE - |
*DLOWTIMPANIS3 :                 99 - | *DLOWTOM :                       D1 - |
 DLOWTOMS3 :                     84 - |  DLOWWOODBLOCK :                 AE - |
*DMETALCRASHHIT :                B1 - | *DMETALHIT :                     8B - |
*DMIDCLAP :                      D4 - | *DMIDMETALHIT :                  8E - |
*DMIDPITCHSNARE :                95 - |  DMIDTIMPANI :                   CD - |
*DMIDTIMPANIS3 :                 9A - | *DMIDTOM :                       D0 - |
 DMIDTOMS3 :                     83 - | *DMODLOOSEKICK :                 A8 - |
 DMUFFLEDSNARE :                 87 - | *DODDSNAREKICK :                 A3 - |
*DPOWERKICK :                    9D - |  DPOWERKICK2 :                   BD - |
 DPOWERKICKHIT :                 C1 - | *DPOWERTOM :                     AC - |
 DQUICKGLASSCRASH :              9E - | *DQUICKHIT :                     BF - |
 DQUICKLOOSESNARE :              9B - |  DQUIETGLASSCRASH :              A2 - |
*DREVERSEFADINGWIND :            BA - | *DRIDECYMBAL :                   89 - |
*DSCRATCH :                      C8 - | *DSCRATCHS3 :                    BB - |
*DSNARE :                        C6 - | *DSNAREGO :                      AB - |
 DSNARES3 :                      81 - | *DTIGHTSNARE :                   94 - |
*DTIMPANI :                      C9 - | *DVLOWCLAP :                     CB - |
*DVLOWTIMPANI :                  CF - | *DWOO :                          A9 - |
 ELECTORIA_CALL00 :            87D9 C |  ELECTORIA_CALL01 :            87E7 C |
 ELECTORIA_CALL02 :            87F5 C |  ELECTORIA_CALL03 :            8802 C |
 ELECTORIA_CALL04 :            8181 C |  ELECTORIA_CALL05 :            855D C |
 ELECTORIA_CALL06 :            81AE C |  ELECTORIA_CALL07 :            81C3 C |
 ELECTORIA_CALL08 :            81EE C |  ELECTORIA_CALL09 :            825C C |
 ELECTORIA_CALL0A :            82CB C |  ELECTORIA_CALL0B :            80A1 C |
 ELECTORIA_CALL0C :            8728 C |  ELECTORIA_CALL0D :            8735 C |
 ELECTORIA_CALL0E :            86BA C |  ELECTORIA_CALL0F :            86CC C |
 ELECTORIA_CALL10 :            86DE C |  ELECTORIA_CALL11 :            86F2 C |
 ELECTORIA_CALL12 :            863C C |  ELECTORIA_CALL13 :            833A C |
 ELECTORIA_DAC :               8748 C |  ELECTORIA_FM1 :               8030 C |
 ELECTORIA_FM2 :               80B2 C |  ELECTORIA_FM3 :               83DD C |
 ELECTORIA_FM4 :               84E8 C |  ELECTORIA_FM5 :               856F C |
*ELECTORIA_HEADER :            8000 C |  ELECTORIA_JUMP00 :            83EF C |
 ELECTORIA_JUMP01 :            80C7 C |  ELECTORIA_LOOP00 :            8759 C |
 ELECTORIA_LOOP01 :            876A C |  ELECTORIA_LOOP02 :            877B C |
 ELECTORIA_LOOP03 :            8796 C |  ELECTORIA_LOOP04 :            87A7 C |
 ELECTORIA_LOOP05 :            8573 C |  ELECTORIA_LOOP06 :            857C C |
 ELECTORIA_LOOP07 :            8586 C |  ELECTORIA_LOOP08 :            85A5 C |
 ELECTORIA_LOOP09 :            85AF C |  ELECTORIA_LOOP0A :            85BE C |
 ELECTORIA_LOOP0B :            84EE C |  ELECTORIA_LOOP0C :            84F8 C |
 ELECTORIA_LOOP0D :            8507 C |  ELECTORIA_LOOP0E :            8522 C |
 ELECTORIA_LOOP0F :            8536 C |  ELECTORIA_LOOP10 :            854B C |
 ELECTORIA_LOOP11 :            83E3 C |  ELECTORIA_LOOP12 :            84CA C |
 ELECTORIA_LOOP13 :            84D9 C |  ELECTORIA_LOOP14 :            80B6 C |
 ELECTORIA_LOOP15 :            8173 C |  ELECTORIA_LOOP16 :            8043 C |
 ELECTORIA_LOOP17 :            804B C |  ELECTORIA_LOOP18 :            8055 C |
 ELECTORIA_LOOP19 :            8078 C |  ELECTORIA_LOOP1A :            808E C |
 ELECTORIA_LOOP1B :            8096 C |  ELECTORIA_LOOP1C :            86FF C |
 ELECTORIA_LOOP1D :            8707 C |  ELECTORIA_LOOP1E :            8712 C |
 ELECTORIA_LOOP1F :            871D C |  ELECTORIA_LOOP20 :            8654 C |
 ELECTORIA_LOOP21 :            8663 C |  ELECTORIA_LOOP22 :            866F C |
 ELECTORIA_LOOP23 :            867C C |  ELECTORIA_LOOP24 :            8686 C |
 ELECTORIA_LOOP25 :            86A8 C |  ELECTORIA_LOOP26 :            85CD C |
 ELECTORIA_LOOP27 :            85D5 C |  ELECTORIA_LOOP28 :            85DD C |
 ELECTORIA_LOOP29 :            860C C |  ELECTORIA_LOOP2A :            8616 C |
 ELECTORIA_LOOP2B :            861E C |  ELECTORIA_LOOP2C :            8631 C |
 ELECTORIA_PSG1 :              85C9 C |  ELECTORIA_PSG2 :              864E C |
 ELECTORIA_PSG3 :              86FD C |  ELECTORIA_VOICES :            880F C |
 EVENINGSTAR_CALL00 :          9681 C |  EVENINGSTAR_CALL01 :          92D8 C |
 EVENINGSTAR_CALL02 :          94A2 C |  EVENINGSTAR_CALL03 :          94D4 C |
 EVENINGSTAR_CALL04 :          9505 C |  EVENINGSTAR_CALL05 :          948B C |
 EVENINGSTAR_CALL06 :          939C C |  EVENINGSTAR_CALL07 :          93CE C |
 EVENINGSTAR_CALL08 :          9412 C |  EVENINGSTAR_CALL09 :          93FF C |
 EVENINGSTAR_CALL0A :          9290 C |  EVENINGSTAR_CALL0B :          929C C |
 EVENINGSTAR_CALL0C :          962B C |  EVENINGSTAR_CALL0D :          9636 C |
 EVENINGSTAR_DAC :             9644 C |  EVENINGSTAR_FM1 :             9225 C |
 EVENINGSTAR_FM2 :             92B1 C |  EVENINGSTAR_FM3 :             934C C |
 EVENINGSTAR_FM4 :             9423 C |  EVENINGSTAR_FM5 :             9516 C |
*EVENINGSTAR_HEADER :          91F5 C |  EVENINGSTAR_JUMP00 :          9524 C |
 EVENINGSTAR_JUMP01 :          923D C |  EVENINGSTAR_JUMP02 :          959F C |
 EVENINGSTAR_JUMP03 :          9546 C |  EVENINGSTAR_LOOP00 :          9658 C |
 EVENINGSTAR_LOOP01 :          9660 C |  EVENINGSTAR_LOOP02 :          9676 C |
 EVENINGSTAR_LOOP03 :          943B C |  EVENINGSTAR_LOOP04 :          935C C |
 EVENINGSTAR_LOOP05 :          92CB C |  EVENINGSTAR_LOOP06 :          95E0 C |
 EVENINGSTAR_LOOP07 :          95ED C |  EVENINGSTAR_PSG1 :            9533 C |
 EVENINGSTAR_PSG2 :            9585 C |  EVENINGSTAR_PSG3 :            95DE C |
 EVENINGSTAR_VOICES :          9691 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GAMEOVER_DAC :                9BA7 C |
 GAMEOVER_FM1 :                9AF0 C |  GAMEOVER_FM2 :                9B27 C |
 GAMEOVER_FM3 :                9B46 C |  GAMEOVER_FM4 :                9B5B C |
 GAMEOVER_FM5 :                9B91 C | *GAMEOVER_HEADER :             9AC0 C |
 GAMEOVER_PSG1 :               9BA4 C |  GAMEOVER_PSG2 :               9BA5 C |
 GAMEOVER_PSG3 :               9BA6 C |  GAMEOVER_VOICES :             9BB0 C |
*HAS64 :                          0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HYPERHYPER_CALL00 :           915F C |
 HYPERHYPER_CALL01 :           916C C |  HYPERHYPER_CALL02 :           917C C |
 HYPERHYPER_CALL03 :           8F63 C |  HYPERHYPER_CALL04 :           8F12 C |
 HYPERHYPER_CALL05 :           8F07 C |  HYPERHYPER_CALL06 :           8DF5 C |
 HYPERHYPER_CALL07 :           8E10 C |  HYPERHYPER_CALL08 :           8CEC C |
 HYPERHYPER_CALL09 :           8CFA C |  HYPERHYPER_CALL0A :           8D05 C |
 HYPERHYPER_CALL0B :           8C44 C |  HYPERHYPER_CALL0C :           8C39 C |
 HYPERHYPER_CALL0D :           90F5 C |  HYPERHYPER_CALL0E :           9103 C |
 HYPERHYPER_CALL0F :           8FFD C |  HYPERHYPER_CALL10 :           8FEE C |
 HYPERHYPER_DAC :              9117 C |  HYPERHYPER_FM1 :              8BF0 C |
 HYPERHYPER_FM2 :              8C56 C |  HYPERHYPER_FM3 :              8D1A C |
 HYPERHYPER_FM4 :              8E1B C |  HYPERHYPER_FM5 :              8F18 C |
*HYPERHYPER_HEADER :           8BC0 C |  HYPERHYPER_JUMP00 :           8E43 C |
 HYPERHYPER_JUMP01 :           8D27 C |  HYPERHYPER_JUMP02 :           8C63 C |
 HYPERHYPER_JUMP03 :           903D C |  HYPERHYPER_JUMP04 :           8F86 C |
 HYPERHYPER_LOOP00 :           9128 C |  HYPERHYPER_LOOP01 :           9139 C |
 HYPERHYPER_LOOP02 :           8F1A C |  HYPERHYPER_LOOP03 :           8F22 C |
 HYPERHYPER_LOOP04 :           8F3A C |  HYPERHYPER_LOOP05 :           8E21 C |
 HYPERHYPER_LOOP06 :           8C09 C |  HYPERHYPER_LOOP07 :           90A9 C |
 HYPERHYPER_LOOP08 :           90B4 C |  HYPERHYPER_LOOP09 :           90C4 C |
 HYPERHYPER_PSG1 :             8F6E C |  HYPERHYPER_PSG2 :             9020 C |
 HYPERHYPER_PSG3 :             90A7 C |  HYPERHYPER_VOICES :           9191 C |
*INSUPMODE :                      1 - | *LISTON :                         3 - |
*MACEXP :                         7 - |  MOMCPU :                     68008 - |
*MOMCPUNAME :               "68008" - |  MOONRISE_CALL00 :             9A2C C |
 MOONRISE_CALL01 :             9A37 C |  MOONRISE_CALL02 :             9898 C |
 MOONRISE_CALL03 :             98AC C |  MOONRISE_CALL04 :             98D9 C |
 MOONRISE_CALL05 :             98FD C |  MOONRISE_CALL06 :             985C C |
 MOONRISE_CALL07 :             9825 C |  MOONRISE_CALL08 :             97F2 C |
 MOONRISE_CALL09 :             9721 C |  MOONRISE_CALL0A :             99C9 C |
 MOONRISE_CALL0B :             9938 C |  MOONRISE_DAC :                99DD C |
 MOONRISE_FM1 :                970C C |  MOONRISE_FM2 :                9731 C |
 MOONRISE_FM3 :                97FF C |  MOONRISE_FM4 :                9832 C |
 MOONRISE_FM5 :                9869 C | *MOONRISE_HEADER :             96DC C |
 MOONRISE_JUMP00 :             99FA C |  MOONRISE_JUMP01 :             9773 C |
 MOONRISE_JUMP02 :             99AE C |  MOONRISE_JUMP03 :             9932 C |
 MOONRISE_LOOP00 :             9878 C |  MOONRISE_LOOP01 :             9840 C |
 MOONRISE_LOOP02 :             980D C |  MOONRISE_LOOP03 :             9786 C |
 MOONRISE_LOOP04 :             97C5 C |  MOONRISE_LOOP05 :             970E C |
 MOONRISE_LOOP06 :             9716 C |  MOONRISE_LOOP07 :             99B6 C |
 MOONRISE_LOOP08 :             99BE C |  MOONRISE_PSG1 :               9921 C |
 MOONRISE_PSG2 :               9999 C |  MOONRISE_PSG3 :               99B4 C |
 MOONRISE_VOICES :             9A43 C | *NA0 :                           8A - |
 NA1 :                           96 - |  NA2 :                           A2 - |
 NA3 :                           AE - |  NA4 :                           BA - |
 NA5 :                           C6 - |  NA6 :                           D2 - |
*NA7 :                           DE - | *NAB0 :                          89 - |
 NAB1 :                          95 - | *NAB2 :                          A1 - |
 NAB3 :                          AD - | *NAB4 :                          B9 - |
 NAB5 :                          C5 - | *NAB6 :                          D1 - |
*NAB7 :                          DD - | *NB0 :                           8C - |
*NB1 :                           98 - |  NB2 :                           A4 - |
 NB3 :                           B0 - |  NB4 :                           BC - |
 NB5 :                           C8 - |  NB6 :                           D4 - |
*NBB0 :                          8B - |  NBB1 :                          97 - |
 NBB2 :                          A3 - |  NBB3 :                          AF - |
 NBB4 :                          BB - |  NBB5 :                          C7 - |
 NBB6 :                          D3 - | *NBB7 :                          DF - |
*NC0 :                           81 - | *NC1 :                           8D - |
 NC2 :                           99 - |  NC3 :                           A5 - |
 NC4 :                           B1 - |  NC5 :                           BD - |
 NC6 :                           C9 - | *NC7 :                           D5 - |
*NCS0 :                          82 - | *NCS1 :                          8E - |
*NCS2 :                          9A - | *NCS3 :                          A6 - |
 NCS4 :                          B2 - | *NCS5 :                          BE - |
 NCS6 :                          CA - |  NCS7 :                          D6 - |
*ND0 :                           83 - |  ND1 :                           8F - |
 ND2 :                           9B - |  ND3 :                           A7 - |
 ND4 :                           B3 - |  ND5 :                           BF - |
 ND6 :                           CB - |  ND7 :                           D7 - |
*NE0 :                           85 - |  NE1 :                           91 - |
 NE2 :                           9D - |  NE3 :                           A9 - |
 NE4 :                           B5 - |  NE5 :                           C1 - |
 NE6 :                           CD - |  NE7 :                           D9 - |
*NEB0 :                          84 - |  NEB1 :                          90 - |
 NEB2 :                          9C - |  NEB3 :                          A8 - |
 NEB4 :                          B4 - |  NEB5 :                          C0 - |
*NEB6 :                          CC - | *NEB7 :                          D8 - |
*NESTMAX :                      100 - | *NF0 :                           86 - |
 NF1 :                           92 - |  NF2 :                           9E - |
 NF3 :                           AA - |  NF4 :                           B6 - |
 NF5 :                           C2 - |  NF6 :                           CE - |
*NF7 :                           DA - | *NFS0 :                          87 - |
 NFS1 :                          93 - |  NFS2 :                          9F - |
 NFS3 :                          AB - |  NFS4 :                          B7 - |
*NFS5 :                          C3 - |  NFS6 :                          CF - |
*NFS7 :                          DB - | *NG0 :                           88 - |
 NG1 :                           94 - |  NG2 :                           A0 - |
 NG3 :                           AC - |  NG4 :                           B8 - |
 NG5 :                           C4 - | *NG6 :                           D0 - |
 NG7 :                           DC - | *NMAXPSG :                       C7 - |
*NMAXPSG1 :                      D3 - |  NMAXPSG2 :                      D4 - |
 NRST :                          80 - | *PADDING :                        0 - |
 PANCENTER :                     C0 - | *PANCENTRE :                     C0 - |
 PANLEFT :                       80 - | *PANNONE :                        0 - |
 PANRIGHT :                      40 - |  PSGDELTA :                       C - |
*RELAXED :                        0 - |  SMPS2ASMVER :                    1 - |
 SMPSNOATTACK :                  E7 - | *SMPSPITCH00 :                    0 - |
*SMPSPITCH01HI :                  C - | *SMPSPITCH01LO :                 F4 - |
*SMPSPITCH02HI :                 18 - | *SMPSPITCH02LO :                 E8 - |
*SMPSPITCH03HI :                 24 - | *SMPSPITCH03LO :                 DC - |
*SMPSPITCH04HI :                 30 - | *SMPSPITCH04LO :                 D0 - |
*SMPSPITCH05HI :                 3C - | *SMPSPITCH05LO :                 C4 - |
*SMPSPITCH06HI :                 48 - | *SMPSPITCH06LO :                 B8 - |
*SMPSPITCH07HI :                 54 - | *SMPSPITCH07LO :                 AC - |
*SMPSPITCH08HI :                 60 - | *SMPSPITCH08LO :                 A0 - |
*SMPSPITCH09HI :                 6C - | *SMPSPITCH09LO :                 94 - |
*SMPSPITCH10HI :                 78 - | *SMPSPITCH10LO :                 88 - |
 SONGSTART :                   9AC0 - |  SONICDRIVERVER :                 3 - |
 SOURCEDRIVER :                   3 - |  SOURCESMPS2ASM :                 0 - |
*STONE_01 :                       1 - |  STONE_02 :                       2 - |
 STONE_03 :                       3 - |  STONE_04 :                       4 - |
 STONE_05 :                       5 - |  STONE_06 :                       6 - |
*STONE_07 :                       7 - | *STONE_08 :                       8 - |
*STONE_09 :                       9 - | *STONE_0A :                       A - |
*STONE_0B :                       B - |  STONE_0C :                       C - |
*STONE_0D :                       D - | *STONE_0E :                       E - |
*STONE_0F :                       F - | *STONE_10 :                      10 - |
*STONE_11 :                      11 - |  STONE_12 :                      12 - |
*STONE_13 :                      13 - | *STONE_14 :                      14 - |
*STONE_15 :                      15 - | *STONE_16 :                      16 - |
*STONE_17 :                      17 - |  STONE_18 :                      18 - |
*STONE_19 :                      19 - | *STONE_1A :                      1A - |
*STONE_1B :                      1B - | *STONE_1C :                      1C - |
*STONE_1D :                      1D - |  STONE_1E :                      1E - |
*STONE_1F :                      1F - | *STONE_20 :                      20 - |
*STONE_21 :                      21 - | *STONE_22 :                      22 - |
*STONE_23 :                      23 - |  STONE_24 :                      24 - |
*STONE_25 :                      25 - | *STONE_26 :                      26 - |
*STONE_27 :                      27 - | *TIME :                   "23:7:44" - |
*TRACENUM :                       0 - | *TRUE :                           1 - |
 USE_S2_SAMPLES :                 1 - |  USE_S3D_SAMPLES :                1 - |
 USE_S3_SAMPLES :                 1 - |  USE_SK_SAMPLES :                 1 - |
 VCALGORITHM :                    7 - |  VCAM1 :                          0 - |
 VCAM2 :                          0 - |  VCAM3 :                          0 - |
 VCAM4 :                          0 - |  VCAR1 :                         1F - |
 VCAR2 :                         1F - |  VCAR3 :                         18 - |
 VCAR4 :                         1C - |  VCCF1 :                          2 - |
 VCCF2 :                          3 - |  VCCF3 :                          1 - |
 VCCF4 :                          6 - |  VCD1R1 :                         F - |
 VCD1R1UNK :                      0 - |  VCD1R2 :                         F - |
 VCD1R2UNK :                      0 - |  VCD1R3 :                         F - |
 VCD1R3UNK :                      0 - |  VCD1R4 :                        12 - |
 VCD1R4UNK :                      0 - |  VCD2R1 :                         0 - |
 VCD2R2 :                         0 - |  VCD2R3 :                         0 - |
 VCD2R4 :                         0 - |  VCDL1 :                          0 - |
 VCDL2 :                          0 - |  VCDL3 :                          0 - |
 VCDL4 :                          F - |  VCDT1 :                          2 - |
 VCDT2 :                          5 - |  VCDT3 :                          3 - |
 VCDT4 :                          6 - |  VCFEEDBACK :                     3 - |
 VCRR1 :                          F - |  VCRR2 :                          F - |
 VCRR3 :                          F - |  VCRR4 :                          F - |
 VCRS1 :                          0 - |  VCRS2 :                          0 - |
 VCRS3 :                          2 - |  VCRS4 :                          0 - |
 VCTL1 :                          B - |  VCTL2 :                          A - |
 VCTL3 :                          D - |  VCTL4 :                          C - |
 VCTLMASK1 :                     80 - |  VCTLMASK2 :                     80 - |
 VCTLMASK3 :                     80 - |  VCTLMASK4 :                     80 - |
 VCUNUSEDBITS :                   0 - | *VERSION :                     142F - |
 WALKIN_CALL00 :               8B54 C |  WALKIN_CALL01 :               8AB1 C |
 WALKIN_CALL02 :               8AC0 C |  WALKIN_CALL03 :               89F2 C |
 WALKIN_CALL04 :               8900 C |  WALKIN_CALL05 :               88C5 C |
 WALKIN_CALL06 :               8B01 C |  WALKIN_CALL07 :               88F1 C |
 WALKIN_DAC :                  8B2F C |  WALKIN_FM1 :                  88A3 C |
 WALKIN_FM2 :                  88E5 C |  WALKIN_FM3 :                  897C C |
 WALKIN_FM4 :                  8A19 C |  WALKIN_FM5 :                  8A96 C |
*WALKIN_HEADER :               8873 C |  WALKIN_JUMP00 :               8982 C |
 WALKIN_JUMP01 :               88E9 C |  WALKIN_JUMP02 :               88B2 C |
 WALKIN_JUMP03 :               8AD8 C |  WALKIN_LOOP00 :               8B36 C |
 WALKIN_LOOP01 :               8A9A C |  WALKIN_LOOP02 :               8A1F C |
 WALKIN_LOOP03 :               8B0F C |  WALKIN_LOOP04 :               8AE6 C |
 WALKIN_PSG1 :                 8ACF C |  WALKIN_PSG2 :                 8AE2 C |
 WALKIN_PSG3 :                 8B0B C |  WALKIN_VOICES :               8B5C C |
 ZEROOFFSETOPTIMIZATION :         0 - |

    578 symbols
    182 unused symbols

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 3 - 11/2/2023 23:7:44


  Defined Macros:
  ---------------

ALIGN                                 | ALIGN0                               
CHECKEDCHANNELPOINTER                 | CNOP                                 
CNOP0                                 | CONVERTMAINTEMPOMOD                  
DS                                    | EVEN                                 
INSN1OP                               | INSN2OP                              
ORG                                   | ORG0                                 
PSGPITCHCONVERT                       | SMPSALTERNATESMPS                    
SMPSALTERNOTE                         | SMPSALTERPITCH                       
SMPSALTERVOL                          | SMPSCALL                             
SMPSCHANGETRANSPOSITION               | SMPSCHANTEMPODIV                     
SMPSCLEARPUSH                         | SMPSCONDITIONALJUMP                  
SMPSCONTINUOUSLOOP                    | SMPSCOPYDATA                         
SMPSDETUNE                            | SMPSFADE                             
SMPSFM3SPECIALMODE                    | SMPSFMALTERVOL                       
SMPSFMFLUTTER                         | SMPSFMICOMMAND                       
SMPSFMVOICE                           | SMPSFMVOLENV                         
SMPSHALTMUSIC                         | SMPSHEADERCHAN                       
SMPSHEADERCHANSFX                     | SMPSHEADERDAC                        
SMPSHEADERFM                          | SMPSHEADERPSG                        
SMPSHEADERSFXCHANNEL                  | SMPSHEADERSTARTSONG                  
SMPSHEADERTEMPO                       | SMPSHEADERTEMPOSFX                   
SMPSHEADERVOICE                       | SMPSHEADERVOICENULL                  
SMPSHEADERVOICEUVB                    | SMPSJUMP                             
SMPSLOOP                              | SMPSMAXRELRATE                       
SMPSMODCHANGE                         | SMPSMODCHANGE2                       
SMPSMODOFF                            | SMPSMODON                            
SMPSMODSET                            | SMPSNOP                              
SMPSNOTEFILL                          | SMPSPAN                              
SMPSPLAYDACSAMPLE                     | SMPSPLAYSOUND                        
SMPSPSGALTERVOL                       | SMPSPSGFORM                          
SMPSPSGVOICE                          | SMPSRESETSPINDASHREV                 
SMPSRETURN                            | SMPSSETNOTE                          
SMPSSETTEMPODIV                       | SMPSSETTEMPOMOD                      
SMPSSETVOICE                          | SMPSSETVOL                           
SMPSSPINDASHREV                       | SMPSSSGEG                            
SMPSSTOP                              | SMPSSTOPFM                           
SMPSSTOPSPECIAL                       | SMPSVCALGORITHM                      
SMPSVCAMPMOD                          | SMPSVCATTACKRATE                     
SMPSVCCOARSEFREQ                      | SMPSVCDECAYLEVEL                     
SMPSVCDECAYRATE1                      | SMPSVCDECAYRATE2                     
SMPSVCDETUNE                          | SMPSVCFEEDBACK                       
SMPSVCRATESCALE                       | SMPSVCRELEASERATE                    
SMPSVCTOTALLEVEL                      | SMPSVCUNUSEDBITS                     
SMPSWEIRDD1LRR                        | STARTZ80                             
STOPZ80                               | TRACE                                
WAITZ80                               | _ADD                                 
_ADDQ                                 | _CLR                                 
_CMP                                  | _CMPI                                
_MOVE                                 | _TST                                 

     98 macros

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 4 - 11/2/2023 23:7:44


  Defined Functions:
  ------------------

S3TEMPOTOS2                           | S3TEMPOTOS1                          
S1TEMPOTOS3                           | S1TEMPOTOS2                          
S2TEMPOTOS3                           | S2TEMPOTOS1                          
CONV0TO256                            | SIGNEXTENDB                          
SIGNEXTEND                            | SIGNMASK                             
BIT                                   | CHKOP                                
NOTZ80                                | Z80_PTR                              

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 5 - 11/2/2023 23:7:44


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.28 seconds assembly time

   4108 lines source file
  15279 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
