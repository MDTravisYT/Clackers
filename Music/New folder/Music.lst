 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 1 - 11/2/2023 22:40:16


    1/       0 :                        z80_ptr function x,(x)<<8&$FF00|(x)>>8&$7F|$80
    2/       0 :                        
    3/       0 : =$0                    zeroOffsetOptimization	= 0
    4/       0 :                        
    5/       0 :                        	include "MacroSetup.asm"
(1)    1/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	listing purecode	; Want listing file, but only the final code in expanded macros
(1)    3/       0 :                     	page	0	; Don't want form feeds
(1)    4/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    5/       0 :                     
(1)    6/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)    7/       0 :                     
(1)    8/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)    9/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   10/       0 :                     org macro address
(1)   11/       0 :                     	if notZ80(MOMCPU)
(1)   12/       0 :                     		if address < *
(1)   13/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   14/       0 :                     		else
(1)   15/       0 :                     			!org address
(1)   16/       0 :                     		endif
(1)   17/       0 :                     	else
(1)   18/       0 :                     		if address < $
(1)   19/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   20/       0 :                     		else
(1)   21/       0 :                     			while address > $
(1)   22/       0 :                     				db 0
(1)   23/       0 :                     			endm
(1)   24/       0 :                     		endif
(1)   25/       0 :                     	endif
(1)   26/       0 :                         endm
(1)   27/       0 :                     
(1)   28/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   29/       0 :                     org0 macro address
(1)   30/       0 :                     .diff := address - *
(1)   31/       0 :                     	if .diff < 0
(1)   32/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-diff)} bytes)"
(1)   33/       0 :                     	else
(1)   34/       0 :                     		while .diff > 1024
(1)   35/       0 :                     			; AS can only generate 1 kb of code on a single line
(1)   36/       0 :                     			dc.b [1024]0
(1)   37/       0 :                     .diff := .diff - 1024
(1)   38/       0 :                     		endm
(1)   39/       0 :                     		dc.b [.diff]0
(1)   40/       0 :                     	endif
(1)   41/       0 :                         endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; define the cnop pseudo-instruction
(1)   44/       0 :                     cnop macro offset,alignment
(1)   45/       0 :                     	if notZ80(MOMCPU)
(1)   46/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   47/       0 :                     	else
(1)   48/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   49/       0 :                     	endif
(1)   50/       0 :                         endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   53/       0 :                     cnop0 macro offset,alignment
(1)   54/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   55/       0 :                         endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   58/       0 :                     align macro alignment
(1)   59/       0 :                     	cnop 0,alignment
(1)   60/       0 :                         endm
(1)   61/       0 :                     
(1)   62/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   63/       0 :                     align0 macro alignment
(1)   64/       0 :                     	cnop0 0,alignment
(1)   65/       0 :                         endm
(1)   66/       0 :                     
(1)   67/       0 :                     ; define the even pseudo-instruction
(1)   68/       0 :                     even macro
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if (*)&1
(1)   71/       0 :                     			dc.b 0 ;ds.b 1
(1)   72/       0 :                     		endif
(1)   73/       0 :                     	else
(1)   74/       0 :                     		if ($)&1
(1)   75/       0 :                     			db 0
(1)   76/       0 :                     		endif
(1)   77/       0 :                     	endif
(1)   78/       0 :                         endm
(1)   79/       0 :                     
(1)   80/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   81/       0 :                     ds macro
(1)   82/       0 :                     	if notZ80(MOMCPU)
(1)   83/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   84/       0 :                     	else
(1)   85/       0 :                     		rept ALLARGS
(1)   86/       0 :                     			db 0
(1)   87/       0 :                     		endm
(1)   88/       0 :                     	endif
(1)   89/       0 :                        endm
(1)   90/       0 :                     
(1)   91/       0 :                     ; define a trace macro
(1)   92/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   93/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   94/       0 :                     	if MOMPASS=1
(1)   95/       0 :                     		if ("ALLARGS"<>"")
(1)   96/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)   97/       0 :                     		else
(1)   98/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)   99/       0 :                     		endif
(1)  100/       0 :                     tracenum := (tracenum+1)
(1)  101/       0 :                     	endif
(1)  102/       0 :                        endm
(1)  103/       0 : =$0                 tracenum := 0
(1)  104/       0 :                     
(1)  106/       0 :                         ; disable a space optimization in AS so we can build a bit-perfect ROM
(1)  107/       0 :                         ; (the hard way, but it requires no modification of AS itself)
(1)  108/       0 :                     
(1)  109/       0 :                     
(1)  110/       0 :                     chkop function op,ref,(substr(lowstring(op),0,strlen(ref))<>ref)
(1)  111/       0 :                     
(1)  112/       0 :                     ; 1-arg instruction that's self-patching to remove 0-offset optimization
(1)  113/       0 :                     insn1op	 macro oper,x
(1)  114/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout(") && chkop("x","soundqueue.music0("))
(1)  115/       0 :                     		!oper	x
(1)  116/       0 :                     	  else
(1)  117/       0 :                     		!oper	1+x
(1)  118/       0 :                     		!org	*-1
(1)  119/       0 :                     		!dc.b	0
(1)  120/       0 :                     	  endif
(1)  121/       0 :                     	 endm
(1)  122/       0 :                     
(1)  123/       0 :                     ; 2-arg instruction that's self-patching to remove 0-offset optimization
(1)  124/       0 :                     insn2op	 macro oper,x,y
(1)  125/       0 :                     	  if (chkop("x","0(") && chkop("x","id(") && chkop("x","slot_rout(") && chkop("x","soundqueue.music0("))
(1)  126/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout(") && chkop("y","soundqueue.music0("))
(1)  127/       0 :                     			!oper	x,y
(1)  128/       0 :                     		  else
(1)  129/       0 :                     			!oper	x,1+y
(1)  130/       0 :                     			!org	*-1
(1)  131/       0 :                     			!dc.b	0
(1)  132/       0 :                     		  endif
(1)  133/       0 :                     	  else
(1)  134/       0 :                     		if chkop("y","d")
(1)  135/       0 :                     		  if (chkop("y","0(") && chkop("y","id(") && chkop("y","slot_rout(") && chkop("y","soundqueue.music0("))
(1)  136/       0 :                     start:
(1)  137/       0 :                     			!oper	1+x,y
(1)  138/       0 :                     end:
(1)  139/       0 :                     			!org	start+3
(1)  140/       0 :                     			!dc.b	0
(1)  141/       0 :                     			!org	end
(1)  142/       0 :                     		  else
(1)  143/       0 :                     			!oper	1+x,1+y
(1)  144/       0 :                     			!org	*-3
(1)  145/       0 :                     			!dc.b	0
(1)  146/       0 :                     			!org	*+1
(1)  147/       0 :                     			!dc.b	0
(1)  148/       0 :                     		  endif
(1)  149/       0 :                     		else
(1)  150/       0 :                     			!oper	1+x,y
(1)  151/       0 :                     			!org	*-1
(1)  152/       0 :                     			!dc.b	0
(1)  153/       0 :                     		endif
(1)  154/       0 :                     	  endif
(1)  155/       0 :                     	 endm
(1)  156/       0 :                     
(1)  157/       0 :                     	; instructions that were used with 0(a#) syntax
(1)  158/       0 :                     	; defined to assemble as they originally did
(1)  159/       0 :                     _move	macro
(1)  160/       0 :                     		insn2op move.ATTRIBUTE, ALLARGS
(1)  161/       0 :                     	endm
(1)  162/       0 :                     _add	macro
(1)  163/       0 :                     		insn2op add.ATTRIBUTE, ALLARGS
(1)  164/       0 :                     	endm
(1)  165/       0 :                     _addq	macro
(1)  166/       0 :                     		insn2op addq.ATTRIBUTE, ALLARGS
(1)  167/       0 :                     	endm
(1)  168/       0 :                     _cmp	macro
(1)  169/       0 :                     		insn2op cmp.ATTRIBUTE, ALLARGS
(1)  170/       0 :                     	endm
(1)  171/       0 :                     _cmpi	macro
(1)  172/       0 :                     		insn2op cmpi.ATTRIBUTE, ALLARGS
(1)  173/       0 :                     	endm
(1)  174/       0 :                     _clr	macro
(1)  175/       0 :                     		insn1op clr.ATTRIBUTE, ALLARGS
(1)  176/       0 :                     	endm
(1)  177/       0 :                     _tst	macro
(1)  178/       0 :                     		insn1op tst.ATTRIBUTE, ALLARGS
(1)  179/       0 :                     	endm
(1)  180/       0 :                     
(1)  207/       0 :                     
(1)  208/       0 :                     bit function nBits,1<<(nBits-1)
(1)  209/       0 :                     signmask function val,nBits,-((-(val&bit(nBits)))&bit(nBits))
(1)  210/       0 :                     signextend function val,nBits,(val+signmask(val,nBits))!signmask(val,nBits)
(1)  211/       0 :                     signextendB function val,signextend(val,8)
    6/       0 :                        	include "Macros.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; start the Z80
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     startZ80:       macro
(1)    5/       0 :                     		move.w	#0,(z80_bus_request).l
(1)    6/       0 :                     		endm
(1)    7/       0 :                     
(1)    8/       0 :                     ; ---------------------------------------------------------------------------
(1)    9/       0 :                     ; stop the Z80
(1)   10/       0 :                     ; ---------------------------------------------------------------------------
(1)   11/       0 :                     stopZ80:        macro
(1)   12/       0 :                     		move.w	#$100,(z80_bus_request).l
(1)   13/       0 :                     		endm
(1)   14/       0 :                     
(1)   15/       0 :                     ; ---------------------------------------------------------------------------
(1)   16/       0 :                     ; wait for Z80 to stop
(1)   17/       0 :                     ; ---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     waitZ80:	macro
(1)   20/       0 :                     .wait:		btst	#0,(z80_bus_request).l
(1)   21/       0 :                     		bne.s	.wait
(1)   22/       0 :                     		endm
    7/       0 :                        
    8/       0 : =$3                    SonicDriverVer			= 3
    9/       0 :                        
   10/       0 : =$1                    use_s2_samples			= 1
   11/       0 :                        
   12/       0 : =$1                    use_s3d_samples			= 1
   13/       0 :                        
   14/       0 : =$1                    use_s3_samples			= 1
   15/       0 :                        
   16/       0 : =$1                    use_sk_samples			= 1
   17/       0 :                        		include		"_smps2asm_inc.asm"
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(1)    3/       0 :                     ; ===========================================================================
(1)    4/       0 :                     ; Permission to use, copy, modify, and/or distribute this software for any
(1)    5/       0 :                     ; purpose with or without fee is hereby granted.
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(1)    8/       0 :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(1)    9/       0 :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(1)   10/       0 :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(1)   11/       0 :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(1)   12/       0 :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(1)   13/       0 :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(1)   14/       0 :                     ; ===========================================================================
(1)   15/       0 :                     
(1)   16/       0 : =$1                 SMPS2ASMVer	= 1
(1)   17/       0 :                     
(1)   18/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)   19/       0 : =$C                 psgdelta	EQU 12
(1)   20/       0 :                     ; ---------------------------------------------------------------------------
(1)   21/       0 :                     ; Standard Octave Pitch Equates
(1)   22/       0 : =$88..$B8           	enum smpsPitch10lo=$88,smpsPitch09lo=$94,smpsPitch08lo=$A0,smpsPitch07lo=$AC,smpsPitch06lo=$B8
(1)   23/       0 : =$C4..$F4           	enum smpsPitch05lo=$C4,smpsPitch04lo=$D0,smpsPitch03lo=$DC,smpsPitch02lo=$E8,smpsPitch01lo=$F4
(1)   24/       0 : =$0..$30            	enum smpsPitch00=$00,smpsPitch01hi=$0C,smpsPitch02hi=$18,smpsPitch03hi=$24,smpsPitch04hi=$30
(1)   25/       0 : =$3C..$6C           	enum smpsPitch05hi=$3C,smpsPitch06hi=$48,smpsPitch07hi=$54,smpsPitch08hi=$60,smpsPitch09hi=$6C
(1)   26/       0 : =$78                	enum smpsPitch10hi=$78
(1)   27/       0 :                     ; ---------------------------------------------------------------------------
(1)   28/       0 :                     ; Note Equates
(1)   29/       0 : =$80..$8F           	enum nRst=$80+0,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(1)   30/       0 : =$90..$9F           	enum nEb1=nD1+1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(1)   31/       0 : =$A0..$AF           	enum nG2=nFs2+1,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(1)   32/       0 : =$B0..$BF           	enum nB3=nBb3+1,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(1)   33/       0 : =$C0..$CF           	enum nEb5=nD5+1,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(1)   34/       0 : =$D0..$DF           	enum nG6=nFs6+1,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(1)   35/       0 :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(1)   36/       0 :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(1)   37/       0 :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(1)   38/       0 :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(1)   44/       0 : =$C7                nMaxPSG				EQU nBb6-psgdelta
(1)   45/       0 : =$D3                nMaxPSG1			EQU nBb6
(1)   46/       0 : =$D4                nMaxPSG2			EQU nB6
(1)   48/       0 :                     ; ---------------------------------------------------------------------------
(1)   49/       0 :                     ; PSG volume envelope equates
(1)   58/       0 : =$1..$6             		enum sTone_01=$01,sTone_02,sTone_03,sTone_04,sTone_05,sTone_06
(1)   59/       0 : =$7..$C             		enum sTone_07=sTone_06+1,sTone_08,sTone_09,sTone_0A,sTone_0B,sTone_0C
(1)   60/       0 : =$D..$12            		enum sTone_0D=sTone_0C+1,sTone_0E,sTone_0F,sTone_10,sTone_11,sTone_12
(1)   61/       0 : =$13..$18           		enum sTone_13=sTone_12+1,sTone_14,sTone_15,sTone_16,sTone_17,sTone_18
(1)   62/       0 : =$19..$1E           		enum sTone_19=sTone_18+1,sTone_1A,sTone_1B,sTone_1C,sTone_1D,sTone_1E
(1)   63/       0 : =$1F..$24           		enum sTone_1F=sTone_1E+1,sTone_20,sTone_21,sTone_22,sTone_23,sTone_24
(1)   64/       0 : =$25..$27           		enum sTone_25=sTone_24+1,sTone_26,sTone_27
(1)   65/       0 :                     		; For conversions:
(1)   72/       0 :                     ; ---------------------------------------------------------------------------
(1)   73/       0 :                     ; DAC Equates
(1)   83/       0 : =$81..$87           			enum dSnareS3=$81,dHighTom,dMidTomS3,dLowTomS3,dFloorTomS3,dKickS3,dMuffledSnare
(1)   84/       0 : =$88..$8C           			enum dCrashCymbal=dMuffledSnare+1,dRideCymbal,dLowMetalHit,dMetalHit,dHighMetalHit
(1)   85/       0 : =$8D..$90           			enum dHigherMetalHit=dHighMetalHit+1,dMidMetalHit,dClapS3,dElectricHighTom
(1)   86/       0 : =$91..$93           			enum dElectricMidTom=dElectricHighTom+1,dElectricLowTom,dElectricFloorTom
(1)   87/       0 : =$94..$97           			enum dTightSnare=dElectricFloorTom+1,dMidpitchSnare,dLooseSnare,dLooserSnare
(1)   88/       0 : =$98..$9B           			enum dHiTimpaniS3=dLooserSnare+1,dLowTimpaniS3,dMidTimpaniS3,dQuickLooseSnare
(1)   89/       0 : =$9C..$9E           			enum dClick=dQuickLooseSnare+1,dPowerKick,dQuickGlassCrash
(1)   92/       0 : =$9F..$A2           			enum dGlassCrashSnare=dQuickGlassCrash+1,dGlassCrash,dGlassCrashKick,dQuietGlassCrash
(1)   93/       0 : =$A3..$A7           			enum dOddSnareKick=dQuietGlassCrash+1,dKickExtraBass,dComeOn,dDanceSnare,dLooseKick
(1)   94/       0 : =$A8..$AE           			enum dModLooseKick=dLooseKick+1,dWoo,dGo,dSnareGo,dPowerTom,dHiWoodBlock,dLowWoodBlock
(1)   95/       0 : =$AF..$B2           			enum dHiHitDrum=dLowWoodBlock+1,dLowHitDrum,dMetalCrashHit,dEchoedClapHit
(1)   96/       0 : =$B3..$B5           			enum dLowerEchoedClapHit=dEchoedClapHit+1,dHipHopHitKick,dHipHopHitPowerKick
(1)   97/       0 : =$B6..$B9           			enum dBassHey=dHipHopHitPowerKick+1,dDanceStyleKick,dHipHopHitKick2,dHipHopHitKick3
(1)   98/       0 : =$BA..$BD           			enum dReverseFadingWind=dHipHopHitKick3+1,dScratchS3,dLooseSnareNoise,dPowerKick2
(1)   99/       0 : =$BE..$C1           			enum dCrashingNoiseWoo=dPowerKick2+1,dQuickHit,dKickHey,dPowerKickHit
(1)  100/       0 : =$C2..$C4           			enum dLowPowerKickHit=dPowerKickHit+1,dLowerPowerKickHit,dLowestPowerKickHit
(1)  102/       0 :                     		; For conversions:
(1)  105/       0 : =$C5                				enum dKick=dLowestPowerKickHit+1
(1)  111/       0 : =$C6..$CD           			enum dSnare=dKick+1,dClap,dScratch,dTimpani,dHiTom,dVLowClap,dHiTimpani,dMidTimpani
(1)  112/       0 : =$CE..$D3           			enum dLowTimpani=dMidTimpani+1,dVLowTimpani,dMidTom,dLowTom,dFloorTom,dHiClap
(1)  113/       0 : =$D4..$D5           			enum dMidClap=dHiClap+1,dLowClap
(1)  117/       0 : =$D6..$D7           				enum dFinalFightMetalCrash=dLowClap+1,dIntroKick
(1)  126/       0 : =$D8..$D9           				enum dEchoedClapHit_S3=dIntroKick+1,dLowerEchoedClapHit_S3
(1)  134/       0 :                     ; ---------------------------------------------------------------------------
(1)  135/       0 :                     ; Channel IDs for SFX
(1)  136/       0 : =$80                cPSG1				EQU $80
(1)  137/       0 : =$A0                cPSG2				EQU $A0
(1)  138/       0 : =$C0                cPSG3				EQU $C0
(1)  139/       0 : =$E0                cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(1)  140/       0 : =$2                 cFM3				EQU $02
(1)  141/       0 : =$4                 cFM4				EQU $04
(1)  142/       0 : =$5                 cFM5				EQU $05
(1)  143/       0 : =$6                 cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(1)  144/       0 :                     ; ---------------------------------------------------------------------------
(1)  145/       0 :                     ; Conversion macros and functions
(1)  146/       0 :                     
(1)  147/       0 :                     conv0To256  function n,((n==0)<<8)|n
(1)  148/       0 :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(1)  149/       0 :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(1)  150/       0 :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(1)  151/       0 :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(1)  152/       0 :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(1)  153/       0 :                     s3TempotoS2 function n,s2TempotoS3(n)
(1)  154/       0 :                     
(1)  155/       0 :                     convertMainTempoMod macro mod
(1)  156/       0 :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(1)  157/       0 :                     		dc.b	mod
(1)  158/       0 :                     	elseif SourceDriver==1
(1)  159/       0 :                     		if mod==1
(1)  160/       0 :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(1)  161/       0 :                     		endif
(1)  162/       0 :                     		if SonicDriverVer==2
(1)  163/       0 :                     			dc.b	s1TempotoS2(mod)
(1)  164/       0 :                     		else;if SonicDriverVer>=3
(1)  165/       0 :                     			dc.b	s1TempotoS3(mod)
(1)  166/       0 :                     		endif
(1)  167/       0 :                     	elseif SourceDriver==2
(1)  168/       0 :                     		if mod==0
(1)  169/       0 :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(1)  170/       0 :                     		endif
(1)  171/       0 :                     		if SonicDriverVer==1
(1)  172/       0 :                     			dc.b	s2TempotoS1(mod)
(1)  173/       0 :                     		else;if SonicDriverVer>=3
(1)  174/       0 :                     			dc.b	s2TempotoS3(mod)
(1)  175/       0 :                     		endif
(1)  176/       0 :                     	else;if SourceDriver>=3
(1)  177/       0 :                     		if mod==0
(1)  178/       0 :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(1)  179/       0 :                     		endif
(1)  180/       0 :                     		if SonicDriverVer==1
(1)  181/       0 :                     			dc.b	s3TempotoS1(mod)
(1)  182/       0 :                     		else;if SonicDriverVer==2
(1)  183/       0 :                     			dc.b	s3TempotoS2(mod)
(1)  184/       0 :                     		endif
(1)  185/       0 :                     	endif
(1)  186/       0 :                     	endm
(1)  187/       0 :                     
(1)  188/       0 :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(1)  189/       0 :                     PSGPitchConvert macro pitch
(1)  190/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  191/       0 :                     		dc.b	(pitch+psgdelta)&$FF
(1)  192/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  193/       0 :                     		dc.b	(pitch-psgdelta)&$FF
(1)  194/       0 :                     	else
(1)  195/       0 :                     		dc.b	pitch
(1)  196/       0 :                     	endif
(1)  197/       0 :                     	endm
(1)  198/       0 :                     
(1)  199/       0 :                     CheckedChannelPointer macro loc
(1)  200/       0 :                     	if SonicDriverVer<>1
(1)  201/       0 :                     		dc.w	z80_ptr(loc)
(1)  202/       0 :                     	else
(1)  203/       0 :                     		if MOMPASS==2
(1)  204/       0 :                     			if loc<songStart
(1)  205/       0 :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(1)  206/       0 :                     			endif
(1)  207/       0 :                     		endif
(1)  208/       0 :                     		dc.w	loc-songStart
(1)  209/       0 :                     	endif
(1)  210/       0 :                     	endm
(1)  211/       0 :                     ; ---------------------------------------------------------------------------
(1)  212/       0 :                     ; Header Macros
(1)  213/       0 :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(1)  214/       0 :                     
(1)  215/       0 :                     SourceDriver set ver
(1)  216/       0 :                     
(1)  217/       0 :                     	if ("sourcesmps2asmver"<>"")
(1)  218/       0 :                     SourceSMPS2ASM set sourcesmps2asmver
(1)  219/       0 :                     	else
(1)  220/       0 :                     SourceSMPS2ASM set 0
(1)  221/       0 :                     	endif
(1)  222/       0 :                     
(1)  223/       0 :                     songStart set *
(1)  224/       0 :                     
(1)  225/       0 :                     	if MOMPASS==2
(1)  226/       0 :                     	if SMPS2ASMVer < SourceSMPS2ASM
(1)  227/       0 :                     	message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(1)  228/       0 :                     	endif
(1)  229/       0 :                     	endif
(1)  230/       0 :                     
(1)  231/       0 :                     	endm
(1)  232/       0 :                     
(1)  233/       0 :                     smpsHeaderVoiceNull macro
(1)  234/       0 :                     	if songStart<>*
(1)  235/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  236/       0 :                     	endif
(1)  237/       0 :                     	dc.w	$0000
(1)  238/       0 :                     	endm
(1)  239/       0 :                     
(1)  240/       0 :                     ; Header - Set up Voice Location
(1)  241/       0 :                     ; Common to music and SFX
(1)  242/       0 :                     smpsHeaderVoice macro loc
(1)  243/       0 :                     	if songStart<>*
(1)  244/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  245/       0 :                     	endif
(1)  246/       0 :                     	if SonicDriverVer<>1
(1)  247/       0 :                     		dc.w	z80_ptr(loc)
(1)  248/       0 :                     	else
(1)  249/       0 :                     		if MOMPASS==2
(1)  250/       0 :                     		if loc<songStart
(1)  251/       0 :                     			fatal "Voice banks for Sonic 1 songs must come after the song"
(1)  252/       0 :                     		endif
(1)  253/       0 :                     		endif
(1)  254/       0 :                     		dc.w	loc-songStart
(1)  255/       0 :                     	endif
(1)  256/       0 :                     	endm
(1)  257/       0 :                     
(1)  258/       0 :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(1)  259/       0 :                     ; Common to music and SFX
(1)  260/       0 :                     smpsHeaderVoiceUVB macro
(1)  261/       0 :                     	if songStart<>*
(1)  262/       0 :                     		fatal "Missing smpsHeaderStartSong"
(1)  263/       0 :                     	endif
(1)  264/       0 :                     	if SonicDriverVer>=5
(1)  265/       0 :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(1)  266/       0 :                     	elseif SonicDriverVer>=3
(1)  267/       0 :                     		dc.w	little_endian(z80_UniVoiceBank)
(1)  268/       0 :                     	else
(1)  269/       0 :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(1)  270/       0 :                     	endif
(1)  271/       0 :                     	endm
(1)  272/       0 :                     
(1)  273/       0 :                     ; Header macros for music (not for SFX)
(1)  274/       0 :                     ; Header - Set up Channel Usage
(1)  275/       0 :                     smpsHeaderChan macro fm,psg
(1)  276/       0 :                     	dc.b	fm,psg
(1)  277/       0 :                     	endm
(1)  278/       0 :                     
(1)  279/       0 :                     ; Header - Set up Tempo
(1)  280/       0 :                     smpsHeaderTempo macro div,mod
(1)  281/       0 :                     	dc.b	div
(1)  282/       0 :                     	convertMainTempoMod mod
(1)  283/       0 :                     	endm
(1)  284/       0 :                     
(1)  285/       0 :                     ; Header - Set up DAC Channel
(1)  286/       0 :                     smpsHeaderDAC macro loc,pitch,vol
(1)  287/       0 :                     	CheckedChannelPointer loc
(1)  288/       0 :                     	if ("pitch"<>"")
(1)  289/       0 :                     		dc.b	pitch
(1)  290/       0 :                     		if ("vol"<>"")
(1)  291/       0 :                     			dc.b	vol
(1)  292/       0 :                     		else
(1)  293/       0 :                     			dc.b	$00
(1)  294/       0 :                     		endif
(1)  295/       0 :                     	else
(1)  296/       0 :                     		dc.w	$00
(1)  297/       0 :                     	endif
(1)  298/       0 :                     	endm
(1)  299/       0 :                     
(1)  300/       0 :                     ; Header - Set up FM Channel
(1)  301/       0 :                     smpsHeaderFM macro loc,pitch,vol
(1)  302/       0 :                     	CheckedChannelPointer loc
(1)  303/       0 :                     	dc.b	pitch,vol
(1)  304/       0 :                     	endm
(1)  305/       0 :                     
(1)  306/       0 :                     ; Header - Set up PSG Channel
(1)  307/       0 :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(1)  308/       0 :                     	CheckedChannelPointer loc
(1)  309/       0 :                     	PSGPitchConvert pitch
(1)  310/       0 :                     	dc.b	vol,mod,voice
(1)  311/       0 :                     	endm
(1)  312/       0 :                     
(1)  313/       0 :                     ; Header macros for SFX (not for music)
(1)  314/       0 :                     ; Header - Set up Tempo
(1)  315/       0 :                     smpsHeaderTempoSFX macro div
(1)  316/       0 :                     	dc.b	div
(1)  317/       0 :                     	endm
(1)  318/       0 :                     
(1)  319/       0 :                     ; Header - Set up Channel Usage
(1)  320/       0 :                     smpsHeaderChanSFX macro chan
(1)  321/       0 :                     	dc.b	chan
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; Header - Set up FM Channel
(1)  325/       0 :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(1)  326/       0 :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(1)  327/       0 :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(1)  328/       0 :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(1)  329/       0 :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(1)  330/       0 :                     	endif
(1)  331/       0 :                     	dc.b	$80,chanid
(1)  332/       0 :                     	CheckedChannelPointer loc
(1)  333/       0 :                     	if (chanid&$80)<>0
(1)  334/       0 :                     		PSGPitchConvert pitch
(1)  335/       0 :                     	else
(1)  336/       0 :                     		dc.b	pitch
(1)  337/       0 :                     	endif
(1)  338/       0 :                     	dc.b	vol
(1)  339/       0 :                     	endm
(1)  340/       0 :                     ; ---------------------------------------------------------------------------
(1)  341/       0 :                     ; Co-ord Flag Macros and Equates
(1)  342/       0 :                     ; E0xx - Panning, AMS, FMS
(1)  343/       0 :                     smpsPan macro direction,amsfms
(1)  344/       0 :                     panNone set $00
(1)  345/       0 :                     panRight set $40
(1)  346/       0 :                     panLeft set $80
(1)  347/       0 :                     panCentre set $C0
(1)  348/       0 :                     panCenter set $C0 ; silly Americans :U
(1)  349/       0 :                     	dc.b $E0,direction+amsfms
(1)  350/       0 :                     	endm
(1)  351/       0 :                     
(1)  352/       0 :                     ; E1xx - Set channel detune to val
(1)  353/       0 :                     smpsDetune macro val
(1)  354/       0 :                     	dc.b	$E1,val
(1)  355/       0 :                     	endm
(1)  356/       0 :                     
(1)  357/       0 :                     ; E2xx - Useless
(1)  358/       0 :                     smpsNop macro val
(1)  359/       0 :                     	if SonicDriverVer<3
(1)  360/       0 :                     		dc.b	$E2,val
(1)  361/       0 :                     	endif
(1)  362/       0 :                     	endm
(1)  363/       0 :                     
(1)  364/       0 :                     ; Return (used after smpsCall)
(1)  365/       0 :                     smpsReturn macro val
(1)  366/       0 :                     	if SonicDriverVer>=3
(1)  367/       0 :                     		dc.b	$F9
(1)  368/       0 :                     	else
(1)  369/       0 :                     		dc.b	$E3
(1)  370/       0 :                     	endif
(1)  371/       0 :                     	endm
(1)  372/       0 :                     
(1)  373/       0 :                     ; Fade in previous song (ie. 1-Up)
(1)  374/       0 :                     smpsFade macro val
(1)  375/       0 :                     	if SonicDriverVer>=3
(1)  376/       0 :                     		dc.b	$E2
(1)  377/       0 :                     		if ("val"<>"")
(1)  378/       0 :                     			dc.b	val
(1)  379/       0 :                     		else
(1)  380/       0 :                     			dc.b	$FF
(1)  381/       0 :                     		endif
(1)  382/       0 :                     		if SourceDriver<3
(1)  383/       0 :                     			smpsStop
(1)  384/       0 :                     		endif
(1)  385/       0 :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(1)  386/       0 :                     		; This is one of those weird S3+ "fades" that we don't need
(1)  387/       0 :                     	else
(1)  388/       0 :                     		dc.b	$E4
(1)  389/       0 :                     	endif
(1)  390/       0 :                     	endm
(1)  391/       0 :                     
(1)  392/       0 :                     ; E5xx - Set channel tempo divider to xx
(1)  393/       0 :                     smpsChanTempoDiv macro val
(1)  394/       0 :                     	if SonicDriverVer>=5
(1)  395/       0 :                     		; New flag unique to Flamewing's modified S&K driver
(1)  396/       0 :                     		dc.b	$FF,$08,val
(1)  397/       0 :                     	elseif SonicDriverVer==3
(1)  398/       0 :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(1)  399/       0 :                     	else
(1)  400/       0 :                     		dc.b	$E5,val
(1)  401/       0 :                     	endif
(1)  402/       0 :                     	endm
(1)  403/       0 :                     
(1)  404/       0 :                     ; E6xx - Alter Volume by xx
(1)  405/       0 :                     smpsAlterVol macro val
(1)  406/       0 :                     	dc.b	$E6,val
(1)  407/       0 :                     	endm
(1)  408/       0 :                     
(1)  409/       0 :                     ; E7 - Prevent attack of next note
(1)  410/       0 : =$E7                smpsNoAttack	EQU $E7
(1)  411/       0 :                     
(1)  412/       0 :                     ; E8xx - Set note fill to xx
(1)  413/       0 :                     smpsNoteFill macro val
(1)  414/       0 :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(1)  415/       0 :                     		; Unique to Flamewing's modified driver
(1)  416/       0 :                     		dc.b	$FF,$0A,val
(1)  417/       0 :                     	else
(1)  418/       0 :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  419/       0 :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  420/       0 :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  421/       0 :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(1)  422/       0 :                     		endif
(1)  423/       0 :                     		dc.b	$E8,val
(1)  424/       0 :                     	endif
(1)  425/       0 :                     	endm
(1)  426/       0 :                     
(1)  427/       0 :                     ; Add xx to channel pitch
(1)  428/       0 :                     smpsChangeTransposition macro val
(1)  429/       0 :                     	if SonicDriverVer>=3
(1)  430/       0 :                     		dc.b	$FB,val
(1)  431/       0 :                     	else
(1)  432/       0 :                     		dc.b	$E9,val
(1)  433/       0 :                     	endif
(1)  434/       0 :                     	endm
(1)  435/       0 :                     
(1)  436/       0 :                     ; Set music tempo modifier to xx
(1)  437/       0 :                     smpsSetTempoMod macro mod
(1)  438/       0 :                     	if SonicDriverVer>=3
(1)  439/       0 :                     		dc.b	$FF,$00
(1)  440/       0 :                     	else
(1)  441/       0 :                     		dc.b	$EA
(1)  442/       0 :                     	endif
(1)  443/       0 :                     	convertMainTempoMod mod
(1)  444/       0 :                     	endm
(1)  445/       0 :                     
(1)  446/       0 :                     ; Set music tempo divider to xx
(1)  447/       0 :                     smpsSetTempoDiv macro val
(1)  448/       0 :                     	if SonicDriverVer>=3
(1)  449/       0 :                     		dc.b	$FF,$04,val
(1)  450/       0 :                     	else
(1)  451/       0 :                     		dc.b	$EB,val
(1)  452/       0 :                     	endif
(1)  453/       0 :                     	endm
(1)  454/       0 :                     
(1)  455/       0 :                     ; ECxx - Set Volume to xx
(1)  456/       0 :                     smpsSetVol macro val
(1)  457/       0 :                     	if SonicDriverVer>=3
(1)  458/       0 :                     		dc.b	$E4,val
(1)  459/       0 :                     	else
(1)  460/       0 :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(1)  461/       0 :                     	endif
(1)  462/       0 :                     	endm
(1)  463/       0 :                     
(1)  464/       0 :                     ; Works on all drivers
(1)  465/       0 :                     smpsPSGAlterVol macro vol
(1)  466/       0 :                     	dc.b	$EC,vol
(1)  467/       0 :                     	endm
(1)  468/       0 :                     
(1)  469/       0 :                     ; Clears pushing sound flag in S1
(1)  470/       0 :                     smpsClearPush macro
(1)  471/       0 :                     	if SonicDriverVer==1
(1)  472/       0 :                     		dc.b	$ED
(1)  473/       0 :                     	else
(1)  474/       0 :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(1)  475/       0 :                     	endif
(1)  476/       0 :                     	endm
(1)  477/       0 :                     
(1)  478/       0 :                     ; Stops special SFX (S1 only) and restarts overridden music track
(1)  479/       0 :                     smpsStopSpecial macro
(1)  480/       0 :                     	if SonicDriverVer==1
(1)  481/       0 :                     		dc.b	$EE
(1)  482/       0 :                     	else
(1)  483/       0 :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(1)  484/       0 :                     		smpsStop
(1)  485/       0 :                     	endif
(1)  486/       0 :                     	endm
(1)  487/       0 :                     
(1)  488/       0 :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(1)  489/       0 :                     smpsFMvoice macro voice,songID
(1)  490/       0 :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(1)  491/       0 :                     		dc.b	$EF,voice|$80,songID+$81
(1)  492/       0 :                     	else
(1)  493/       0 :                     		dc.b	$EF,voice
(1)  494/       0 :                     	endif
(1)  495/       0 :                     	endm
(1)  496/       0 :                     
(1)  497/       0 :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(1)  498/       0 :                     smpsModSet macro wait,speed,change,step
(1)  499/       0 :                     	dc.b	$F0
(1)  500/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  501/       0 :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(1)  502/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(1)  503/       0 :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(1)  504/       0 :                     	else
(1)  505/       0 :                     		dc.b	wait,speed,change,step
(1)  506/       0 :                     	endif
(1)  507/       0 :                     	;dc.b	speed,change,step
(1)  508/       0 :                     	endm
(1)  509/       0 :                     
(1)  510/       0 :                     ; Turn on Modulation
(1)  511/       0 :                     smpsModOn macro type
(1)  512/       0 :                     	if SonicDriverVer>=3
(1)  513/       0 :                     		if "type"<>""
(1)  514/       0 :                     			dc.b	$F4,type
(1)  515/       0 :                     		else
(1)  516/       0 :                     			dc.b	$F4,$80
(1)  517/       0 :                     		endif
(1)  518/       0 :                     	else
(1)  519/       0 :                     		dc.b	$F1
(1)  520/       0 :                     	endif
(1)  521/       0 :                     	endm
(1)  522/       0 :                     
(1)  523/       0 :                     ; F2 - End of channel
(1)  524/       0 :                     smpsStop macro
(1)  525/       0 :                     	dc.b	$F2
(1)  526/       0 :                     	endm
(1)  527/       0 :                     
(1)  528/       0 :                     ; F3xx - PSG waveform to xx
(1)  529/       0 :                     smpsPSGform macro form
(1)  530/       0 :                     	dc.b	$F3,form
(1)  531/       0 :                     	endm
(1)  532/       0 :                     
(1)  533/       0 :                     ; Turn off Modulation
(1)  534/       0 :                     smpsModOff macro
(1)  535/       0 :                     	if SonicDriverVer>=3
(1)  536/       0 :                     		dc.b	$FA
(1)  537/       0 :                     	else
(1)  538/       0 :                     		dc.b	$F4
(1)  539/       0 :                     	endif
(1)  540/       0 :                     	endm
(1)  541/       0 :                     
(1)  542/       0 :                     ; F5xx - PSG voice to xx
(1)  543/       0 :                     smpsPSGvoice macro voice
(1)  544/       0 :                     	dc.b	$F5,voice
(1)  545/       0 :                     	endm
(1)  546/       0 :                     
(1)  547/       0 :                     ; F6xxxx - Jump to xxxx
(1)  548/       0 :                     smpsJump macro loc
(1)  549/       0 :                     	dc.b	$F6
(1)  550/       0 :                     	if SonicDriverVer<>1
(1)  551/       0 :                     		dc.w	z80_ptr(loc)
(1)  552/       0 :                     	else
(1)  553/       0 :                     		dc.w	loc-*-1
(1)  554/       0 :                     	endif
(1)  555/       0 :                     	endm
(1)  556/       0 :                     
(1)  557/       0 :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(1)  558/       0 :                     smpsLoop macro index,loops,loc
(1)  559/       0 :                     	dc.b	$F7
(1)  560/       0 :                     	dc.b	index,loops
(1)  561/       0 :                     	if SonicDriverVer<>1
(1)  562/       0 :                     		dc.w	z80_ptr(loc)
(1)  563/       0 :                     	else
(1)  564/       0 :                     		dc.w	loc-*-1
(1)  565/       0 :                     	endif
(1)  566/       0 :                     	endm
(1)  567/       0 :                     
(1)  568/       0 :                     ; F8xxxx - Call pattern at xxxx, saving return point
(1)  569/       0 :                     smpsCall macro loc
(1)  570/       0 :                     	dc.b	$F8
(1)  571/       0 :                     	if SonicDriverVer<>1
(1)  572/       0 :                     		dc.w	z80_ptr(loc)
(1)  573/       0 :                     	else
(1)  574/       0 :                     		dc.w	loc-*-1
(1)  575/       0 :                     	endif
(1)  576/       0 :                     	endm
(1)  577/       0 :                     ; ---------------------------------------------------------------------------
(1)  578/       0 :                     ; Alter Volume
(1)  579/       0 :                     smpsFMAlterVol macro val1,val2
(1)  580/       0 :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(1)  581/       0 :                     		dc.b	$E5,val1,val2
(1)  582/       0 :                     	else
(1)  583/       0 :                     		dc.b	$E6,val1
(1)  584/       0 :                     	endif
(1)  585/       0 :                     	endm
(1)  586/       0 :                     
(1)  587/       0 :                     ; S3/S&K/S3D-only coordination flags
(1)  589/       0 :                     ; Silences FM channel then stops as per smpsStop
(1)  590/       0 :                     smpsStopFM macro
(1)  591/       0 :                     	dc.b	$E3
(1)  592/       0 :                     	endm
(1)  593/       0 :                     
(1)  594/       0 :                     ; Spindash Rev
(1)  595/       0 :                     smpsSpindashRev macro
(1)  596/       0 :                     	dc.b	$E9
(1)  597/       0 :                     	endm
(1)  598/       0 :                     
(1)  599/       0 :                     smpsPlayDACSample macro sample
(1)  600/       0 :                     	dc.b	$EA,(sample&$7F)
(1)  601/       0 :                     	endm
(1)  602/       0 :                     
(1)  603/       0 :                     smpsConditionalJump macro index,loc
(1)  604/       0 :                     	dc.b	$EB
(1)  605/       0 :                     	dc.b	index
(1)  606/       0 :                     	dc.w	z80_ptr(loc)
(1)  607/       0 :                     	endm
(1)  608/       0 :                     
(1)  609/       0 :                     ; Set note values to xx-$40
(1)  610/       0 :                     smpsSetNote macro val
(1)  611/       0 :                     	dc.b	$ED,val
(1)  612/       0 :                     	endm
(1)  613/       0 :                     
(1)  614/       0 :                     smpsFMICommand macro reg,val
(1)  615/       0 :                     	dc.b	$EE,reg,val
(1)  616/       0 :                     	endm
(1)  617/       0 :                     
(1)  618/       0 :                     ; Set Modulation
(1)  619/       0 :                     smpsModChange2 macro fmmod,psgmod
(1)  620/       0 :                     	dc.b	$F1,fmmod,psgmod
(1)  621/       0 :                     	endm
(1)  622/       0 :                     
(1)  623/       0 :                     ; Set Modulation
(1)  624/       0 :                     smpsModChange macro val
(1)  625/       0 :                     	dc.b	$F4,val
(1)  626/       0 :                     	endm
(1)  627/       0 :                     
(1)  628/       0 :                     ; FCxxxx - Jump to xxxx
(1)  629/       0 :                     smpsContinuousLoop macro loc
(1)  630/       0 :                     	dc.b	$FC
(1)  631/       0 :                     	dc.w	z80_ptr(loc)
(1)  632/       0 :                     	endm
(1)  633/       0 :                     
(1)  634/       0 :                     smpsAlternateSMPS macro flag
(1)  635/       0 :                     	dc.b	$FD,flag
(1)  636/       0 :                     	endm
(1)  637/       0 :                     
(1)  638/       0 :                     smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
(1)  639/       0 :                     	dc.b	$FE,ind1,ind2,ind3,ind4
(1)  640/       0 :                     	endm
(1)  641/       0 :                     
(1)  642/       0 :                     smpsPlaySound macro index
(1)  643/       0 :                     	if SonicDriverVer>=5
(1)  644/       0 :                     		message "smpsPlaySound only plays SFX in Flamedriver; use smpsPlayMusic to play music or fade effects."
(1)  645/       0 :                     	endif
(1)  646/       0 :                     	dc.b	$FF,$01,index
(1)  647/       0 :                     	endm
(1)  648/       0 :                     
(1)  649/       0 :                     smpsHaltMusic macro flag
(1)  650/       0 :                     	dc.b	$FF,$02,flag
(1)  651/       0 :                     	endm
(1)  652/       0 :                     
(1)  653/       0 :                     smpsCopyData macro data,len
(1)  654/       0 :                     	fatal "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
(1)  655/       0 :                     	dc.b	$FF,$03
(1)  656/       0 :                     	dc.w	little_endian(data)
(1)  657/       0 :                     	dc.b	len
(1)  658/       0 :                     	endm
(1)  659/       0 :                     
(1)  660/       0 :                     smpsSSGEG macro op1,op2,op3,op4
(1)  661/       0 :                     	dc.b	$FF,$05,op1,op3,op2,op4
(1)  662/       0 :                     	endm
(1)  663/       0 :                     
(1)  664/       0 :                     smpsFMVolEnv macro tone,mask
(1)  665/       0 :                     	dc.b	$FF,$06,tone,mask
(1)  666/       0 :                     	endm
(1)  667/       0 :                     
(1)  668/       0 :                     smpsResetSpindashRev macro val
(1)  669/       0 :                     	dc.b	$FF,$07
(1)  670/       0 :                     	endm
(1)  671/       0 :                     
(1)  672/       0 :                     	; Flags ported from other drivers.
(1)  690/       0 :                     
(1)  692/       0 :                     ; ---------------------------------------------------------------------------
(1)  693/       0 :                     ; S1/S2 only coordination flag
(1)  694/       0 :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(1)  695/       0 :                     smpsMaxRelRate macro
(1)  696/       0 :                     	if SonicDriverVer>=3
(1)  697/       0 :                     		; Emulate it in S3/S&K/S3D driver
(1)  698/       0 :                     		smpsFMICommand $88,$0F
(1)  699/       0 :                     		smpsFMICommand $8C,$0F
(1)  700/       0 :                     	else
(1)  701/       0 :                     		dc.b	$F9
(1)  702/       0 :                     	endif
(1)  703/       0 :                     	endm
(1)  704/       0 :                     ; ---------------------------------------------------------------------------
(1)  705/       0 :                     ; Backwards compatibility
(1)  706/       0 :                     smpsAlterNote macro
(1)  707/       0 :                     	smpsDetune	ALLARGS
(1)  708/       0 :                     	endm
(1)  709/       0 :                     
(1)  710/       0 :                     smpsAlterPitch macro
(1)  711/       0 :                     	smpsChangeTransposition	ALLARGS
(1)  712/       0 :                     	endm
(1)  713/       0 :                     
(1)  714/       0 :                     smpsFMFlutter macro
(1)  715/       0 :                     	smpsFMVolEnv	ALLARGS
(1)  716/       0 :                     	endm
(1)  717/       0 :                     
(1)  718/       0 :                     smpsWeirdD1LRR macro
(1)  719/       0 :                     	smpsMaxRelRate ALLARGS
(1)  720/       0 :                     	endm
(1)  721/       0 :                     
(1)  722/       0 :                     smpsSetvoice macro
(1)  723/       0 :                     	smpsFMvoice ALLARGS
(1)  724/       0 :                     	endm
(1)  725/       0 :                     ; ---------------------------------------------------------------------------
(1)  726/       0 :                     ; Macros for FM instruments
(1)  727/       0 :                     ; Voices - Feedback
(1)  728/       0 :                     smpsVcFeedback macro val
(1)  729/       0 :                     vcFeedback set val
(1)  730/       0 :                     	endm
(1)  731/       0 :                     
(1)  732/       0 :                     ; Voices - Algorithm
(1)  733/       0 :                     smpsVcAlgorithm macro val
(1)  734/       0 :                     vcAlgorithm set val
(1)  735/       0 :                     	endm
(1)  736/       0 :                     
(1)  737/       0 :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(1)  738/       0 :                     vcUnusedBits set val
(1)  739/       0 :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(1)  740/       0 :                     vcD1R1Unk set d1r1<<5
(1)  741/       0 :                     vcD1R2Unk set d1r2<<5
(1)  742/       0 :                     vcD1R3Unk set d1r3<<5
(1)  743/       0 :                     vcD1R4Unk set d1r4<<5
(1)  744/       0 :                     	else
(1)  745/       0 :                     vcD1R1Unk set 0
(1)  746/       0 :                     vcD1R2Unk set 0
(1)  747/       0 :                     vcD1R3Unk set 0
(1)  748/       0 :                     vcD1R4Unk set 0
(1)  749/       0 :                     	endif
(1)  750/       0 :                     	endm
(1)  751/       0 :                     
(1)  752/       0 :                     ; Voices - Detune
(1)  753/       0 :                     smpsVcDetune macro op1,op2,op3,op4
(1)  754/       0 :                     vcDT1 set op1
(1)  755/       0 :                     vcDT2 set op2
(1)  756/       0 :                     vcDT3 set op3
(1)  757/       0 :                     vcDT4 set op4
(1)  758/       0 :                     	endm
(1)  759/       0 :                     
(1)  760/       0 :                     ; Voices - Coarse-Frequency
(1)  761/       0 :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(1)  762/       0 :                     vcCF1 set op1
(1)  763/       0 :                     vcCF2 set op2
(1)  764/       0 :                     vcCF3 set op3
(1)  765/       0 :                     vcCF4 set op4
(1)  766/       0 :                     	endm
(1)  767/       0 :                     
(1)  768/       0 :                     ; Voices - Rate Scale
(1)  769/       0 :                     smpsVcRateScale macro op1,op2,op3,op4
(1)  770/       0 :                     vcRS1 set op1
(1)  771/       0 :                     vcRS2 set op2
(1)  772/       0 :                     vcRS3 set op3
(1)  773/       0 :                     vcRS4 set op4
(1)  774/       0 :                     	endm
(1)  775/       0 :                     
(1)  776/       0 :                     ; Voices - Attack Rate
(1)  777/       0 :                     smpsVcAttackRate macro op1,op2,op3,op4
(1)  778/       0 :                     vcAR1 set op1
(1)  779/       0 :                     vcAR2 set op2
(1)  780/       0 :                     vcAR3 set op3
(1)  781/       0 :                     vcAR4 set op4
(1)  782/       0 :                     	endm
(1)  783/       0 :                     
(1)  784/       0 :                     ; Voices - Amplitude Modulation
(1)  785/       0 :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(1)  786/       0 :                     ; were the Amplitude Modulation.
(1)  787/       0 :                     ; According to several docs, however, it's actually the high bit.
(1)  788/       0 :                     smpsVcAmpMod macro op1,op2,op3,op4
(1)  789/       0 :                     	if SourceSMPS2ASM==0
(1)  790/       0 :                     vcAM1 set op1<<5
(1)  791/       0 :                     vcAM2 set op2<<5
(1)  792/       0 :                     vcAM3 set op3<<5
(1)  793/       0 :                     vcAM4 set op4<<5
(1)  794/       0 :                     	else
(1)  795/       0 :                     vcAM1 set op1<<7
(1)  796/       0 :                     vcAM2 set op2<<7
(1)  797/       0 :                     vcAM3 set op3<<7
(1)  798/       0 :                     vcAM4 set op4<<7
(1)  799/       0 :                     	endif
(1)  800/       0 :                     	endm
(1)  801/       0 :                     
(1)  802/       0 :                     ; Voices - First Decay Rate
(1)  803/       0 :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(1)  804/       0 :                     vcD1R1 set op1
(1)  805/       0 :                     vcD1R2 set op2
(1)  806/       0 :                     vcD1R3 set op3
(1)  807/       0 :                     vcD1R4 set op4
(1)  808/       0 :                     	endm
(1)  809/       0 :                     
(1)  810/       0 :                     ; Voices - Second Decay Rate
(1)  811/       0 :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(1)  812/       0 :                     vcD2R1 set op1
(1)  813/       0 :                     vcD2R2 set op2
(1)  814/       0 :                     vcD2R3 set op3
(1)  815/       0 :                     vcD2R4 set op4
(1)  816/       0 :                     	endm
(1)  817/       0 :                     
(1)  818/       0 :                     ; Voices - Decay Level
(1)  819/       0 :                     smpsVcDecayLevel macro op1,op2,op3,op4
(1)  820/       0 :                     vcDL1 set op1
(1)  821/       0 :                     vcDL2 set op2
(1)  822/       0 :                     vcDL3 set op3
(1)  823/       0 :                     vcDL4 set op4
(1)  824/       0 :                     	endm
(1)  825/       0 :                     
(1)  826/       0 :                     ; Voices - Release Rate
(1)  827/       0 :                     smpsVcReleaseRate macro op1,op2,op3,op4
(1)  828/       0 :                     vcRR1 set op1
(1)  829/       0 :                     vcRR2 set op2
(1)  830/       0 :                     vcRR3 set op3
(1)  831/       0 :                     vcRR4 set op4
(1)  832/       0 :                     	endm
(1)  833/       0 :                     
(1)  834/       0 :                     ; Voices - Total Level
(1)  835/       0 :                     ; The original SMPS2ASM decides TL high bits automatically,
(1)  836/       0 :                     ; but later versions leave it up to the user.
(1)  837/       0 :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(1)  838/       0 :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(1)  839/       0 :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(1)  840/       0 :                     ; SMPS Z80 does the opposite.
(1)  841/       0 :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(1)  842/       0 :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(1)  843/       0 :                     ; what we do, so we just print a warning.
(1)  844/       0 :                     smpsVcTotalLevel macro op1,op2,op3,op4
(1)  845/       0 :                     vcTL1 set op1
(1)  846/       0 :                     vcTL2 set op2
(1)  847/       0 :                     vcTL3 set op3
(1)  848/       0 :                     vcTL4 set op4
(1)  849/       0 :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  850/       0 :                     ;   0     1     2     3     4     5     6     7
(1)  851/       0 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  852/       0 :                     	if SourceSMPS2ASM==0
(1)  853/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  854/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  855/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  856/       0 :                     vcTLMask1 set $80
(1)  857/       0 :                     	else
(1)  858/       0 :                     vcTLMask4 set 0
(1)  859/       0 :                     vcTLMask3 set 0
(1)  860/       0 :                     vcTLMask2 set 0
(1)  861/       0 :                     vcTLMask1 set 0
(1)  862/       0 :                     	endif
(1)  863/       0 :                     
(1)  864/       0 :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(1)  865/       0 :                     vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  866/       0 :                     vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  867/       0 :                     vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  868/       0 :                     vcTLMask1 set $80
(1)  869/       0 :                     vcTL1 set vcTL1&$7F
(1)  870/       0 :                     vcTL2 set vcTL2&$7F
(1)  871/       0 :                     vcTL3 set vcTL3&$7F
(1)  872/       0 :                     vcTL4 set vcTL4&$7F
(1)  873/       0 :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&(((vcTL1&$80)<>$80)||((vcTL2&$80)<>((vcAlgorithm>=5)<<7))||((vcTL3&$80)<>((vcAlgorithm>=4)<<7))||((vcTL4&$80)<>((vcAlgorithm==7)<<7)))
(1)  874/       0 :                     		if MOMPASS==2
(1)  875/       0 :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(1)  876/       0 :                     		endif
(1)  877/       0 :                     	endif
(1)  878/       0 :                     
(1)  879/       0 :                     	if SonicDriverVer==2
(1)  880/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(1)  881/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(1)  882/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  883/       0 :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(1)  884/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(1)  885/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(1)  886/       0 :                     	else
(1)  887/       0 :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  888/       0 :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  889/       0 :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  890/       0 :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  891/       0 :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  892/       0 :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  893/       0 :                     	endif
(1)  894/       0 :                     	endm
(1)  895/       0 :                     
(1)  896/       0 :                     
   18/       0 :                        
   19/       0 :                        ;		MUSIC STARTS HERE
   20/       0 :                        
   21/       0 : (MACRO)                	align	$8000
   21/       0 :  (MACRO-2)                     cnop 0,$8000
   21/       0 :   (MACRO-3)                            org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   21/    8000 :                                                !org (*-1+($8000)-((*-1+(-(0)))#($8000)))
   22/    8000 :                        
   23/    8000 :                        		include		"Music/Electoria.asm"
(1)    1/    8000 :                     Electoria_Header:
(1)    2/    8000 : (MACRO)             	smpsHeaderStartSong 3
(1)    2/    8000 :                     
(1)    2/    8000 : =$3                 SourceDriver set 3
(1)    2/    8000 :                     
(1)    2/    8000 : =$0                 SourceSMPS2ASM set 0
(1)    2/    8000 :                     
(1)    2/    8000 : =$8000              songStart set *
(1)    2/    8000 :                     
(1)    2/    8000 :                     
(1)    3/    8000 : (MACRO)             	smpsHeaderVoice     Electoria_Voices
(1)    3/    8000 : 0F88                                dc.w    z80_ptr(ELECTORIA_VOICES)
(1)    4/    8002 : (MACRO)             	smpsHeaderChan      $06, $03
(1)    4/    8002 : 0603                        dc.b    $06,$03
(1)    5/    8004 : (MACRO)             	smpsHeaderTempo     $01, $19
(1)    5/    8004 : 01                          dc.b    $01
(1)    5/    8005 :  (MACRO-2)                  convertMainTempoMod $19
(1)    5/    8005 : 19                                  dc.b    $19
(1)    6/    8006 :                     
(1)    7/    8006 : (MACRO)             	smpsHeaderDAC       Electoria_DAC
(1)    7/    8006 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_DAC
(1)    7/    8006 : 4887                                dc.w    z80_ptr(ELECTORIA_DAC)
(1)    7/    8008 : 0000                                dc.w    $00
(1)    8/    800A : (MACRO)             	smpsHeaderFM        Electoria_FM1,	$00, $0E
(1)    8/    800A :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM1
(1)    8/    800A : 3080                                dc.w    z80_ptr(ELECTORIA_FM1)
(1)    8/    800C : 000E                        dc.b    $00,$0E
(1)    9/    800E : (MACRO)             	smpsHeaderFM        Electoria_FM2,	$00, $18
(1)    9/    800E :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM2
(1)    9/    800E : B280                                dc.w    z80_ptr(ELECTORIA_FM2)
(1)    9/    8010 : 0018                        dc.b    $00,$18
(1)   10/    8012 : (MACRO)             	smpsHeaderFM        Electoria_FM3,	$00, $18
(1)   10/    8012 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM3
(1)   10/    8012 : DD83                                dc.w    z80_ptr(ELECTORIA_FM3)
(1)   10/    8014 : 0018                        dc.b    $00,$18
(1)   11/    8016 : (MACRO)             	smpsHeaderFM        Electoria_FM4,	$00, $18
(1)   11/    8016 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM4
(1)   11/    8016 : E884                                dc.w    z80_ptr(ELECTORIA_FM4)
(1)   11/    8018 : 0018                        dc.b    $00,$18
(1)   12/    801A : (MACRO)             	smpsHeaderFM        Electoria_FM5,	$00, $18
(1)   12/    801A :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_FM5
(1)   12/    801A : 6F85                                dc.w    z80_ptr(ELECTORIA_FM5)
(1)   12/    801C : 0018                        dc.b    $00,$18
(1)   13/    801E : (MACRO)             	smpsHeaderPSG       Electoria_PSG1,	$00, $04, $00, sTone_0C
(1)   13/    801E :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_PSG1
(1)   13/    801E : C985                                dc.w    z80_ptr(ELECTORIA_PSG1)
(1)   13/    8020 :  (MACRO-2)                  PSGPitchConvert $00
(1)   13/    8020 : 00                                  dc.b    $00
(1)   13/    8021 : 0400 0C                     dc.b    $04,$00,STONE_0C
(1)   14/    8024 : (MACRO)             	smpsHeaderPSG       Electoria_PSG2,	$F4, $04, $00, sTone_0C
(1)   14/    8024 :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_PSG2
(1)   14/    8024 : 4E86                                dc.w    z80_ptr(ELECTORIA_PSG2)
(1)   14/    8026 :  (MACRO-2)                  PSGPitchConvert $F4
(1)   14/    8026 : F4                                  dc.b    $F4
(1)   14/    8027 : 0400 0C                     dc.b    $04,$00,STONE_0C
(1)   15/    802A : (MACRO)             	smpsHeaderPSG       Electoria_PSG3,	$23, $01, $00, sTone_02
(1)   15/    802A :  (MACRO-2)                  CheckedChannelPointer ELECTORIA_PSG3
(1)   15/    802A : FD86                                dc.w    z80_ptr(ELECTORIA_PSG3)
(1)   15/    802C :  (MACRO-2)                  PSGPitchConvert $23
(1)   15/    802C : 23                                  dc.b    $23
(1)   15/    802D : 0100 02                     dc.b    $01,$00,STONE_02
(1)   16/    8030 :                     
(1)   17/    8030 :                     ; FM1 Data
(1)   18/    8030 :                     Electoria_FM1:
(1)   19/    8030 : (MACRO)             	smpsSetvoice        $00
(1)   19/    8030 :  (MACRO-2)                  smpsFMvoice $00
(1)   19/    8030 : EF00                                dc.b    $EF,$00
(1)   20/    8032 : 8F06 9B9B 919D 9D91 	dc.b	nD1, $06, nD2, nD2, nE1, nE2, nE2, nE1, nE2, nE2, nG1, nG2
             803A : 9D9D 94A0         
(1)   21/    803E : A096 A28F 0C        	dc.b	nG2, nA1, nA2, nD1, $0C
(1)   22/    8043 :                     
(1)   23/    8043 :                     Electoria_Loop16:
(1)   24/    8043 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   24/    8043 : F8                          dc.b    $F8
(1)   24/    8044 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   25/    8046 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop16
(1)   25/    8046 : F7                          dc.b    $F7
(1)   25/    8047 : 0008                        dc.b    $00,$08
(1)   25/    8049 : 4380                                dc.w    z80_ptr(ELECTORIA_LOOP16)
(1)   26/    804B :                     
(1)   27/    804B :                     Electoria_Loop17:
(1)   28/    804B : (MACRO)             	smpsCall            Electoria_Call0B
(1)   28/    804B : F8                          dc.b    $F8
(1)   28/    804C : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   29/    804E : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop17
(1)   29/    804E : F7                          dc.b    $F7
(1)   29/    804F : 0008                        dc.b    $00,$08
(1)   29/    8051 : 4B80                                dc.w    z80_ptr(ELECTORIA_LOOP17)
(1)   30/    8053 : (MACRO)             	smpsAlterPitch      $FC
(1)   30/    8053 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)   30/    8053 : FBFC                                dc.b    $FB,$FC
(1)   31/    8055 :                     
(1)   32/    8055 :                     Electoria_Loop18:
(1)   33/    8055 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   33/    8055 : F8                          dc.b    $F8
(1)   33/    8056 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   34/    8058 : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop18
(1)   34/    8058 : F7                          dc.b    $F7
(1)   34/    8059 : 0007                        dc.b    $00,$07
(1)   34/    805B : 5580                                dc.w    z80_ptr(ELECTORIA_LOOP18)
(1)   35/    805D : (MACRO)             	smpsAlterPitch      $04
(1)   35/    805D :  (MACRO-2)                  smpsChangeTransposition $04
(1)   35/    805D : FB04                                dc.b    $FB,$04
(1)   36/    805F : 900C 9C06 8090 809C 	dc.b	nEb1, $0C, nEb2, $06, nRst, nEb1, nRst, nEb2, nEb1, nRst, nRst, nEb2
             8067 : 9080 809C         
(1)   37/    806B : 80                  	dc.b	nRst
(1)   38/    806C : (MACRO)             	smpsModSet          $01, $08, $EC, $00
(1)   38/    806C : F0                          dc.b    $F0
(1)   38/    806D : 0108 EC00                           dc.b    $01,$08,$EC,$00
(1)   38/    8071 :                             ;dc.b   $08,$EC,$00
(1)   39/    8071 : 9018                	dc.b	nEb1, $18
(1)   40/    8073 : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)   40/    8073 : F0                          dc.b    $F0
(1)   40/    8074 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)   40/    8078 :                             ;dc.b   $00,$00,$00
(1)   41/    8078 :                     
(1)   42/    8078 :                     Electoria_Loop19:
(1)   43/    8078 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   43/    8078 : F8                          dc.b    $F8
(1)   43/    8079 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   44/    807B : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop19
(1)   44/    807B : F7                          dc.b    $F7
(1)   44/    807C : 0007                        dc.b    $00,$07
(1)   44/    807E : 7880                                dc.w    z80_ptr(ELECTORIA_LOOP19)
(1)   45/    8080 : 8F0C 9B91 9D92 069E 	dc.b	nD1, $0C, nD2, nE1, nE2, nF1, $06, nF2, nF1, nRst, nD1, nD2
             8088 : 9280 8F9B         
(1)   46/    808C : 8F80                	dc.b	nD1, nRst
(1)   47/    808E :                     
(1)   48/    808E :                     Electoria_Loop1A:
(1)   49/    808E : (MACRO)             	smpsCall            Electoria_Call0B
(1)   49/    808E : F8                          dc.b    $F8
(1)   49/    808F : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   50/    8091 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop1A
(1)   50/    8091 : F7                          dc.b    $F7
(1)   50/    8092 : 0008                        dc.b    $00,$08
(1)   50/    8094 : 8E80                                dc.w    z80_ptr(ELECTORIA_LOOP1A)
(1)   51/    8096 :                     
(1)   52/    8096 :                     Electoria_Loop1B:
(1)   53/    8096 : (MACRO)             	smpsCall            Electoria_Call0B
(1)   53/    8096 : F8                          dc.b    $F8
(1)   53/    8097 : A180                                dc.w    z80_ptr(ELECTORIA_CALL0B)
(1)   54/    8099 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop1B
(1)   54/    8099 : F7                          dc.b    $F7
(1)   54/    809A : 0008                        dc.b    $00,$08
(1)   54/    809C : 9680                                dc.w    z80_ptr(ELECTORIA_LOOP1B)
(1)   55/    809E : (MACRO)             	smpsJump            Electoria_Loop17
(1)   55/    809E : F6                          dc.b    $F6
(1)   55/    809F : 4B80                                dc.w    z80_ptr(ELECTORIA_LOOP17)
(1)   56/    80A1 :                     
(1)   57/    80A1 :                     Electoria_Call0B:
(1)   58/    80A1 : 940C A006 8094 0C80 	dc.b	nG1, $0C, nG2, $06, nRst, nG1, $0C, nRst, $06, nG1, nRst, nG1
             80A9 : 0694 8094         
(1)   59/    80AD : 940C 9293           	dc.b	nG1, $0C, nF1, nFs1
(1)   60/    80B1 : (MACRO)             	smpsReturn
(1)   60/    80B1 : F9                                  dc.b    $F9
(1)   61/    80B2 :                     
(1)   62/    80B2 :                     ; FM2 Data
(1)   63/    80B2 :                     Electoria_FM2:
(1)   64/    80B2 : (MACRO)             	smpsSetvoice        $03
(1)   64/    80B2 :  (MACRO-2)                  smpsFMvoice $03
(1)   64/    80B2 : EF03                                dc.b    $EF,$03
(1)   65/    80B4 : 8060                	dc.b	nRst, $60
(1)   66/    80B6 :                     
(1)   67/    80B6 :                     Electoria_Loop14:
(1)   68/    80B6 : (MACRO)             	smpsCall            Electoria_Call04
(1)   68/    80B6 : F8                          dc.b    $F8
(1)   68/    80B7 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)   69/    80B9 : (MACRO)             	smpsAlterPitch      $01
(1)   69/    80B9 :  (MACRO-2)                  smpsChangeTransposition $01
(1)   69/    80B9 : FB01                                dc.b    $FB,$01
(1)   70/    80BB : (MACRO)             	smpsCall            Electoria_Call04
(1)   70/    80BB : F8                          dc.b    $F8
(1)   70/    80BC : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)   71/    80BE : (MACRO)             	smpsAlterPitch      $FF
(1)   71/    80BE :  (MACRO-2)                  smpsChangeTransposition $FF
(1)   71/    80BE : FBFF                                dc.b    $FB,$FF
(1)   72/    80C0 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop14
(1)   72/    80C0 : F7                          dc.b    $F7
(1)   72/    80C1 : 0004                        dc.b    $00,$04
(1)   72/    80C3 : B680                                dc.w    z80_ptr(ELECTORIA_LOOP14)
(1)   73/    80C5 : (MACRO)             	smpsFMAlterVol      $FA
(1)   73/    80C5 : E6FA                                dc.b    $E6,$FA
(1)   74/    80C7 :                     
(1)   75/    80C7 :                     Electoria_Jump01:
(1)   76/    80C7 : (MACRO)             	smpsSetvoice        $01
(1)   76/    80C7 :  (MACRO-2)                  smpsFMvoice $01
(1)   76/    80C7 : EF01                                dc.b    $EF,$01
(1)   77/    80C9 : (MACRO)             	smpsAlterPitch      $0C
(1)   77/    80C9 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   77/    80C9 : FB0C                                dc.b    $FB,$0C
(1)   78/    80CB : (MACRO)             	smpsFMAlterVol      $FB
(1)   78/    80CB : E6FB                                dc.b    $E6,$FB
(1)   79/    80CD : AF12 AC06 803C AA06 	dc.b	nBb3, $12, nG3, $06, nRst, $3C, nF3, $06, nG3, nC4, nRst, nC4
             80D5 : ACB1 80B1         
(1)   80/    80D9 : 80B1 0CB3 06AC E70C 	dc.b	nRst, nC4, $0C, nD4, $06, nG3, smpsNoAttack, $0C, nF3, nG3, $06, nRst
             80E1 : AAAC 0680         
(1)   81/    80E5 : AC0C 8060           	dc.b	nG3, $0C, nRst, $60
(1)   82/    80E9 : (MACRO)             	smpsPan             panLeft, $00
(1)   82/    80E9 : =$0                 panNone set $00
(1)   82/    80E9 : =$40                panRight set $40
(1)   82/    80E9 : =$80                panLeft set $80
(1)   82/    80E9 : =$C0                panCentre set $C0
(1)   82/    80E9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   82/    80E9 : E080                        dc.b $E0,PANLEFT+$00
(1)   83/    80EB : (MACRO)             	smpsAlterPitch      $F4
(1)   83/    80EB :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   83/    80EB : FBF4                                dc.b    $FB,$F4
(1)   84/    80ED : (MACRO)             	smpsSetvoice        $02
(1)   84/    80ED :  (MACRO-2)                  smpsFMvoice $02
(1)   84/    80ED : EF02                                dc.b    $EF,$02
(1)   85/    80EF : (MACRO)             	smpsFMAlterVol      $0A
(1)   85/    80EF : E60A                                dc.b    $E6,$0A
(1)   86/    80F1 : (MACRO)             	smpsCall            Electoria_Call06
(1)   86/    80F1 : F8                          dc.b    $F8
(1)   86/    80F2 : AE81                                dc.w    z80_ptr(ELECTORIA_CALL06)
(1)   87/    80F4 : (MACRO)             	smpsPan             panCenter, $00
(1)   87/    80F4 : =$0                 panNone set $00
(1)   87/    80F4 : =$40                panRight set $40
(1)   87/    80F4 : =$80                panLeft set $80
(1)   87/    80F4 : =$C0                panCentre set $C0
(1)   87/    80F4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   87/    80F4 : E0C0                        dc.b $E0,PANCENTER+$00
(1)   88/    80F6 : (MACRO)             	smpsSetvoice        $01
(1)   88/    80F6 :  (MACRO-2)                  smpsFMvoice $01
(1)   88/    80F6 : EF01                                dc.b    $EF,$01
(1)   89/    80F8 : (MACRO)             	smpsAlterPitch      $0C
(1)   89/    80F8 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)   89/    80F8 : FB0C                                dc.b    $FB,$0C
(1)   90/    80FA : (MACRO)             	smpsFMAlterVol      $F6
(1)   90/    80FA : E6F6                                dc.b    $E6,$F6
(1)   91/    80FC : AF0C E70C AC06 8080 	dc.b	nBb3, $0C, smpsNoAttack, $0C, nG3, $06, nRst, nRst, $3C, nF4, $0C, smpsNoAttack
             8104 : 3CB6 0CE7         
(1)   92/    8108 : 0680 B580 B3B5 80B3 	dc.b	$06, nRst, nE4, nRst, nD4, nE4, nRst, nD4, smpsNoAttack, nD4, nRst, nC4
             8110 : E7B3 80B1         
(1)   93/    8114 : 80AF B180 B0E7 60   	dc.b	nRst, nBb3, nC4, nRst, nB3, smpsNoAttack, $60
(1)   94/    811B : (MACRO)             	smpsPan             panLeft, $00
(1)   94/    811B : =$0                 panNone set $00
(1)   94/    811B : =$40                panRight set $40
(1)   94/    811B : =$80                panLeft set $80
(1)   94/    811B : =$C0                panCentre set $C0
(1)   94/    811B : =$C0                panCenter set $C0 ; silly Americans :U
(1)   94/    811B : E080                        dc.b $E0,PANLEFT+$00
(1)   95/    811D : (MACRO)             	smpsAlterPitch      $F4
(1)   95/    811D :  (MACRO-2)                  smpsChangeTransposition $F4
(1)   95/    811D : FBF4                                dc.b    $FB,$F4
(1)   96/    811F : (MACRO)             	smpsSetvoice        $02
(1)   96/    811F :  (MACRO-2)                  smpsFMvoice $02
(1)   96/    811F : EF02                                dc.b    $EF,$02
(1)   97/    8121 : (MACRO)             	smpsFMAlterVol      $0A
(1)   97/    8121 : E60A                                dc.b    $E6,$0A
(1)   98/    8123 : (MACRO)             	smpsCall            Electoria_Call07
(1)   98/    8123 : F8                          dc.b    $F8
(1)   98/    8124 : C381                                dc.w    z80_ptr(ELECTORIA_CALL07)
(1)   99/    8126 : (MACRO)             	smpsPan             panCenter, $00
(1)   99/    8126 : =$0                 panNone set $00
(1)   99/    8126 : =$40                panRight set $40
(1)   99/    8126 : =$80                panLeft set $80
(1)   99/    8126 : =$C0                panCentre set $C0
(1)   99/    8126 : =$C0                panCenter set $C0 ; silly Americans :U
(1)   99/    8126 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  100/    8128 : (MACRO)             	smpsSetvoice        $01
(1)  100/    8128 :  (MACRO-2)                  smpsFMvoice $01
(1)  100/    8128 : EF01                                dc.b    $EF,$01
(1)  101/    812A : (MACRO)             	smpsFMAlterVol      $F6
(1)  101/    812A : E6F6                                dc.b    $E6,$F6
(1)  102/    812C : (MACRO)             	smpsCall            Electoria_Call08
(1)  102/    812C : F8                          dc.b    $F8
(1)  102/    812D : EE81                                dc.w    z80_ptr(ELECTORIA_CALL08)
(1)  103/    812F : 8030                	dc.b	nRst, $30
(1)  104/    8131 : (MACRO)             	smpsSetvoice        $02
(1)  104/    8131 :  (MACRO-2)                  smpsFMvoice $02
(1)  104/    8131 : EF02                                dc.b    $EF,$02
(1)  105/    8133 : (MACRO)             	smpsFMAlterVol      $0B
(1)  105/    8133 : E60B                                dc.b    $E6,$0B
(1)  106/    8135 : (MACRO)             	smpsCall            Electoria_Call09
(1)  106/    8135 : F8                          dc.b    $F8
(1)  106/    8136 : 5C82                                dc.w    z80_ptr(ELECTORIA_CALL09)
(1)  107/    8138 : B012 B34E 8060      	dc.b	nB3, $12, nD4, $4E, nRst, $60
(1)  108/    813E : (MACRO)             	smpsCall            Electoria_Call0A
(1)  108/    813E : F8                          dc.b    $F8
(1)  108/    813F : CB82                                dc.w    z80_ptr(ELECTORIA_CALL0A)
(1)  109/    8141 : B312 B84E BD18 BC06 	dc.b	nD4, $12, nG4, $4E, nC5, $18, nB4, $06
(1)  110/    8149 : (MACRO)             	smpsFMAlterVol      $0A
(1)  110/    8149 : E60A                                dc.b    $E6,$0A
(1)  111/    814B : (MACRO)             	smpsPan             panRight, $00
(1)  111/    814B : =$0                 panNone set $00
(1)  111/    814B : =$40                panRight set $40
(1)  111/    814B : =$80                panLeft set $80
(1)  111/    814B : =$C0                panCentre set $C0
(1)  111/    814B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  111/    814B : E040                        dc.b $E0,PANRIGHT+$00
(1)  112/    814D : BC                  	dc.b	nB4
(1)  113/    814E : (MACRO)             	smpsFMAlterVol      $F6
(1)  113/    814E : E6F6                                dc.b    $E6,$F6
(1)  114/    8150 : (MACRO)             	smpsPan             panCenter, $00
(1)  114/    8150 : =$0                 panNone set $00
(1)  114/    8150 : =$40                panRight set $40
(1)  114/    8150 : =$80                panLeft set $80
(1)  114/    8150 : =$C0                panCentre set $C0
(1)  114/    8150 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  114/    8150 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  115/    8152 : BA12                	dc.b	nA4, $12
(1)  116/    8154 : (MACRO)             	smpsFMAlterVol      $0A
(1)  116/    8154 : E60A                                dc.b    $E6,$0A
(1)  117/    8156 : (MACRO)             	smpsPan             panRight, $00
(1)  117/    8156 : =$0                 panNone set $00
(1)  117/    8156 : =$40                panRight set $40
(1)  117/    8156 : =$80                panLeft set $80
(1)  117/    8156 : =$C0                panCentre set $C0
(1)  117/    8156 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  117/    8156 : E040                        dc.b $E0,PANRIGHT+$00
(1)  118/    8158 : 06                  	dc.b	$06
(1)  119/    8159 : (MACRO)             	smpsFMAlterVol      $F6
(1)  119/    8159 : E6F6                                dc.b    $E6,$F6
(1)  120/    815B : (MACRO)             	smpsPan             panCenter, $00
(1)  120/    815B : =$0                 panNone set $00
(1)  120/    815B : =$40                panRight set $40
(1)  120/    815B : =$80                panLeft set $80
(1)  120/    815B : =$C0                panCentre set $C0
(1)  120/    815B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  120/    815B : E0C0                        dc.b $E0,PANCENTER+$00
(1)  121/    815D : BC12                	dc.b	nB4, $12
(1)  122/    815F : (MACRO)             	smpsFMAlterVol      $0A
(1)  122/    815F : E60A                                dc.b    $E6,$0A
(1)  123/    8161 : (MACRO)             	smpsPan             panRight, $00
(1)  123/    8161 : =$0                 panNone set $00
(1)  123/    8161 : =$40                panRight set $40
(1)  123/    8161 : =$80                panLeft set $80
(1)  123/    8161 : =$C0                panCentre set $C0
(1)  123/    8161 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  123/    8161 : E040                        dc.b $E0,PANRIGHT+$00
(1)  124/    8163 : 06                  	dc.b	$06
(1)  125/    8164 : (MACRO)             	smpsFMAlterVol      $F6
(1)  125/    8164 : E6F6                                dc.b    $E6,$F6
(1)  126/    8166 : (MACRO)             	smpsPan             panCenter, $00
(1)  126/    8166 : =$0                 panNone set $00
(1)  126/    8166 : =$40                panRight set $40
(1)  126/    8166 : =$80                panLeft set $80
(1)  126/    8166 : =$C0                panCentre set $C0
(1)  126/    8166 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  126/    8166 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  127/    8168 : B80C E760           	dc.b	nG4, $0C, smpsNoAttack, $60
(1)  128/    816C : (MACRO)             	smpsSetvoice        $03
(1)  128/    816C :  (MACRO-2)                  smpsFMvoice $03
(1)  128/    816C : EF03                                dc.b    $EF,$03
(1)  129/    816E : A060 6030 80        	dc.b	nG2, $60, $60, $30, nRst
(1)  130/    8173 :                     
(1)  131/    8173 :                     Electoria_Loop15:
(1)  132/    8173 : A060                	dc.b	nG2, $60
(1)  133/    8175 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop15
(1)  133/    8175 : F7                          dc.b    $F7
(1)  133/    8176 : 0004                        dc.b    $00,$04
(1)  133/    8178 : 7381                                dc.w    z80_ptr(ELECTORIA_LOOP15)
(1)  134/    817A : (MACRO)             	smpsSetvoice        $01
(1)  134/    817A :  (MACRO-2)                  smpsFMvoice $01
(1)  134/    817A : EF01                                dc.b    $EF,$01
(1)  135/    817C : (MACRO)             	smpsFMAlterVol      $FA
(1)  135/    817C : E6FA                                dc.b    $E6,$FA
(1)  136/    817E : (MACRO)             	smpsJump            Electoria_Jump01
(1)  136/    817E : F6                          dc.b    $F6
(1)  136/    817F : C780                                dc.w    z80_ptr(ELECTORIA_JUMP01)
(1)  137/    8181 :                     
(1)  138/    8181 :                     Electoria_Call04:
(1)  139/    8181 : 800C B00C           	dc.b	nRst, $0C, nB3, $0C
(1)  140/    8185 : (MACRO)             	smpsFMAlterVol      $0A
(1)  140/    8185 : E60A                                dc.b    $E6,$0A
(1)  141/    8187 : (MACRO)             	smpsPan             panLeft, $00
(1)  141/    8187 : =$0                 panNone set $00
(1)  141/    8187 : =$40                panRight set $40
(1)  141/    8187 : =$80                panLeft set $80
(1)  141/    8187 : =$C0                panCentre set $C0
(1)  141/    8187 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  141/    8187 : E080                        dc.b $E0,PANLEFT+$00
(1)  142/    8189 : 06                  	dc.b	$06
(1)  143/    818A : (MACRO)             	smpsFMAlterVol      $F6
(1)  143/    818A : E6F6                                dc.b    $E6,$F6
(1)  144/    818C : (MACRO)             	smpsPan             panCenter, $00
(1)  144/    818C : =$0                 panNone set $00
(1)  144/    818C : =$40                panRight set $40
(1)  144/    818C : =$80                panLeft set $80
(1)  144/    818C : =$C0                panCentre set $C0
(1)  144/    818C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  144/    818C : E0C0                        dc.b $E0,PANCENTER+$00
(1)  145/    818E : 0C                  	dc.b	$0C
(1)  146/    818F : (MACRO)             	smpsFMAlterVol      $0A
(1)  146/    818F : E60A                                dc.b    $E6,$0A
(1)  147/    8191 : (MACRO)             	smpsPan             panLeft, $00
(1)  147/    8191 : =$0                 panNone set $00
(1)  147/    8191 : =$40                panRight set $40
(1)  147/    8191 : =$80                panLeft set $80
(1)  147/    8191 : =$C0                panCentre set $C0
(1)  147/    8191 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  147/    8191 : E080                        dc.b $E0,PANLEFT+$00
(1)  148/    8193 : 06                  	dc.b	$06
(1)  149/    8194 : (MACRO)             	smpsFMAlterVol      $F6
(1)  149/    8194 : E6F6                                dc.b    $E6,$F6
(1)  150/    8196 : (MACRO)             	smpsPan             panCenter, $00
(1)  150/    8196 : =$0                 panNone set $00
(1)  150/    8196 : =$40                panRight set $40
(1)  150/    8196 : =$80                panLeft set $80
(1)  150/    8196 : =$C0                panCentre set $C0
(1)  150/    8196 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  150/    8196 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  151/    8198 : 0C                  	dc.b	$0C
(1)  152/    8199 : (MACRO)             	smpsFMAlterVol      $0A
(1)  152/    8199 : E60A                                dc.b    $E6,$0A
(1)  153/    819B : (MACRO)             	smpsPan             panLeft, $00
(1)  153/    819B : =$0                 panNone set $00
(1)  153/    819B : =$40                panRight set $40
(1)  153/    819B : =$80                panLeft set $80
(1)  153/    819B : =$C0                panCentre set $C0
(1)  153/    819B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  153/    819B : E080                        dc.b $E0,PANLEFT+$00
(1)  154/    819D : 06                  	dc.b	$06
(1)  155/    819E : (MACRO)             	smpsFMAlterVol      $F6
(1)  155/    819E : E6F6                                dc.b    $E6,$F6
(1)  156/    81A0 : (MACRO)             	smpsPan             panCenter, $00
(1)  156/    81A0 : =$0                 panNone set $00
(1)  156/    81A0 : =$40                panRight set $40
(1)  156/    81A0 : =$80                panLeft set $80
(1)  156/    81A0 : =$C0                panCentre set $C0
(1)  156/    81A0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  156/    81A0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  157/    81A2 : 0C                  	dc.b	$0C
(1)  158/    81A3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  158/    81A3 : E60A                                dc.b    $E6,$0A
(1)  159/    81A5 : (MACRO)             	smpsPan             panLeft, $00
(1)  159/    81A5 : =$0                 panNone set $00
(1)  159/    81A5 : =$40                panRight set $40
(1)  159/    81A5 : =$80                panLeft set $80
(1)  159/    81A5 : =$C0                panCentre set $C0
(1)  159/    81A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  159/    81A5 : E080                        dc.b $E0,PANLEFT+$00
(1)  160/    81A7 : 06                  	dc.b	$06
(1)  161/    81A8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  161/    81A8 : E6F6                                dc.b    $E6,$F6
(1)  162/    81AA : (MACRO)             	smpsPan             panCenter, $00
(1)  162/    81AA : =$0                 panNone set $00
(1)  162/    81AA : =$40                panRight set $40
(1)  162/    81AA : =$80                panLeft set $80
(1)  162/    81AA : =$C0                panCentre set $C0
(1)  162/    81AA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  162/    81AA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  163/    81AC : 0C                  	dc.b	$0C
(1)  164/    81AD : (MACRO)             	smpsReturn
(1)  164/    81AD : F9                                  dc.b    $F9
(1)  165/    81AE :                     
(1)  166/    81AE :                     Electoria_Call06:
(1)  167/    81AE : BD12                	dc.b	nC5, $12
(1)  168/    81B0 : (MACRO)             	smpsFMAlterVol      $0A
(1)  168/    81B0 : E60A                                dc.b    $E6,$0A
(1)  169/    81B2 : 06                  	dc.b	$06
(1)  170/    81B3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  170/    81B3 : E6F6                                dc.b    $E6,$F6
(1)  171/    81B5 : BC12 BD06 BAB8      	dc.b	nB4, $12, nC5, $06, nA4, nG4
(1)  172/    81BB : (MACRO)             	smpsFMAlterVol      $0A
(1)  172/    81BB : E60A                                dc.b    $E6,$0A
(1)  173/    81BD : B8                  	dc.b	nG4
(1)  174/    81BE : (MACRO)             	smpsFMAlterVol      $F6
(1)  174/    81BE : E6F6                                dc.b    $E6,$F6
(1)  175/    81C0 : B812                	dc.b	nG4, $12
(1)  176/    81C2 : (MACRO)             	smpsReturn
(1)  176/    81C2 : F9                                  dc.b    $F9
(1)  177/    81C3 :                     
(1)  178/    81C3 :                     Electoria_Call07:
(1)  179/    81C3 : B30C                	dc.b	nD4, $0C
(1)  180/    81C5 : (MACRO)             	smpsFMAlterVol      $0A
(1)  180/    81C5 : E60A                                dc.b    $E6,$0A
(1)  181/    81C7 : 06                  	dc.b	$06
(1)  182/    81C8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  182/    81C8 : E6F6                                dc.b    $E6,$F6
(1)  183/    81CA : B20C                	dc.b	nCs4, $0C
(1)  184/    81CC : (MACRO)             	smpsFMAlterVol      $0A
(1)  184/    81CC : E60A                                dc.b    $E6,$0A
(1)  185/    81CE : 06                  	dc.b	$06
(1)  186/    81CF : (MACRO)             	smpsFMAlterVol      $F6
(1)  186/    81CF : E6F6                                dc.b    $E6,$F6
(1)  187/    81D1 : B10C                	dc.b	nC4, $0C
(1)  188/    81D3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  188/    81D3 : E60A                                dc.b    $E6,$0A
(1)  189/    81D5 : 06                  	dc.b	$06
(1)  190/    81D6 : (MACRO)             	smpsFMAlterVol      $F6
(1)  190/    81D6 : E6F6                                dc.b    $E6,$F6
(1)  191/    81D8 : B00C                	dc.b	nB3, $0C
(1)  192/    81DA : (MACRO)             	smpsFMAlterVol      $0A
(1)  192/    81DA : E60A                                dc.b    $E6,$0A
(1)  193/    81DC : 06                  	dc.b	$06
(1)  194/    81DD : (MACRO)             	smpsFMAlterVol      $F6
(1)  194/    81DD : E6F6                                dc.b    $E6,$F6
(1)  195/    81DF : AF                  	dc.b	nBb3
(1)  196/    81E0 : (MACRO)             	smpsFMAlterVol      $0A
(1)  196/    81E0 : E60A                                dc.b    $E6,$0A
(1)  197/    81E2 : AF                  	dc.b	nBb3
(1)  198/    81E3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  198/    81E3 : E6F6                                dc.b    $E6,$F6
(1)  199/    81E5 : AE                  	dc.b	nA3
(1)  200/    81E6 : (MACRO)             	smpsFMAlterVol      $0A
(1)  200/    81E6 : E60A                                dc.b    $E6,$0A
(1)  201/    81E8 : AE                  	dc.b	nA3
(1)  202/    81E9 : (MACRO)             	smpsFMAlterVol      $F6
(1)  202/    81E9 : E6F6                                dc.b    $E6,$F6
(1)  203/    81EB : AC0C                	dc.b	nG3, $0C
(1)  204/    81ED : (MACRO)             	smpsReturn
(1)  204/    81ED : F9                                  dc.b    $F9
(1)  205/    81EE :                     
(1)  206/    81EE :                     Electoria_Call08:
(1)  207/    81EE : (MACRO)             	smpsAlterPitch      $0C
(1)  207/    81EE :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  207/    81EE : FB0C                                dc.b    $FB,$0C
(1)  208/    81F0 : AF06 80AF 80AF 80AF 	dc.b	nBb3, $06, nRst, nBb3, nRst, nBb3, nRst, nBb3, $0C, nG3, $06, nBb3
             81F8 : 0CAC 06AF         
(1)  209/    81FC : 80B1 80B3 E70C B106 	dc.b	nRst, nC4, nRst, nD4, smpsNoAttack, $0C, nC4, $06, nRst, nBb3, nRst, nC4
             8204 : 80AF 80B1         
(1)  210/    8208 : 80B3 0C80 06B6 12B3 	dc.b	nRst, nD4, $0C, nRst, $06, nF4, $12, nD4, $06, nRst, nC4, $0C
             8210 : 0680 B10C         
(1)  211/    8214 : 8006 B380 4880 0CAA 	dc.b	nRst, $06, nD4, nRst, $48, nRst, $0C, nF3, $06, nRst, nG3, nRst
             821C : 0680 AC80         
(1)  212/    8220 : AF80 B180 B380 B60C 	dc.b	nBb3, nRst, nC4, nRst, nD4, nRst, nF4, $0C, nD4, $06, nRst, nRst
             8228 : B306 8080         
(1)  213/    822C : 0CB3 0680 B680 B380 	dc.b	$0C, nD4, $06, nRst, nF4, nRst, nD4, nRst, nF4, $0C, nG4, $06
             8234 : B60C B806         
(1)  214/    8238 : AF80 B180 B3E7 0CB1 	dc.b	nBb3, nRst, nC4, nRst, nD4, smpsNoAttack, $0C, nC4, $06, nRst, nBb3, nRst
             8240 : 0680 AF80         
(1)  215/    8244 : B180 B30C 8006 B112 	dc.b	nC4, nRst, nD4, $0C, nRst, $06, nC4, $12, nF4, $06, nRst, nF3
             824C : B606 80AA         
(1)  216/    8250 : 6080 0CAF 12B1 0CB6 	dc.b	$60, nRst, $0C, nBb3, $12, nC4, $0C, nF4, $06
             8258 : 06               
(1)  217/    8259 : (MACRO)             	smpsAlterPitch      $F4
(1)  217/    8259 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  217/    8259 : FBF4                                dc.b    $FB,$F4
(1)  218/    825B : (MACRO)             	smpsReturn
(1)  218/    825B : F9                                  dc.b    $F9
(1)  219/    825C :                     
(1)  220/    825C :                     Electoria_Call09:
(1)  221/    825C : (MACRO)             	smpsCall            Electoria_Call13
(1)  221/    825C : F8                          dc.b    $F8
(1)  221/    825D : 3A83                                dc.w    z80_ptr(ELECTORIA_CALL13)
(1)  222/    825F : B30C E706           	dc.b	nD4, $0C, smpsNoAttack, $06
(1)  223/    8263 : (MACRO)             	smpsFMAlterVol      $0A
(1)  223/    8263 : E60A                                dc.b    $E6,$0A
(1)  224/    8265 : (MACRO)             	smpsPan             panRight, $00
(1)  224/    8265 : =$0                 panNone set $00
(1)  224/    8265 : =$40                panRight set $40
(1)  224/    8265 : =$80                panLeft set $80
(1)  224/    8265 : =$C0                panCentre set $C0
(1)  224/    8265 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  224/    8265 : E040                        dc.b $E0,PANRIGHT+$00
(1)  225/    8267 : B3                  	dc.b	nD4
(1)  226/    8268 : (MACRO)             	smpsFMAlterVol      $F6
(1)  226/    8268 : E6F6                                dc.b    $E6,$F6
(1)  227/    826A : (MACRO)             	smpsPan             panCenter, $00
(1)  227/    826A : =$0                 panNone set $00
(1)  227/    826A : =$40                panRight set $40
(1)  227/    826A : =$80                panLeft set $80
(1)  227/    826A : =$C0                panCentre set $C0
(1)  227/    826A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  227/    826A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  228/    826C : B318 B006           	dc.b	nD4, $18, nB3, $06
(1)  229/    8270 : (MACRO)             	smpsFMAlterVol      $0A
(1)  229/    8270 : E60A                                dc.b    $E6,$0A
(1)  230/    8272 : (MACRO)             	smpsPan             panRight, $00
(1)  230/    8272 : =$0                 panNone set $00
(1)  230/    8272 : =$40                panRight set $40
(1)  230/    8272 : =$80                panLeft set $80
(1)  230/    8272 : =$C0                panCentre set $C0
(1)  230/    8272 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  230/    8272 : E040                        dc.b $E0,PANRIGHT+$00
(1)  231/    8274 : B0                  	dc.b	nB3
(1)  232/    8275 : (MACRO)             	smpsFMAlterVol      $F6
(1)  232/    8275 : E6F6                                dc.b    $E6,$F6
(1)  233/    8277 : (MACRO)             	smpsPan             panCenter, $00
(1)  233/    8277 : =$0                 panNone set $00
(1)  233/    8277 : =$40                panRight set $40
(1)  233/    8277 : =$80                panLeft set $80
(1)  233/    8277 : =$C0                panCentre set $C0
(1)  233/    8277 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  233/    8277 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  234/    8279 : B312 B50C           	dc.b	nD4, $12, nE4, $0C
(1)  235/    827D : (MACRO)             	smpsFMAlterVol      $0A
(1)  235/    827D : E60A                                dc.b    $E6,$0A
(1)  236/    827F : (MACRO)             	smpsPan             panRight, $00
(1)  236/    827F : =$0                 panNone set $00
(1)  236/    827F : =$40                panRight set $40
(1)  236/    827F : =$80                panLeft set $80
(1)  236/    827F : =$C0                panCentre set $C0
(1)  236/    827F : =$C0                panCenter set $C0 ; silly Americans :U
(1)  236/    827F : E040                        dc.b $E0,PANRIGHT+$00
(1)  237/    8281 : 06                  	dc.b	$06
(1)  238/    8282 : (MACRO)             	smpsFMAlterVol      $F6
(1)  238/    8282 : E6F6                                dc.b    $E6,$F6
(1)  239/    8284 : (MACRO)             	smpsPan             panCenter, $00
(1)  239/    8284 : =$0                 panNone set $00
(1)  239/    8284 : =$40                panRight set $40
(1)  239/    8284 : =$80                panLeft set $80
(1)  239/    8284 : =$C0                panCentre set $C0
(1)  239/    8284 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  239/    8284 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  240/    8286 : B60C E706           	dc.b	nF4, $0C, smpsNoAttack, $06
(1)  241/    828A : (MACRO)             	smpsFMAlterVol      $0A
(1)  241/    828A : E60A                                dc.b    $E6,$0A
(1)  242/    828C : (MACRO)             	smpsPan             panRight, $00
(1)  242/    828C : =$0                 panNone set $00
(1)  242/    828C : =$40                panRight set $40
(1)  242/    828C : =$80                panLeft set $80
(1)  242/    828C : =$C0                panCentre set $C0
(1)  242/    828C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  242/    828C : E040                        dc.b $E0,PANRIGHT+$00
(1)  243/    828E : B6                  	dc.b	nF4
(1)  244/    828F : (MACRO)             	smpsFMAlterVol      $F6
(1)  244/    828F : E6F6                                dc.b    $E6,$F6
(1)  245/    8291 : (MACRO)             	smpsPan             panCenter, $00
(1)  245/    8291 : =$0                 panNone set $00
(1)  245/    8291 : =$40                panRight set $40
(1)  245/    8291 : =$80                panLeft set $80
(1)  245/    8291 : =$C0                panCentre set $C0
(1)  245/    8291 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  245/    8291 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  246/    8293 : B5                  	dc.b	nE4
(1)  247/    8294 : (MACRO)             	smpsFMAlterVol      $0A
(1)  247/    8294 : E60A                                dc.b    $E6,$0A
(1)  248/    8296 : (MACRO)             	smpsPan             panRight, $00
(1)  248/    8296 : =$0                 panNone set $00
(1)  248/    8296 : =$40                panRight set $40
(1)  248/    8296 : =$80                panLeft set $80
(1)  248/    8296 : =$C0                panCentre set $C0
(1)  248/    8296 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  248/    8296 : E040                        dc.b $E0,PANRIGHT+$00
(1)  249/    8298 : B5                  	dc.b	nE4
(1)  250/    8299 : (MACRO)             	smpsFMAlterVol      $F6
(1)  250/    8299 : E6F6                                dc.b    $E6,$F6
(1)  251/    829B : (MACRO)             	smpsPan             panCenter, $00
(1)  251/    829B : =$0                 panNone set $00
(1)  251/    829B : =$40                panRight set $40
(1)  251/    829B : =$80                panLeft set $80
(1)  251/    829B : =$C0                panCentre set $C0
(1)  251/    829B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  251/    829B : E0C0                        dc.b $E0,PANCENTER+$00
(1)  252/    829D : B6B5                	dc.b	nF4, nE4
(1)  253/    829F : (MACRO)             	smpsFMAlterVol      $0A
(1)  253/    829F : E60A                                dc.b    $E6,$0A
(1)  254/    82A1 : (MACRO)             	smpsPan             panRight, $00
(1)  254/    82A1 : =$0                 panNone set $00
(1)  254/    82A1 : =$40                panRight set $40
(1)  254/    82A1 : =$80                panLeft set $80
(1)  254/    82A1 : =$C0                panCentre set $C0
(1)  254/    82A1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  254/    82A1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  255/    82A3 : B5                  	dc.b	nE4
(1)  256/    82A4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  256/    82A4 : E6F6                                dc.b    $E6,$F6
(1)  257/    82A6 : (MACRO)             	smpsPan             panCenter, $00
(1)  257/    82A6 : =$0                 panNone set $00
(1)  257/    82A6 : =$40                panRight set $40
(1)  257/    82A6 : =$80                panLeft set $80
(1)  257/    82A6 : =$C0                panCentre set $C0
(1)  257/    82A6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  257/    82A6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  258/    82A8 : B30C                	dc.b	nD4, $0C
(1)  259/    82AA : (MACRO)             	smpsFMAlterVol      $0A
(1)  259/    82AA : E60A                                dc.b    $E6,$0A
(1)  260/    82AC : (MACRO)             	smpsPan             panRight, $00
(1)  260/    82AC : =$0                 panNone set $00
(1)  260/    82AC : =$40                panRight set $40
(1)  260/    82AC : =$80                panLeft set $80
(1)  260/    82AC : =$C0                panCentre set $C0
(1)  260/    82AC : =$C0                panCenter set $C0 ; silly Americans :U
(1)  260/    82AC : E040                        dc.b $E0,PANRIGHT+$00
(1)  261/    82AE : 06                  	dc.b	$06
(1)  262/    82AF : (MACRO)             	smpsFMAlterVol      $F6
(1)  262/    82AF : E6F6                                dc.b    $E6,$F6
(1)  263/    82B1 : (MACRO)             	smpsPan             panCenter, $00
(1)  263/    82B1 : =$0                 panNone set $00
(1)  263/    82B1 : =$40                panRight set $40
(1)  263/    82B1 : =$80                panLeft set $80
(1)  263/    82B1 : =$C0                panCentre set $C0
(1)  263/    82B1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  263/    82B1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  264/    82B3 : B1                  	dc.b	nC4
(1)  265/    82B4 : (MACRO)             	smpsFMAlterVol      $0A
(1)  265/    82B4 : E60A                                dc.b    $E6,$0A
(1)  266/    82B6 : (MACRO)             	smpsPan             panRight, $00
(1)  266/    82B6 : =$0                 panNone set $00
(1)  266/    82B6 : =$40                panRight set $40
(1)  266/    82B6 : =$80                panLeft set $80
(1)  266/    82B6 : =$C0                panCentre set $C0
(1)  266/    82B6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  266/    82B6 : E040                        dc.b $E0,PANRIGHT+$00
(1)  267/    82B8 : B1                  	dc.b	nC4
(1)  268/    82B9 : (MACRO)             	smpsFMAlterVol      $F6
(1)  268/    82B9 : E6F6                                dc.b    $E6,$F6
(1)  269/    82BB : (MACRO)             	smpsPan             panCenter, $00
(1)  269/    82BB : =$0                 panNone set $00
(1)  269/    82BB : =$40                panRight set $40
(1)  269/    82BB : =$80                panLeft set $80
(1)  269/    82BB : =$C0                panCentre set $C0
(1)  269/    82BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  269/    82BB : E0C0                        dc.b $E0,PANCENTER+$00
(1)  270/    82BD : B10C B306           	dc.b	nC4, $0C, nD4, $06
(1)  271/    82C1 : (MACRO)             	smpsFMAlterVol      $0A
(1)  271/    82C1 : E60A                                dc.b    $E6,$0A
(1)  272/    82C3 : (MACRO)             	smpsPan             panRight, $00
(1)  272/    82C3 : =$0                 panNone set $00
(1)  272/    82C3 : =$40                panRight set $40
(1)  272/    82C3 : =$80                panLeft set $80
(1)  272/    82C3 : =$C0                panCentre set $C0
(1)  272/    82C3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  272/    82C3 : E040                        dc.b $E0,PANRIGHT+$00
(1)  273/    82C5 : B3                  	dc.b	nD4
(1)  274/    82C6 : (MACRO)             	smpsFMAlterVol      $F6
(1)  274/    82C6 : E6F6                                dc.b    $E6,$F6
(1)  275/    82C8 : (MACRO)             	smpsPan             panCenter, $00
(1)  275/    82C8 : =$0                 panNone set $00
(1)  275/    82C8 : =$40                panRight set $40
(1)  275/    82C8 : =$80                panLeft set $80
(1)  275/    82C8 : =$C0                panCentre set $C0
(1)  275/    82C8 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  275/    82C8 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  276/    82CA : (MACRO)             	smpsReturn
(1)  276/    82CA : F9                                  dc.b    $F9
(1)  277/    82CB :                     
(1)  278/    82CB :                     Electoria_Call0A:
(1)  279/    82CB : (MACRO)             	smpsCall            Electoria_Call13
(1)  279/    82CB : F8                          dc.b    $F8
(1)  279/    82CC : 3A83                                dc.w    z80_ptr(ELECTORIA_CALL13)
(1)  280/    82CE : B60C E706           	dc.b	nF4, $0C, smpsNoAttack, $06
(1)  281/    82D2 : (MACRO)             	smpsFMAlterVol      $0A
(1)  281/    82D2 : E60A                                dc.b    $E6,$0A
(1)  282/    82D4 : (MACRO)             	smpsPan             panRight, $00
(1)  282/    82D4 : =$0                 panNone set $00
(1)  282/    82D4 : =$40                panRight set $40
(1)  282/    82D4 : =$80                panLeft set $80
(1)  282/    82D4 : =$C0                panCentre set $C0
(1)  282/    82D4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  282/    82D4 : E040                        dc.b $E0,PANRIGHT+$00
(1)  283/    82D6 : B6                  	dc.b	nF4
(1)  284/    82D7 : (MACRO)             	smpsFMAlterVol      $F6
(1)  284/    82D7 : E6F6                                dc.b    $E6,$F6
(1)  285/    82D9 : (MACRO)             	smpsPan             panCenter, $00
(1)  285/    82D9 : =$0                 panNone set $00
(1)  285/    82D9 : =$40                panRight set $40
(1)  285/    82D9 : =$80                panLeft set $80
(1)  285/    82D9 : =$C0                panCentre set $C0
(1)  285/    82D9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  285/    82D9 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  286/    82DB : B618 B306           	dc.b	nF4, $18, nD4, $06
(1)  287/    82DF : (MACRO)             	smpsFMAlterVol      $0A
(1)  287/    82DF : E60A                                dc.b    $E6,$0A
(1)  288/    82E1 : (MACRO)             	smpsPan             panRight, $00
(1)  288/    82E1 : =$0                 panNone set $00
(1)  288/    82E1 : =$40                panRight set $40
(1)  288/    82E1 : =$80                panLeft set $80
(1)  288/    82E1 : =$C0                panCentre set $C0
(1)  288/    82E1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  288/    82E1 : E040                        dc.b $E0,PANRIGHT+$00
(1)  289/    82E3 : B3                  	dc.b	nD4
(1)  290/    82E4 : (MACRO)             	smpsFMAlterVol      $F6
(1)  290/    82E4 : E6F6                                dc.b    $E6,$F6
(1)  291/    82E6 : (MACRO)             	smpsPan             panCenter, $00
(1)  291/    82E6 : =$0                 panNone set $00
(1)  291/    82E6 : =$40                panRight set $40
(1)  291/    82E6 : =$80                panLeft set $80
(1)  291/    82E6 : =$C0                panCentre set $C0
(1)  291/    82E6 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  291/    82E6 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  292/    82E8 : B612 B80C           	dc.b	nF4, $12, nG4, $0C
(1)  293/    82EC : (MACRO)             	smpsFMAlterVol      $0A
(1)  293/    82EC : E60A                                dc.b    $E6,$0A
(1)  294/    82EE : (MACRO)             	smpsPan             panRight, $00
(1)  294/    82EE : =$0                 panNone set $00
(1)  294/    82EE : =$40                panRight set $40
(1)  294/    82EE : =$80                panLeft set $80
(1)  294/    82EE : =$C0                panCentre set $C0
(1)  294/    82EE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  294/    82EE : E040                        dc.b $E0,PANRIGHT+$00
(1)  295/    82F0 : 06                  	dc.b	$06
(1)  296/    82F1 : (MACRO)             	smpsFMAlterVol      $F6
(1)  296/    82F1 : E6F6                                dc.b    $E6,$F6
(1)  297/    82F3 : (MACRO)             	smpsPan             panCenter, $00
(1)  297/    82F3 : =$0                 panNone set $00
(1)  297/    82F3 : =$40                panRight set $40
(1)  297/    82F3 : =$80                panLeft set $80
(1)  297/    82F3 : =$C0                panCentre set $C0
(1)  297/    82F3 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  297/    82F3 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  298/    82F5 : BC0C E706           	dc.b	nB4, $0C, smpsNoAttack, $06
(1)  299/    82F9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  299/    82F9 : E60A                                dc.b    $E6,$0A
(1)  300/    82FB : (MACRO)             	smpsPan             panRight, $00
(1)  300/    82FB : =$0                 panNone set $00
(1)  300/    82FB : =$40                panRight set $40
(1)  300/    82FB : =$80                panLeft set $80
(1)  300/    82FB : =$C0                panCentre set $C0
(1)  300/    82FB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  300/    82FB : E040                        dc.b $E0,PANRIGHT+$00
(1)  301/    82FD : BC                  	dc.b	nB4
(1)  302/    82FE : (MACRO)             	smpsFMAlterVol      $F6
(1)  302/    82FE : E6F6                                dc.b    $E6,$F6
(1)  303/    8300 : (MACRO)             	smpsPan             panCenter, $00
(1)  303/    8300 : =$0                 panNone set $00
(1)  303/    8300 : =$40                panRight set $40
(1)  303/    8300 : =$80                panLeft set $80
(1)  303/    8300 : =$C0                panCentre set $C0
(1)  303/    8300 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  303/    8300 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  304/    8302 : BD                  	dc.b	nC5
(1)  305/    8303 : (MACRO)             	smpsFMAlterVol      $0A
(1)  305/    8303 : E60A                                dc.b    $E6,$0A
(1)  306/    8305 : (MACRO)             	smpsPan             panRight, $00
(1)  306/    8305 : =$0                 panNone set $00
(1)  306/    8305 : =$40                panRight set $40
(1)  306/    8305 : =$80                panLeft set $80
(1)  306/    8305 : =$C0                panCentre set $C0
(1)  306/    8305 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  306/    8305 : E040                        dc.b $E0,PANRIGHT+$00
(1)  307/    8307 : BD                  	dc.b	nC5
(1)  308/    8308 : (MACRO)             	smpsFMAlterVol      $F6
(1)  308/    8308 : E6F6                                dc.b    $E6,$F6
(1)  309/    830A : (MACRO)             	smpsPan             panCenter, $00
(1)  309/    830A : =$0                 panNone set $00
(1)  309/    830A : =$40                panRight set $40
(1)  309/    830A : =$80                panLeft set $80
(1)  309/    830A : =$C0                panCentre set $C0
(1)  309/    830A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  309/    830A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  310/    830C : BCBA                	dc.b	nB4, nA4
(1)  311/    830E : (MACRO)             	smpsFMAlterVol      $0A
(1)  311/    830E : E60A                                dc.b    $E6,$0A
(1)  312/    8310 : (MACRO)             	smpsPan             panRight, $00
(1)  312/    8310 : =$0                 panNone set $00
(1)  312/    8310 : =$40                panRight set $40
(1)  312/    8310 : =$80                panLeft set $80
(1)  312/    8310 : =$C0                panCentre set $C0
(1)  312/    8310 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  312/    8310 : E040                        dc.b $E0,PANRIGHT+$00
(1)  313/    8312 : BA                  	dc.b	nA4
(1)  314/    8313 : (MACRO)             	smpsFMAlterVol      $F6
(1)  314/    8313 : E6F6                                dc.b    $E6,$F6
(1)  315/    8315 : (MACRO)             	smpsPan             panCenter, $00
(1)  315/    8315 : =$0                 panNone set $00
(1)  315/    8315 : =$40                panRight set $40
(1)  315/    8315 : =$80                panLeft set $80
(1)  315/    8315 : =$C0                panCentre set $C0
(1)  315/    8315 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  315/    8315 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  316/    8317 : BF0C                	dc.b	nD5, $0C
(1)  317/    8319 : (MACRO)             	smpsFMAlterVol      $0A
(1)  317/    8319 : E60A                                dc.b    $E6,$0A
(1)  318/    831B : (MACRO)             	smpsPan             panRight, $00
(1)  318/    831B : =$0                 panNone set $00
(1)  318/    831B : =$40                panRight set $40
(1)  318/    831B : =$80                panLeft set $80
(1)  318/    831B : =$C0                panCentre set $C0
(1)  318/    831B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  318/    831B : E040                        dc.b $E0,PANRIGHT+$00
(1)  319/    831D : 06                  	dc.b	$06
(1)  320/    831E : (MACRO)             	smpsFMAlterVol      $F6
(1)  320/    831E : E6F6                                dc.b    $E6,$F6
(1)  321/    8320 : (MACRO)             	smpsPan             panCenter, $00
(1)  321/    8320 : =$0                 panNone set $00
(1)  321/    8320 : =$40                panRight set $40
(1)  321/    8320 : =$80                panLeft set $80
(1)  321/    8320 : =$C0                panCentre set $C0
(1)  321/    8320 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  321/    8320 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  322/    8322 : B6                  	dc.b	nF4
(1)  323/    8323 : (MACRO)             	smpsFMAlterVol      $0A
(1)  323/    8323 : E60A                                dc.b    $E6,$0A
(1)  324/    8325 : (MACRO)             	smpsPan             panRight, $00
(1)  324/    8325 : =$0                 panNone set $00
(1)  324/    8325 : =$40                panRight set $40
(1)  324/    8325 : =$80                panLeft set $80
(1)  324/    8325 : =$C0                panCentre set $C0
(1)  324/    8325 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  324/    8325 : E040                        dc.b $E0,PANRIGHT+$00
(1)  325/    8327 : B6                  	dc.b	nF4
(1)  326/    8328 : (MACRO)             	smpsFMAlterVol      $F6
(1)  326/    8328 : E6F6                                dc.b    $E6,$F6
(1)  327/    832A : (MACRO)             	smpsPan             panCenter, $00
(1)  327/    832A : =$0                 panNone set $00
(1)  327/    832A : =$40                panRight set $40
(1)  327/    832A : =$80                panLeft set $80
(1)  327/    832A : =$C0                panCentre set $C0
(1)  327/    832A : =$C0                panCenter set $C0 ; silly Americans :U
(1)  327/    832A : E0C0                        dc.b $E0,PANCENTER+$00
(1)  328/    832C : B60C B806           	dc.b	nF4, $0C, nG4, $06
(1)  329/    8330 : (MACRO)             	smpsFMAlterVol      $0A
(1)  329/    8330 : E60A                                dc.b    $E6,$0A
(1)  330/    8332 : (MACRO)             	smpsPan             panRight, $00
(1)  330/    8332 : =$0                 panNone set $00
(1)  330/    8332 : =$40                panRight set $40
(1)  330/    8332 : =$80                panLeft set $80
(1)  330/    8332 : =$C0                panCentre set $C0
(1)  330/    8332 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  330/    8332 : E040                        dc.b $E0,PANRIGHT+$00
(1)  331/    8334 : B8                  	dc.b	nG4
(1)  332/    8335 : (MACRO)             	smpsFMAlterVol      $F6
(1)  332/    8335 : E6F6                                dc.b    $E6,$F6
(1)  333/    8337 : (MACRO)             	smpsPan             panCenter, $00
(1)  333/    8337 : =$0                 panNone set $00
(1)  333/    8337 : =$40                panRight set $40
(1)  333/    8337 : =$80                panLeft set $80
(1)  333/    8337 : =$C0                panCentre set $C0
(1)  333/    8337 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  333/    8337 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  334/    8339 : (MACRO)             	smpsReturn
(1)  334/    8339 : F9                                  dc.b    $F9
(1)  335/    833A :                     
(1)  336/    833A :                     Electoria_Call13:
(1)  337/    833A : 800C B6B8 0680 06   	dc.b	nRst, $0C, nF4, nG4, $06, nRst, $06
(1)  338/    8341 : (MACRO)             	smpsFMAlterVol      $0A
(1)  338/    8341 : E60A                                dc.b    $E6,$0A
(1)  339/    8343 : (MACRO)             	smpsPan             panRight, $00
(1)  339/    8343 : =$0                 panNone set $00
(1)  339/    8343 : =$40                panRight set $40
(1)  339/    8343 : =$80                panLeft set $80
(1)  339/    8343 : =$C0                panCentre set $C0
(1)  339/    8343 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  339/    8343 : E040                        dc.b $E0,PANRIGHT+$00
(1)  340/    8345 : B880                	dc.b	nG4, nRst
(1)  341/    8347 : (MACRO)             	smpsFMAlterVol      $F6
(1)  341/    8347 : E6F6                                dc.b    $E6,$F6
(1)  342/    8349 : (MACRO)             	smpsPan             panCenter, $00
(1)  342/    8349 : =$0                 panNone set $00
(1)  342/    8349 : =$40                panRight set $40
(1)  342/    8349 : =$80                panLeft set $80
(1)  342/    8349 : =$C0                panCentre set $C0
(1)  342/    8349 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  342/    8349 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  343/    834B : BC12 B806           	dc.b	nB4, $12, nG4, $06
(1)  344/    834F : (MACRO)             	smpsFMAlterVol      $0A
(1)  344/    834F : E60A                                dc.b    $E6,$0A
(1)  345/    8351 : (MACRO)             	smpsPan             panRight, $00
(1)  345/    8351 : =$0                 panNone set $00
(1)  345/    8351 : =$40                panRight set $40
(1)  345/    8351 : =$80                panLeft set $80
(1)  345/    8351 : =$C0                panCentre set $C0
(1)  345/    8351 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  345/    8351 : E040                        dc.b $E0,PANRIGHT+$00
(1)  346/    8353 : 0680                	dc.b	$06, nRst
(1)  347/    8355 : (MACRO)             	smpsFMAlterVol      $F6
(1)  347/    8355 : E6F6                                dc.b    $E6,$F6
(1)  348/    8357 : (MACRO)             	smpsPan             panCenter, $00
(1)  348/    8357 : =$0                 panNone set $00
(1)  348/    8357 : =$40                panRight set $40
(1)  348/    8357 : =$80                panLeft set $80
(1)  348/    8357 : =$C0                panCentre set $C0
(1)  348/    8357 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  348/    8357 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  349/    8359 : BD0C E70C BC06      	dc.b	nC5, $0C, smpsNoAttack, $0C, nB4, $06
(1)  350/    835F : (MACRO)             	smpsFMAlterVol      $0A
(1)  350/    835F : E60A                                dc.b    $E6,$0A
(1)  351/    8361 : (MACRO)             	smpsPan             panRight, $00
(1)  351/    8361 : =$0                 panNone set $00
(1)  351/    8361 : =$40                panRight set $40
(1)  351/    8361 : =$80                panLeft set $80
(1)  351/    8361 : =$C0                panCentre set $C0
(1)  351/    8361 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  351/    8361 : E040                        dc.b $E0,PANRIGHT+$00
(1)  352/    8363 : BC                  	dc.b	nB4
(1)  353/    8364 : (MACRO)             	smpsFMAlterVol      $F6
(1)  353/    8364 : E6F6                                dc.b    $E6,$F6
(1)  354/    8366 : (MACRO)             	smpsPan             panCenter, $00
(1)  354/    8366 : =$0                 panNone set $00
(1)  354/    8366 : =$40                panRight set $40
(1)  354/    8366 : =$80                panLeft set $80
(1)  354/    8366 : =$C0                panCentre set $C0
(1)  354/    8366 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  354/    8366 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  355/    8368 : BDBF                	dc.b	nC5, nD5
(1)  356/    836A : (MACRO)             	smpsFMAlterVol      $0A
(1)  356/    836A : E60A                                dc.b    $E6,$0A
(1)  357/    836C : (MACRO)             	smpsPan             panRight, $00
(1)  357/    836C : =$0                 panNone set $00
(1)  357/    836C : =$40                panRight set $40
(1)  357/    836C : =$80                panLeft set $80
(1)  357/    836C : =$C0                panCentre set $C0
(1)  357/    836C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  357/    836C : E040                        dc.b $E0,PANRIGHT+$00
(1)  358/    836E : BF                  	dc.b	nD5
(1)  359/    836F : (MACRO)             	smpsFMAlterVol      $F6
(1)  359/    836F : E6F6                                dc.b    $E6,$F6
(1)  360/    8371 : (MACRO)             	smpsPan             panCenter, $00
(1)  360/    8371 : =$0                 panNone set $00
(1)  360/    8371 : =$40                panRight set $40
(1)  360/    8371 : =$80                panLeft set $80
(1)  360/    8371 : =$C0                panCentre set $C0
(1)  360/    8371 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  360/    8371 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  361/    8373 : BD0C                	dc.b	nC5, $0C
(1)  362/    8375 : (MACRO)             	smpsFMAlterVol      $0A
(1)  362/    8375 : E60A                                dc.b    $E6,$0A
(1)  363/    8377 : (MACRO)             	smpsPan             panRight, $00
(1)  363/    8377 : =$0                 panNone set $00
(1)  363/    8377 : =$40                panRight set $40
(1)  363/    8377 : =$80                panLeft set $80
(1)  363/    8377 : =$C0                panCentre set $C0
(1)  363/    8377 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  363/    8377 : E040                        dc.b $E0,PANRIGHT+$00
(1)  364/    8379 : 06                  	dc.b	$06
(1)  365/    837A : (MACRO)             	smpsFMAlterVol      $F6
(1)  365/    837A : E6F6                                dc.b    $E6,$F6
(1)  366/    837C : (MACRO)             	smpsPan             panCenter, $00
(1)  366/    837C : =$0                 panNone set $00
(1)  366/    837C : =$40                panRight set $40
(1)  366/    837C : =$80                panLeft set $80
(1)  366/    837C : =$C0                panCentre set $C0
(1)  366/    837C : =$C0                panCenter set $C0 ; silly Americans :U
(1)  366/    837C : E0C0                        dc.b $E0,PANCENTER+$00
(1)  367/    837E : BC0C                	dc.b	nB4, $0C
(1)  368/    8380 : (MACRO)             	smpsFMAlterVol      $0A
(1)  368/    8380 : E60A                                dc.b    $E6,$0A
(1)  369/    8382 : (MACRO)             	smpsPan             panRight, $00
(1)  369/    8382 : =$0                 panNone set $00
(1)  369/    8382 : =$40                panRight set $40
(1)  369/    8382 : =$80                panLeft set $80
(1)  369/    8382 : =$C0                panCentre set $C0
(1)  369/    8382 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  369/    8382 : E040                        dc.b $E0,PANRIGHT+$00
(1)  370/    8384 : 06                  	dc.b	$06
(1)  371/    8385 : (MACRO)             	smpsFMAlterVol      $F6
(1)  371/    8385 : E6F6                                dc.b    $E6,$F6
(1)  372/    8387 : (MACRO)             	smpsPan             panCenter, $00
(1)  372/    8387 : =$0                 panNone set $00
(1)  372/    8387 : =$40                panRight set $40
(1)  372/    8387 : =$80                panLeft set $80
(1)  372/    8387 : =$C0                panCentre set $C0
(1)  372/    8387 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  372/    8387 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  373/    8389 : BA12                	dc.b	nA4, $12
(1)  374/    838B : (MACRO)             	smpsFMAlterVol      $0A
(1)  374/    838B : E60A                                dc.b    $E6,$0A
(1)  375/    838D : (MACRO)             	smpsPan             panRight, $00
(1)  375/    838D : =$0                 panNone set $00
(1)  375/    838D : =$40                panRight set $40
(1)  375/    838D : =$80                panLeft set $80
(1)  375/    838D : =$C0                panCentre set $C0
(1)  375/    838D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  375/    838D : E040                        dc.b $E0,PANRIGHT+$00
(1)  376/    838F : 0C                  	dc.b	$0C
(1)  377/    8390 : (MACRO)             	smpsFMAlterVol      $F6
(1)  377/    8390 : E6F6                                dc.b    $E6,$F6
(1)  378/    8392 : (MACRO)             	smpsPan             panCenter, $00
(1)  378/    8392 : =$0                 panNone set $00
(1)  378/    8392 : =$40                panRight set $40
(1)  378/    8392 : =$80                panLeft set $80
(1)  378/    8392 : =$C0                panCentre set $C0
(1)  378/    8392 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  378/    8392 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  379/    8394 : B6B8 0680 06        	dc.b	nF4, nG4, $06, nRst, $06
(1)  380/    8399 : (MACRO)             	smpsFMAlterVol      $0A
(1)  380/    8399 : E60A                                dc.b    $E6,$0A
(1)  381/    839B : (MACRO)             	smpsPan             panRight, $00
(1)  381/    839B : =$0                 panNone set $00
(1)  381/    839B : =$40                panRight set $40
(1)  381/    839B : =$80                panLeft set $80
(1)  381/    839B : =$C0                panCentre set $C0
(1)  381/    839B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  381/    839B : E040                        dc.b $E0,PANRIGHT+$00
(1)  382/    839D : B880                	dc.b	nG4, nRst
(1)  383/    839F : (MACRO)             	smpsFMAlterVol      $F6
(1)  383/    839F : E6F6                                dc.b    $E6,$F6
(1)  384/    83A1 : (MACRO)             	smpsPan             panCenter, $00
(1)  384/    83A1 : =$0                 panNone set $00
(1)  384/    83A1 : =$40                panRight set $40
(1)  384/    83A1 : =$80                panLeft set $80
(1)  384/    83A1 : =$C0                panCentre set $C0
(1)  384/    83A1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  384/    83A1 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  385/    83A3 : BC12 B806           	dc.b	nB4, $12, nG4, $06
(1)  386/    83A7 : (MACRO)             	smpsFMAlterVol      $0A
(1)  386/    83A7 : E60A                                dc.b    $E6,$0A
(1)  387/    83A9 : (MACRO)             	smpsPan             panRight, $00
(1)  387/    83A9 : =$0                 panNone set $00
(1)  387/    83A9 : =$40                panRight set $40
(1)  387/    83A9 : =$80                panLeft set $80
(1)  387/    83A9 : =$C0                panCentre set $C0
(1)  387/    83A9 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  387/    83A9 : E040                        dc.b $E0,PANRIGHT+$00
(1)  388/    83AB : 0C                  	dc.b	$0C
(1)  389/    83AC : (MACRO)             	smpsFMAlterVol      $F6
(1)  389/    83AC : E6F6                                dc.b    $E6,$F6
(1)  390/    83AE : (MACRO)             	smpsPan             panCenter, $00
(1)  390/    83AE : =$0                 panNone set $00
(1)  390/    83AE : =$40                panRight set $40
(1)  390/    83AE : =$80                panLeft set $80
(1)  390/    83AE : =$C0                panCentre set $C0
(1)  390/    83AE : =$C0                panCenter set $C0 ; silly Americans :U
(1)  390/    83AE : E0C0                        dc.b $E0,PANCENTER+$00
(1)  391/    83B0 : B6E7 06             	dc.b	nF4, smpsNoAttack, $06
(1)  392/    83B3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  392/    83B3 : E60A                                dc.b    $E6,$0A
(1)  393/    83B5 : (MACRO)             	smpsPan             panRight, $00
(1)  393/    83B5 : =$0                 panNone set $00
(1)  393/    83B5 : =$40                panRight set $40
(1)  393/    83B5 : =$80                panLeft set $80
(1)  393/    83B5 : =$C0                panCentre set $C0
(1)  393/    83B5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  393/    83B5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  394/    83B7 : B6                  	dc.b	nF4
(1)  395/    83B8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  395/    83B8 : E6F6                                dc.b    $E6,$F6
(1)  396/    83BA : (MACRO)             	smpsPan             panCenter, $00
(1)  396/    83BA : =$0                 panNone set $00
(1)  396/    83BA : =$40                panRight set $40
(1)  396/    83BA : =$80                panLeft set $80
(1)  396/    83BA : =$C0                panCentre set $C0
(1)  396/    83BA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  396/    83BA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  397/    83BC : B8                  	dc.b	nG4
(1)  398/    83BD : (MACRO)             	smpsFMAlterVol      $0A
(1)  398/    83BD : E60A                                dc.b    $E6,$0A
(1)  399/    83BF : (MACRO)             	smpsPan             panRight, $00
(1)  399/    83BF : =$0                 panNone set $00
(1)  399/    83BF : =$40                panRight set $40
(1)  399/    83BF : =$80                panLeft set $80
(1)  399/    83BF : =$C0                panCentre set $C0
(1)  399/    83BF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  399/    83BF : E040                        dc.b $E0,PANRIGHT+$00
(1)  400/    83C1 : B8                  	dc.b	nG4
(1)  401/    83C2 : (MACRO)             	smpsFMAlterVol      $F6
(1)  401/    83C2 : E6F6                                dc.b    $E6,$F6
(1)  402/    83C4 : (MACRO)             	smpsPan             panCenter, $00
(1)  402/    83C4 : =$0                 panNone set $00
(1)  402/    83C4 : =$40                panRight set $40
(1)  402/    83C4 : =$80                panLeft set $80
(1)  402/    83C4 : =$C0                panCentre set $C0
(1)  402/    83C4 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  402/    83C4 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  403/    83C6 : B6B5                	dc.b	nF4, nE4
(1)  404/    83C8 : (MACRO)             	smpsFMAlterVol      $0A
(1)  404/    83C8 : E60A                                dc.b    $E6,$0A
(1)  405/    83CA : (MACRO)             	smpsPan             panRight, $00
(1)  405/    83CA : =$0                 panNone set $00
(1)  405/    83CA : =$40                panRight set $40
(1)  405/    83CA : =$80                panLeft set $80
(1)  405/    83CA : =$C0                panCentre set $C0
(1)  405/    83CA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  405/    83CA : E040                        dc.b $E0,PANRIGHT+$00
(1)  406/    83CC : B5                  	dc.b	nE4
(1)  407/    83CD : (MACRO)             	smpsFMAlterVol      $F6
(1)  407/    83CD : E6F6                                dc.b    $E6,$F6
(1)  408/    83CF : (MACRO)             	smpsPan             panCenter, $00
(1)  408/    83CF : =$0                 panNone set $00
(1)  408/    83CF : =$40                panRight set $40
(1)  408/    83CF : =$80                panLeft set $80
(1)  408/    83CF : =$C0                panCentre set $C0
(1)  408/    83CF : =$C0                panCenter set $C0 ; silly Americans :U
(1)  408/    83CF : E0C0                        dc.b $E0,PANCENTER+$00
(1)  409/    83D1 : B31E                	dc.b	nD4, $1E
(1)  410/    83D3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  410/    83D3 : E60A                                dc.b    $E6,$0A
(1)  411/    83D5 : (MACRO)             	smpsPan             panRight, $00
(1)  411/    83D5 : =$0                 panNone set $00
(1)  411/    83D5 : =$40                panRight set $40
(1)  411/    83D5 : =$80                panLeft set $80
(1)  411/    83D5 : =$C0                panCentre set $C0
(1)  411/    83D5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  411/    83D5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  412/    83D7 : 0C                  	dc.b	$0C
(1)  413/    83D8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  413/    83D8 : E6F6                                dc.b    $E6,$F6
(1)  414/    83DA : (MACRO)             	smpsPan             panCenter, $00
(1)  414/    83DA : =$0                 panNone set $00
(1)  414/    83DA : =$40                panRight set $40
(1)  414/    83DA : =$80                panLeft set $80
(1)  414/    83DA : =$C0                panCentre set $C0
(1)  414/    83DA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  414/    83DA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  415/    83DC : (MACRO)             	smpsReturn
(1)  415/    83DC : F9                                  dc.b    $F9
(1)  416/    83DD :                     
(1)  417/    83DD :                     ; FM3 Data
(1)  418/    83DD :                     Electoria_FM3:
(1)  419/    83DD : (MACRO)             	smpsSetvoice        $03
(1)  419/    83DD :  (MACRO-2)                  smpsFMvoice $03
(1)  419/    83DD : EF03                                dc.b    $EF,$03
(1)  420/    83DF : 8060                	dc.b	nRst, $60
(1)  421/    83E1 : (MACRO)             	smpsAlterPitch      $FA
(1)  421/    83E1 :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  421/    83E1 : FBFA                                dc.b    $FB,$FA
(1)  422/    83E3 :                     
(1)  423/    83E3 :                     Electoria_Loop11:
(1)  424/    83E3 : (MACRO)             	smpsCall            Electoria_Call04
(1)  424/    83E3 : F8                          dc.b    $F8
(1)  424/    83E4 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  425/    83E6 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop11
(1)  425/    83E6 : F7                          dc.b    $F7
(1)  425/    83E7 : 0008                        dc.b    $00,$08
(1)  425/    83E9 : E383                                dc.w    z80_ptr(ELECTORIA_LOOP11)
(1)  426/    83EB : (MACRO)             	smpsAlterPitch      $06
(1)  426/    83EB :  (MACRO-2)                  smpsChangeTransposition $06
(1)  426/    83EB : FB06                                dc.b    $FB,$06
(1)  427/    83ED : (MACRO)             	smpsFMAlterVol      $FC
(1)  427/    83ED : E6FC                                dc.b    $E6,$FC
(1)  428/    83EF :                     
(1)  429/    83EF :                     Electoria_Jump00:
(1)  430/    83EF : (MACRO)             	smpsSetvoice        $01
(1)  430/    83EF :  (MACRO-2)                  smpsFMvoice $01
(1)  430/    83EF : EF01                                dc.b    $EF,$01
(1)  431/    83F1 : (MACRO)             	smpsPan             panLeft, $00
(1)  431/    83F1 : =$0                 panNone set $00
(1)  431/    83F1 : =$40                panRight set $40
(1)  431/    83F1 : =$80                panLeft set $80
(1)  431/    83F1 : =$C0                panCentre set $C0
(1)  431/    83F1 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  431/    83F1 : E080                        dc.b $E0,PANLEFT+$00
(1)  432/    83F3 : (MACRO)             	smpsModSet          $01, $01, $02, $03
(1)  432/    83F3 : F0                          dc.b    $F0
(1)  432/    83F4 : 0101 0203                           dc.b    $01,$01,$02,$03
(1)  432/    83F8 :                             ;dc.b   $01,$02,$03
(1)  433/    83F8 : (MACRO)             	smpsAlterPitch      $0C
(1)  433/    83F8 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  433/    83F8 : FB0C                                dc.b    $FB,$0C
(1)  434/    83FA : 8006 AF12 AC06 803C 	dc.b	nRst, $06, nBb3, $12, nG3, $06, nRst, $3C, nF3, $06, nG3, nC4
             8402 : AA06 ACB1         
(1)  435/    8406 : 80B1 80B1 0CB3 06AC 	dc.b	nRst, nC4, nRst, nC4, $0C, nD4, $06, nG3, smpsNoAttack, $0C, nF3, nG3
             840E : E70C AAAC         
(1)  436/    8412 : 0680 AC0C 805A      	dc.b	$06, nRst, nG3, $0C, nRst, $5A
(1)  437/    8418 : (MACRO)             	smpsSetvoice        $02
(1)  437/    8418 :  (MACRO-2)                  smpsFMvoice $02
(1)  437/    8418 : EF02                                dc.b    $EF,$02
(1)  438/    841A : (MACRO)             	smpsFMAlterVol      $03
(1)  438/    841A : E603                                dc.b    $E6,$03
(1)  439/    841C : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  439/    841C : F0                          dc.b    $F0
(1)  439/    841D : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  439/    8421 :                             ;dc.b   $00,$00,$00
(1)  440/    8421 : (MACRO)             	smpsPan             panRight, $00
(1)  440/    8421 : =$0                 panNone set $00
(1)  440/    8421 : =$40                panRight set $40
(1)  440/    8421 : =$80                panLeft set $80
(1)  440/    8421 : =$C0                panCentre set $C0
(1)  440/    8421 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  440/    8421 : E040                        dc.b $E0,PANRIGHT+$00
(1)  441/    8423 : (MACRO)             	smpsAlterPitch      $E8
(1)  441/    8423 :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  441/    8423 : FBE8                                dc.b    $FB,$E8
(1)  442/    8425 : (MACRO)             	smpsCall            Electoria_Call06
(1)  442/    8425 : F8                          dc.b    $F8
(1)  442/    8426 : AE81                                dc.w    z80_ptr(ELECTORIA_CALL06)
(1)  443/    8428 : (MACRO)             	smpsModSet          $01, $01, $01, $05
(1)  443/    8428 : F0                          dc.b    $F0
(1)  443/    8429 : 0101 0105                           dc.b    $01,$01,$01,$05
(1)  443/    842D :                             ;dc.b   $01,$01,$05
(1)  444/    842D : (MACRO)             	smpsPan             panLeft, $00
(1)  444/    842D : =$0                 panNone set $00
(1)  444/    842D : =$40                panRight set $40
(1)  444/    842D : =$80                panLeft set $80
(1)  444/    842D : =$C0                panCentre set $C0
(1)  444/    842D : =$C0                panCenter set $C0 ; silly Americans :U
(1)  444/    842D : E080                        dc.b $E0,PANLEFT+$00
(1)  445/    842F : (MACRO)             	smpsAlterPitch      $18
(1)  445/    842F :  (MACRO-2)                  smpsChangeTransposition $18
(1)  445/    842F : FB18                                dc.b    $FB,$18
(1)  446/    8431 : (MACRO)             	smpsSetvoice        $01
(1)  446/    8431 :  (MACRO-2)                  smpsFMvoice $01
(1)  446/    8431 : EF01                                dc.b    $EF,$01
(1)  447/    8433 : (MACRO)             	smpsFMAlterVol      $FD
(1)  447/    8433 : E6FD                                dc.b    $E6,$FD
(1)  448/    8435 : 8006 AF0C E70C AC06 	dc.b	nRst, $06, nBb3, $0C, smpsNoAttack, $0C, nG3, $06, nRst, nRst, $3C, nF4
             843D : 8080 3CB6         
(1)  449/    8441 : 0CE7 0680 B580 B3B5 	dc.b	$0C, smpsNoAttack, $06, nRst, nE4, nRst, nD4, nE4, nRst, nD4, smpsNoAttack, nD4
             8449 : 80B3 E7B3         
(1)  450/    844D : 80B1 80AF B180 B0E7 	dc.b	nRst, nC4, nRst, nBb3, nC4, nRst, nB3, smpsNoAttack, $5A
             8455 : 5A               
(1)  451/    8456 : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  451/    8456 : F0                          dc.b    $F0
(1)  451/    8457 : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  451/    845B :                             ;dc.b   $00,$00,$00
(1)  452/    845B : (MACRO)             	smpsPan             panRight, $00
(1)  452/    845B : =$0                 panNone set $00
(1)  452/    845B : =$40                panRight set $40
(1)  452/    845B : =$80                panLeft set $80
(1)  452/    845B : =$C0                panCentre set $C0
(1)  452/    845B : =$C0                panCenter set $C0 ; silly Americans :U
(1)  452/    845B : E040                        dc.b $E0,PANRIGHT+$00
(1)  453/    845D : (MACRO)             	smpsAlterPitch      $E8
(1)  453/    845D :  (MACRO-2)                  smpsChangeTransposition $E8
(1)  453/    845D : FBE8                                dc.b    $FB,$E8
(1)  454/    845F : (MACRO)             	smpsSetvoice        $02
(1)  454/    845F :  (MACRO-2)                  smpsFMvoice $02
(1)  454/    845F : EF02                                dc.b    $EF,$02
(1)  455/    8461 : (MACRO)             	smpsFMAlterVol      $03
(1)  455/    8461 : E603                                dc.b    $E6,$03
(1)  456/    8463 : (MACRO)             	smpsCall            Electoria_Call07
(1)  456/    8463 : F8                          dc.b    $F8
(1)  456/    8464 : C381                                dc.w    z80_ptr(ELECTORIA_CALL07)
(1)  457/    8466 : (MACRO)             	smpsPan             panLeft, $00
(1)  457/    8466 : =$0                 panNone set $00
(1)  457/    8466 : =$40                panRight set $40
(1)  457/    8466 : =$80                panLeft set $80
(1)  457/    8466 : =$C0                panCentre set $C0
(1)  457/    8466 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  457/    8466 : E080                        dc.b $E0,PANLEFT+$00
(1)  458/    8468 : (MACRO)             	smpsSetvoice        $01
(1)  458/    8468 :  (MACRO-2)                  smpsFMvoice $01
(1)  458/    8468 : EF01                                dc.b    $EF,$01
(1)  459/    846A : (MACRO)             	smpsFMAlterVol      $FD
(1)  459/    846A : E6FD                                dc.b    $E6,$FD
(1)  460/    846C : (MACRO)             	smpsAlterPitch      $0C
(1)  460/    846C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  460/    846C : FB0C                                dc.b    $FB,$0C
(1)  461/    846E : (MACRO)             	smpsModSet          $01, $01, $02, $03
(1)  461/    846E : F0                          dc.b    $F0
(1)  461/    846F : 0101 0203                           dc.b    $01,$01,$02,$03
(1)  461/    8473 :                             ;dc.b   $01,$02,$03
(1)  462/    8473 : 8006                	dc.b	nRst, $06
(1)  463/    8475 : (MACRO)             	smpsCall            Electoria_Call08
(1)  463/    8475 : F8                          dc.b    $F8
(1)  463/    8476 : EE81                                dc.w    z80_ptr(ELECTORIA_CALL08)
(1)  464/    8478 : 802A                	dc.b	nRst, $2A
(1)  465/    847A : (MACRO)             	smpsModSet          $00, $00, $00, $00
(1)  465/    847A : F0                          dc.b    $F0
(1)  465/    847B : 0000 0000                           dc.b    $00,$00,$00,$00
(1)  465/    847F :                             ;dc.b   $00,$00,$00
(1)  466/    847F : (MACRO)             	smpsAlterPitch      $F4
(1)  466/    847F :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  466/    847F : FBF4                                dc.b    $FB,$F4
(1)  467/    8481 : (MACRO)             	smpsSetvoice        $02
(1)  467/    8481 :  (MACRO-2)                  smpsFMvoice $02
(1)  467/    8481 : EF02                                dc.b    $EF,$02
(1)  468/    8483 : (MACRO)             	smpsFMAlterVol      $04
(1)  468/    8483 : E604                                dc.b    $E6,$04
(1)  469/    8485 : (MACRO)             	smpsPan             panCenter, $00
(1)  469/    8485 : =$0                 panNone set $00
(1)  469/    8485 : =$40                panRight set $40
(1)  469/    8485 : =$80                panLeft set $80
(1)  469/    8485 : =$C0                panCentre set $C0
(1)  469/    8485 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  469/    8485 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  470/    8487 : (MACRO)             	smpsAlterPitch      $F4
(1)  470/    8487 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  470/    8487 : FBF4                                dc.b    $FB,$F4
(1)  471/    8489 : (MACRO)             	smpsCall            Electoria_Call09
(1)  471/    8489 : F8                          dc.b    $F8
(1)  471/    848A : 5C82                                dc.w    z80_ptr(ELECTORIA_CALL09)
(1)  472/    848C : (MACRO)             	smpsAlterPitch      $0C
(1)  472/    848C :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  472/    848C : FB0C                                dc.b    $FB,$0C
(1)  473/    848E : A412 AC4E 8060      	dc.b	nB2, $12, nG3, $4E, nRst, $60
(1)  474/    8494 : (MACRO)             	smpsAlterPitch      $F4
(1)  474/    8494 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  474/    8494 : FBF4                                dc.b    $FB,$F4
(1)  475/    8496 : (MACRO)             	smpsCall            Electoria_Call0A
(1)  475/    8496 : F8                          dc.b    $F8
(1)  475/    8497 : CB82                                dc.w    z80_ptr(ELECTORIA_CALL0A)
(1)  476/    8499 : (MACRO)             	smpsAlterPitch      $0C
(1)  476/    8499 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  476/    8499 : FB0C                                dc.b    $FB,$0C
(1)  477/    849B : B012 B34E B118 B006 	dc.b	nB3, $12, nD4, $4E, nC4, $18, nB3, $06
(1)  478/    84A3 : (MACRO)             	smpsFMAlterVol      $0A
(1)  478/    84A3 : E60A                                dc.b    $E6,$0A
(1)  479/    84A5 : (MACRO)             	smpsPan             panRight, $00
(1)  479/    84A5 : =$0                 panNone set $00
(1)  479/    84A5 : =$40                panRight set $40
(1)  479/    84A5 : =$80                panLeft set $80
(1)  479/    84A5 : =$C0                panCentre set $C0
(1)  479/    84A5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  479/    84A5 : E040                        dc.b $E0,PANRIGHT+$00
(1)  480/    84A7 : B0                  	dc.b	nB3
(1)  481/    84A8 : (MACRO)             	smpsFMAlterVol      $F6
(1)  481/    84A8 : E6F6                                dc.b    $E6,$F6
(1)  482/    84AA : (MACRO)             	smpsPan             panCenter, $00
(1)  482/    84AA : =$0                 panNone set $00
(1)  482/    84AA : =$40                panRight set $40
(1)  482/    84AA : =$80                panLeft set $80
(1)  482/    84AA : =$C0                panCentre set $C0
(1)  482/    84AA : =$C0                panCenter set $C0 ; silly Americans :U
(1)  482/    84AA : E0C0                        dc.b $E0,PANCENTER+$00
(1)  483/    84AC : AE12                	dc.b	nA3, $12
(1)  484/    84AE : (MACRO)             	smpsFMAlterVol      $0A
(1)  484/    84AE : E60A                                dc.b    $E6,$0A
(1)  485/    84B0 : (MACRO)             	smpsPan             panRight, $00
(1)  485/    84B0 : =$0                 panNone set $00
(1)  485/    84B0 : =$40                panRight set $40
(1)  485/    84B0 : =$80                panLeft set $80
(1)  485/    84B0 : =$C0                panCentre set $C0
(1)  485/    84B0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  485/    84B0 : E040                        dc.b $E0,PANRIGHT+$00
(1)  486/    84B2 : 06                  	dc.b	$06
(1)  487/    84B3 : (MACRO)             	smpsFMAlterVol      $F6
(1)  487/    84B3 : E6F6                                dc.b    $E6,$F6
(1)  488/    84B5 : (MACRO)             	smpsPan             panCenter, $00
(1)  488/    84B5 : =$0                 panNone set $00
(1)  488/    84B5 : =$40                panRight set $40
(1)  488/    84B5 : =$80                panLeft set $80
(1)  488/    84B5 : =$C0                panCentre set $C0
(1)  488/    84B5 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  488/    84B5 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  489/    84B7 : B012                	dc.b	nB3, $12
(1)  490/    84B9 : (MACRO)             	smpsFMAlterVol      $0A
(1)  490/    84B9 : E60A                                dc.b    $E6,$0A
(1)  491/    84BB : (MACRO)             	smpsPan             panRight, $00
(1)  491/    84BB : =$0                 panNone set $00
(1)  491/    84BB : =$40                panRight set $40
(1)  491/    84BB : =$80                panLeft set $80
(1)  491/    84BB : =$C0                panCentre set $C0
(1)  491/    84BB : =$C0                panCenter set $C0 ; silly Americans :U
(1)  491/    84BB : E040                        dc.b $E0,PANRIGHT+$00
(1)  492/    84BD : 06                  	dc.b	$06
(1)  493/    84BE : (MACRO)             	smpsFMAlterVol      $F6
(1)  493/    84BE : E6F6                                dc.b    $E6,$F6
(1)  494/    84C0 : (MACRO)             	smpsPan             panCenter, $00
(1)  494/    84C0 : =$0                 panNone set $00
(1)  494/    84C0 : =$40                panRight set $40
(1)  494/    84C0 : =$80                panLeft set $80
(1)  494/    84C0 : =$C0                panCentre set $C0
(1)  494/    84C0 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  494/    84C0 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  495/    84C2 : B30C E760           	dc.b	nD4, $0C, smpsNoAttack, $60
(1)  496/    84C6 : (MACRO)             	smpsSetvoice        $03
(1)  496/    84C6 :  (MACRO-2)                  smpsFMvoice $03
(1)  496/    84C6 : EF03                                dc.b    $EF,$03
(1)  497/    84C8 : (MACRO)             	smpsAlterPitch      $03
(1)  497/    84C8 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  497/    84C8 : FB03                                dc.b    $FB,$03
(1)  498/    84CA :                     
(1)  499/    84CA :                     Electoria_Loop12:
(1)  500/    84CA : (MACRO)             	smpsCall            Electoria_Call04
(1)  500/    84CA : F8                          dc.b    $F8
(1)  500/    84CB : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  501/    84CD : (MACRO)             	smpsLoop            $00, $02, Electoria_Loop12
(1)  501/    84CD : F7                          dc.b    $F7
(1)  501/    84CE : 0002                        dc.b    $00,$02
(1)  501/    84D0 : CA84                                dc.w    z80_ptr(ELECTORIA_LOOP12)
(1)  502/    84D2 : (MACRO)             	smpsAlterPitch      $FF
(1)  502/    84D2 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  502/    84D2 : FBFF                                dc.b    $FB,$FF
(1)  503/    84D4 : (MACRO)             	smpsCall            Electoria_Call05
(1)  503/    84D4 : F8                          dc.b    $F8
(1)  503/    84D5 : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  504/    84D7 : (MACRO)             	smpsAlterPitch      $01
(1)  504/    84D7 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  504/    84D7 : FB01                                dc.b    $FB,$01
(1)  505/    84D9 :                     
(1)  506/    84D9 :                     Electoria_Loop13:
(1)  507/    84D9 : (MACRO)             	smpsCall            Electoria_Call04
(1)  507/    84D9 : F8                          dc.b    $F8
(1)  507/    84DA : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  508/    84DC : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop13
(1)  508/    84DC : F7                          dc.b    $F7
(1)  508/    84DD : 0004                        dc.b    $00,$04
(1)  508/    84DF : D984                                dc.w    z80_ptr(ELECTORIA_LOOP13)
(1)  509/    84E1 : (MACRO)             	smpsAlterPitch      $09
(1)  509/    84E1 :  (MACRO-2)                  smpsChangeTransposition $09
(1)  509/    84E1 : FB09                                dc.b    $FB,$09
(1)  510/    84E3 : (MACRO)             	smpsFMAlterVol      $FF
(1)  510/    84E3 : E6FF                                dc.b    $E6,$FF
(1)  511/    84E5 : (MACRO)             	smpsJump            Electoria_Jump00
(1)  511/    84E5 : F6                          dc.b    $F6
(1)  511/    84E6 : EF83                                dc.w    z80_ptr(ELECTORIA_JUMP00)
(1)  512/    84E8 :                     
(1)  513/    84E8 :                     ; FM4 Data
(1)  514/    84E8 :                     Electoria_FM4:
(1)  515/    84E8 : (MACRO)             	smpsSetvoice        $03
(1)  515/    84E8 :  (MACRO-2)                  smpsFMvoice $03
(1)  515/    84E8 : EF03                                dc.b    $EF,$03
(1)  516/    84EA : 8060                	dc.b	nRst, $60
(1)  517/    84EC : (MACRO)             	smpsAlterPitch      $F7
(1)  517/    84EC :  (MACRO-2)                  smpsChangeTransposition $F7
(1)  517/    84EC : FBF7                                dc.b    $FB,$F7
(1)  518/    84EE :                     
(1)  519/    84EE :                     Electoria_Loop0B:
(1)  520/    84EE : (MACRO)             	smpsCall            Electoria_Call04
(1)  520/    84EE : F8                          dc.b    $F8
(1)  520/    84EF : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  521/    84F1 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop0B
(1)  521/    84F1 : F7                          dc.b    $F7
(1)  521/    84F2 : 0008                        dc.b    $00,$08
(1)  521/    84F4 : EE84                                dc.w    z80_ptr(ELECTORIA_LOOP0B)
(1)  522/    84F6 : (MACRO)             	smpsAlterPitch      $09
(1)  522/    84F6 :  (MACRO-2)                  smpsChangeTransposition $09
(1)  522/    84F6 : FB09                                dc.b    $FB,$09
(1)  523/    84F8 :                     
(1)  524/    84F8 :                     Electoria_Loop0C:
(1)  525/    84F8 : (MACRO)             	smpsCall            Electoria_Call04
(1)  525/    84F8 : F8                          dc.b    $F8
(1)  525/    84F9 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  526/    84FB : (MACRO)             	smpsAlterPitch      $01
(1)  526/    84FB :  (MACRO-2)                  smpsChangeTransposition $01
(1)  526/    84FB : FB01                                dc.b    $FB,$01
(1)  527/    84FD : (MACRO)             	smpsCall            Electoria_Call04
(1)  527/    84FD : F8                          dc.b    $F8
(1)  527/    84FE : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  528/    8500 : (MACRO)             	smpsAlterPitch      $FF
(1)  528/    8500 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  528/    8500 : FBFF                                dc.b    $FB,$FF
(1)  529/    8502 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop0C
(1)  529/    8502 : F7                          dc.b    $F7
(1)  529/    8503 : 0004                        dc.b    $00,$04
(1)  529/    8505 : F884                                dc.w    z80_ptr(ELECTORIA_LOOP0C)
(1)  530/    8507 :                     
(1)  531/    8507 :                     Electoria_Loop0D:
(1)  532/    8507 : (MACRO)             	smpsAlterPitch      $FF
(1)  532/    8507 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  532/    8507 : FBFF                                dc.b    $FB,$FF
(1)  533/    8509 : (MACRO)             	smpsCall            Electoria_Call04
(1)  533/    8509 : F8                          dc.b    $F8
(1)  533/    850A : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  534/    850C : (MACRO)             	smpsAlterPitch      $02
(1)  534/    850C :  (MACRO-2)                  smpsChangeTransposition $02
(1)  534/    850C : FB02                                dc.b    $FB,$02
(1)  535/    850E : (MACRO)             	smpsCall            Electoria_Call04
(1)  535/    850E : F8                          dc.b    $F8
(1)  535/    850F : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  536/    8511 : (MACRO)             	smpsAlterPitch      $FF
(1)  536/    8511 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  536/    8511 : FBFF                                dc.b    $FB,$FF
(1)  537/    8513 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop0D
(1)  537/    8513 : F7                          dc.b    $F7
(1)  537/    8514 : 0003                        dc.b    $00,$03
(1)  537/    8516 : 0785                                dc.w    z80_ptr(ELECTORIA_LOOP0D)
(1)  538/    8518 : (MACRO)             	smpsAlterPitch      $FF
(1)  538/    8518 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  538/    8518 : FBFF                                dc.b    $FB,$FF
(1)  539/    851A : (MACRO)             	smpsCall            Electoria_Call04
(1)  539/    851A : F8                          dc.b    $F8
(1)  539/    851B : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  540/    851D : (MACRO)             	smpsAlterPitch      $01
(1)  540/    851D :  (MACRO-2)                  smpsChangeTransposition $01
(1)  540/    851D : FB01                                dc.b    $FB,$01
(1)  541/    851F : (MACRO)             	smpsCall            Electoria_Call05
(1)  541/    851F : F8                          dc.b    $F8
(1)  541/    8520 : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  542/    8522 :                     
(1)  543/    8522 :                     Electoria_Loop0E:
(1)  544/    8522 : (MACRO)             	smpsCall            Electoria_Call04
(1)  544/    8522 : F8                          dc.b    $F8
(1)  544/    8523 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  545/    8525 : (MACRO)             	smpsAlterPitch      $01
(1)  545/    8525 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  545/    8525 : FB01                                dc.b    $FB,$01
(1)  546/    8527 : (MACRO)             	smpsCall            Electoria_Call04
(1)  546/    8527 : F8                          dc.b    $F8
(1)  546/    8528 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  547/    852A : (MACRO)             	smpsAlterPitch      $FF
(1)  547/    852A :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  547/    852A : FBFF                                dc.b    $FB,$FF
(1)  548/    852C : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop0E
(1)  548/    852C : F7                          dc.b    $F7
(1)  548/    852D : 0003                        dc.b    $00,$03
(1)  548/    852F : 2285                                dc.w    z80_ptr(ELECTORIA_LOOP0E)
(1)  549/    8531 : (MACRO)             	smpsCall            Electoria_Call04
(1)  549/    8531 : F8                          dc.b    $F8
(1)  549/    8532 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  550/    8534 : 8060                	dc.b	nRst, $60
(1)  551/    8536 :                     
(1)  552/    8536 :                     Electoria_Loop0F:
(1)  553/    8536 : (MACRO)             	smpsCall            Electoria_Call04
(1)  553/    8536 : F8                          dc.b    $F8
(1)  553/    8537 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  554/    8539 : (MACRO)             	smpsAlterPitch      $01
(1)  554/    8539 :  (MACRO-2)                  smpsChangeTransposition $01
(1)  554/    8539 : FB01                                dc.b    $FB,$01
(1)  555/    853B : (MACRO)             	smpsCall            Electoria_Call04
(1)  555/    853B : F8                          dc.b    $F8
(1)  555/    853C : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  556/    853E : (MACRO)             	smpsAlterPitch      $FF
(1)  556/    853E :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  556/    853E : FBFF                                dc.b    $FB,$FF
(1)  557/    8540 : (MACRO)             	smpsLoop            $00, $05, Electoria_Loop0F
(1)  557/    8540 : F7                          dc.b    $F7
(1)  557/    8541 : 0005                        dc.b    $00,$05
(1)  557/    8543 : 3685                                dc.w    z80_ptr(ELECTORIA_LOOP0F)
(1)  558/    8545 : (MACRO)             	smpsCall            Electoria_Call04
(1)  558/    8545 : F8                          dc.b    $F8
(1)  558/    8546 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  559/    8548 : (MACRO)             	smpsCall            Electoria_Call05
(1)  559/    8548 : F8                          dc.b    $F8
(1)  559/    8549 : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  560/    854B :                     
(1)  561/    854B :                     Electoria_Loop10:
(1)  562/    854B : (MACRO)             	smpsCall            Electoria_Call04
(1)  562/    854B : F8                          dc.b    $F8
(1)  562/    854C : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  563/    854E : (MACRO)             	smpsAlterPitch      $01
(1)  563/    854E :  (MACRO-2)                  smpsChangeTransposition $01
(1)  563/    854E : FB01                                dc.b    $FB,$01
(1)  564/    8550 : (MACRO)             	smpsCall            Electoria_Call04
(1)  564/    8550 : F8                          dc.b    $F8
(1)  564/    8551 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  565/    8553 : (MACRO)             	smpsAlterPitch      $FF
(1)  565/    8553 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  565/    8553 : FBFF                                dc.b    $FB,$FF
(1)  566/    8555 : (MACRO)             	smpsLoop            $00, $02, Electoria_Loop10
(1)  566/    8555 : F7                          dc.b    $F7
(1)  566/    8556 : 0002                        dc.b    $00,$02
(1)  566/    8558 : 4B85                                dc.w    z80_ptr(ELECTORIA_LOOP10)
(1)  567/    855A : (MACRO)             	smpsJump            Electoria_Loop0C
(1)  567/    855A : F6                          dc.b    $F6
(1)  567/    855B : F884                                dc.w    z80_ptr(ELECTORIA_LOOP0C)
(1)  568/    855D :                     
(1)  569/    855D :                     Electoria_Call05:
(1)  570/    855D : 800C B10C           	dc.b	nRst, $0C, nC4, $0C
(1)  571/    8561 : (MACRO)             	smpsFMAlterVol      $0A
(1)  571/    8561 : E60A                                dc.b    $E6,$0A
(1)  572/    8563 : (MACRO)             	smpsPan             panLeft, $00
(1)  572/    8563 : =$0                 panNone set $00
(1)  572/    8563 : =$40                panRight set $40
(1)  572/    8563 : =$80                panLeft set $80
(1)  572/    8563 : =$C0                panCentre set $C0
(1)  572/    8563 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  572/    8563 : E080                        dc.b $E0,PANLEFT+$00
(1)  573/    8565 : 06                  	dc.b	$06
(1)  574/    8566 : (MACRO)             	smpsFMAlterVol      $F6
(1)  574/    8566 : E6F6                                dc.b    $E6,$F6
(1)  575/    8568 : (MACRO)             	smpsPan             panCenter, $00
(1)  575/    8568 : =$0                 panNone set $00
(1)  575/    8568 : =$40                panRight set $40
(1)  575/    8568 : =$80                panLeft set $80
(1)  575/    8568 : =$C0                panCentre set $C0
(1)  575/    8568 : =$C0                panCenter set $C0 ; silly Americans :U
(1)  575/    8568 : E0C0                        dc.b $E0,PANCENTER+$00
(1)  576/    856A : 0C06 8030           	dc.b	$0C, $06, nRst, $30
(1)  577/    856E : (MACRO)             	smpsReturn
(1)  577/    856E : F9                                  dc.b    $F9
(1)  578/    856F :                     
(1)  579/    856F :                     ; FM5 Data
(1)  580/    856F :                     Electoria_FM5:
(1)  581/    856F : (MACRO)             	smpsSetvoice        $03
(1)  581/    856F :  (MACRO-2)                  smpsFMvoice $03
(1)  581/    856F : EF03                                dc.b    $EF,$03
(1)  582/    8571 : 8060                	dc.b	nRst, $60
(1)  583/    8573 :                     
(1)  584/    8573 :                     Electoria_Loop05:
(1)  585/    8573 : A060                	dc.b	nG2, $60
(1)  586/    8575 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop05
(1)  586/    8575 : F7                          dc.b    $F7
(1)  586/    8576 : 0008                        dc.b    $00,$08
(1)  586/    8578 : 7385                                dc.w    z80_ptr(ELECTORIA_LOOP05)
(1)  587/    857A : (MACRO)             	smpsAlterPitch      $FA
(1)  587/    857A :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  587/    857A : FBFA                                dc.b    $FB,$FA
(1)  588/    857C :                     
(1)  589/    857C :                     Electoria_Loop06:
(1)  590/    857C : (MACRO)             	smpsCall            Electoria_Call04
(1)  590/    857C : F8                          dc.b    $F8
(1)  590/    857D : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  591/    857F : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop06
(1)  591/    857F : F7                          dc.b    $F7
(1)  591/    8580 : 0008                        dc.b    $00,$08
(1)  591/    8582 : 7C85                                dc.w    z80_ptr(ELECTORIA_LOOP06)
(1)  592/    8584 : (MACRO)             	smpsAlterPitch      $06
(1)  592/    8584 :  (MACRO-2)                  smpsChangeTransposition $06
(1)  592/    8584 : FB06                                dc.b    $FB,$06
(1)  593/    8586 :                     
(1)  594/    8586 :                     Electoria_Loop07:
(1)  595/    8586 : (MACRO)             	smpsAlterPitch      $FC
(1)  595/    8586 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  595/    8586 : FBFC                                dc.b    $FB,$FC
(1)  596/    8588 : (MACRO)             	smpsCall            Electoria_Call04
(1)  596/    8588 : F8                          dc.b    $F8
(1)  596/    8589 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  597/    858B : (MACRO)             	smpsAlterPitch      $02
(1)  597/    858B :  (MACRO-2)                  smpsChangeTransposition $02
(1)  597/    858B : FB02                                dc.b    $FB,$02
(1)  598/    858D : (MACRO)             	smpsCall            Electoria_Call04
(1)  598/    858D : F8                          dc.b    $F8
(1)  598/    858E : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  599/    8590 : (MACRO)             	smpsAlterPitch      $02
(1)  599/    8590 :  (MACRO-2)                  smpsChangeTransposition $02
(1)  599/    8590 : FB02                                dc.b    $FB,$02
(1)  600/    8592 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop07
(1)  600/    8592 : F7                          dc.b    $F7
(1)  600/    8593 : 0003                        dc.b    $00,$03
(1)  600/    8595 : 8685                                dc.w    z80_ptr(ELECTORIA_LOOP07)
(1)  601/    8597 : (MACRO)             	smpsAlterPitch      $FC
(1)  601/    8597 :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  601/    8597 : FBFC                                dc.b    $FB,$FC
(1)  602/    8599 : (MACRO)             	smpsCall            Electoria_Call04
(1)  602/    8599 : F8                          dc.b    $F8
(1)  602/    859A : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  603/    859C : (MACRO)             	smpsAlterPitch      $01
(1)  603/    859C :  (MACRO-2)                  smpsChangeTransposition $01
(1)  603/    859C : FB01                                dc.b    $FB,$01
(1)  604/    859E : (MACRO)             	smpsCall            Electoria_Call05
(1)  604/    859E : F8                          dc.b    $F8
(1)  604/    859F : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  605/    85A1 : (MACRO)             	smpsAlterPitch      $03
(1)  605/    85A1 :  (MACRO-2)                  smpsChangeTransposition $03
(1)  605/    85A1 : FB03                                dc.b    $FB,$03
(1)  606/    85A3 : (MACRO)             	smpsAlterPitch      $FA
(1)  606/    85A3 :  (MACRO-2)                  smpsChangeTransposition $FA
(1)  606/    85A3 : FBFA                                dc.b    $FB,$FA
(1)  607/    85A5 :                     
(1)  608/    85A5 :                     Electoria_Loop08:
(1)  609/    85A5 : (MACRO)             	smpsCall            Electoria_Call04
(1)  609/    85A5 : F8                          dc.b    $F8
(1)  609/    85A6 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  610/    85A8 : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop08
(1)  610/    85A8 : F7                          dc.b    $F7
(1)  610/    85A9 : 0007                        dc.b    $00,$07
(1)  610/    85AB : A585                                dc.w    z80_ptr(ELECTORIA_LOOP08)
(1)  611/    85AD : 8060                	dc.b	nRst, $60
(1)  612/    85AF :                     
(1)  613/    85AF :                     Electoria_Loop09:
(1)  614/    85AF : (MACRO)             	smpsCall            Electoria_Call04
(1)  614/    85AF : F8                          dc.b    $F8
(1)  614/    85B0 : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  615/    85B2 : (MACRO)             	smpsLoop            $00, $0B, Electoria_Loop09
(1)  615/    85B2 : F7                          dc.b    $F7
(1)  615/    85B3 : 000B                        dc.b    $00,$0B
(1)  615/    85B5 : AF85                                dc.w    z80_ptr(ELECTORIA_LOOP09)
(1)  616/    85B7 : (MACRO)             	smpsAlterPitch      $FF
(1)  616/    85B7 :  (MACRO-2)                  smpsChangeTransposition $FF
(1)  616/    85B7 : FBFF                                dc.b    $FB,$FF
(1)  617/    85B9 : (MACRO)             	smpsCall            Electoria_Call05
(1)  617/    85B9 : F8                          dc.b    $F8
(1)  617/    85BA : 5D85                                dc.w    z80_ptr(ELECTORIA_CALL05)
(1)  618/    85BC : (MACRO)             	smpsAlterPitch      $01
(1)  618/    85BC :  (MACRO-2)                  smpsChangeTransposition $01
(1)  618/    85BC : FB01                                dc.b    $FB,$01
(1)  619/    85BE :                     
(1)  620/    85BE :                     Electoria_Loop0A:
(1)  621/    85BE : (MACRO)             	smpsCall            Electoria_Call04
(1)  621/    85BE : F8                          dc.b    $F8
(1)  621/    85BF : 8181                                dc.w    z80_ptr(ELECTORIA_CALL04)
(1)  622/    85C1 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop0A
(1)  622/    85C1 : F7                          dc.b    $F7
(1)  622/    85C2 : 0004                        dc.b    $00,$04
(1)  622/    85C4 : BE85                                dc.w    z80_ptr(ELECTORIA_LOOP0A)
(1)  623/    85C6 : (MACRO)             	smpsJump            Electoria_Loop06
(1)  623/    85C6 : F6                          dc.b    $F6
(1)  623/    85C7 : 7C85                                dc.w    z80_ptr(ELECTORIA_LOOP06)
(1)  624/    85C9 :                     
(1)  625/    85C9 :                     ; PSG1 Data
(1)  626/    85C9 :                     Electoria_PSG1:
(1)  627/    85C9 : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  627/    85C9 : F50C                        dc.b    $F5,STONE_0C
(1)  628/    85CB : 8060                	dc.b	nRst, $60
(1)  629/    85CD :                     
(1)  630/    85CD :                     Electoria_Loop26:
(1)  631/    85CD : (MACRO)             	smpsCall            Electoria_Call12
(1)  631/    85CD : F8                          dc.b    $F8
(1)  631/    85CE : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  632/    85D0 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop26
(1)  632/    85D0 : F7                          dc.b    $F7
(1)  632/    85D1 : 0008                        dc.b    $00,$08
(1)  632/    85D3 : CD85                                dc.w    z80_ptr(ELECTORIA_LOOP26)
(1)  633/    85D5 :                     
(1)  634/    85D5 :                     Electoria_Loop27:
(1)  635/    85D5 : (MACRO)             	smpsCall            Electoria_Call12
(1)  635/    85D5 : F8                          dc.b    $F8
(1)  635/    85D6 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  636/    85D8 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop27
(1)  636/    85D8 : F7                          dc.b    $F7
(1)  636/    85D9 : 0008                        dc.b    $00,$08
(1)  636/    85DB : D585                                dc.w    z80_ptr(ELECTORIA_LOOP27)
(1)  637/    85DD :                     
(1)  638/    85DD :                     Electoria_Loop28:
(1)  639/    85DD : (MACRO)             	smpsAlterPitch      $FC
(1)  639/    85DD :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  639/    85DD : FBFC                                dc.b    $FB,$FC
(1)  640/    85DF : (MACRO)             	smpsCall            Electoria_Call12
(1)  640/    85DF : F8                          dc.b    $F8
(1)  640/    85E0 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  641/    85E2 : (MACRO)             	smpsAlterPitch      $04
(1)  641/    85E2 :  (MACRO-2)                  smpsChangeTransposition $04
(1)  641/    85E2 : FB04                                dc.b    $FB,$04
(1)  642/    85E4 : 9C06 9CA8 A29C A8A2 	dc.b	nEb2, $06, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2
             85EC : 9CA8 A29C         
(1)  643/    85F0 : A8A2 9CA8 A2        	dc.b	nEb3, nA2, nEb2, nEb3, nA2
(1)  644/    85F5 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop28
(1)  644/    85F5 : F7                          dc.b    $F7
(1)  644/    85F6 : 0003                        dc.b    $00,$03
(1)  644/    85F8 : DD85                                dc.w    z80_ptr(ELECTORIA_LOOP28)
(1)  645/    85FA : (MACRO)             	smpsAlterPitch      $FC
(1)  645/    85FA :  (MACRO-2)                  smpsChangeTransposition $FC
(1)  645/    85FA : FBFC                                dc.b    $FB,$FC
(1)  646/    85FC : (MACRO)             	smpsCall            Electoria_Call12
(1)  646/    85FC : F8                          dc.b    $F8
(1)  646/    85FD : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  647/    85FF : (MACRO)             	smpsAlterPitch      $04
(1)  647/    85FF :  (MACRO-2)                  smpsChangeTransposition $04
(1)  647/    85FF : FB04                                dc.b    $FB,$04
(1)  648/    8601 : 9C06 9CA8 A29C A8A2 	dc.b	nEb2, $06, nEb2, nEb3, nA2, nEb2, nEb3, nA2, nEb2, nRst, $30
             8609 : 9C80 30            
(1)  649/    860C :                     
(1)  650/    860C :                     Electoria_Loop29:
(1)  651/    860C : (MACRO)             	smpsCall            Electoria_Call12
(1)  651/    860C : F8                          dc.b    $F8
(1)  651/    860D : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  652/    860F : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop29
(1)  652/    860F : F7                          dc.b    $F7
(1)  652/    8610 : 0007                        dc.b    $00,$07
(1)  652/    8612 : 0C86                                dc.w    z80_ptr(ELECTORIA_LOOP29)
(1)  653/    8614 : 8060                	dc.b	nRst, $60
(1)  654/    8616 :                     
(1)  655/    8616 :                     Electoria_Loop2A:
(1)  656/    8616 : (MACRO)             	smpsCall            Electoria_Call12
(1)  656/    8616 : F8                          dc.b    $F8
(1)  656/    8617 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  657/    8619 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop2A
(1)  657/    8619 : F7                          dc.b    $F7
(1)  657/    861A : 0008                        dc.b    $00,$08
(1)  657/    861C : 1686                                dc.w    z80_ptr(ELECTORIA_LOOP2A)
(1)  658/    861E :                     
(1)  659/    861E :                     Electoria_Loop2B:
(1)  660/    861E : (MACRO)             	smpsCall            Electoria_Call12
(1)  660/    861E : F8                          dc.b    $F8
(1)  660/    861F : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  661/    8621 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop2B
(1)  661/    8621 : F7                          dc.b    $F7
(1)  661/    8622 : 0003                        dc.b    $00,$03
(1)  661/    8624 : 1E86                                dc.w    z80_ptr(ELECTORIA_LOOP2B)
(1)  662/    8626 : A006 A0AC A7A0 ACA7 	dc.b	nG2, $06, nG2, nG3, nD3, nG2, nG3, nD3, nG2, nRst, $30
             862E : A080 30            
(1)  663/    8631 :                     
(1)  664/    8631 :                     Electoria_Loop2C:
(1)  665/    8631 : (MACRO)             	smpsCall            Electoria_Call12
(1)  665/    8631 : F8                          dc.b    $F8
(1)  665/    8632 : 3C86                                dc.w    z80_ptr(ELECTORIA_CALL12)
(1)  666/    8634 : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop2C
(1)  666/    8634 : F7                          dc.b    $F7
(1)  666/    8635 : 0004                        dc.b    $00,$04
(1)  666/    8637 : 3186                                dc.w    z80_ptr(ELECTORIA_LOOP2C)
(1)  667/    8639 : (MACRO)             	smpsJump            Electoria_Loop27
(1)  667/    8639 : F6                          dc.b    $F6
(1)  667/    863A : D585                                dc.w    z80_ptr(ELECTORIA_LOOP27)
(1)  668/    863C :                     
(1)  669/    863C :                     Electoria_Call12:
(1)  670/    863C : A006 A0AC A7A0 ACA7 	dc.b	nG2, $06, nG2, nG3, nD3, nG2, nG3, nD3, nG2, nG3, nD3, nG2
             8644 : A0AC A7A0         
(1)  671/    8648 : ACA7 A0AC A7        	dc.b	nG3, nD3, nG2, nG3, nD3
(1)  672/    864D : (MACRO)             	smpsReturn
(1)  672/    864D : F9                                  dc.b    $F9
(1)  673/    864E :                     
(1)  674/    864E :                     ; PSG2 Data
(1)  675/    864E :                     Electoria_PSG2:
(1)  676/    864E : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  676/    864E : F50C                        dc.b    $F5,STONE_0C
(1)  677/    8650 : 8060                	dc.b	nRst, $60
(1)  678/    8652 : (MACRO)             	smpsAlterPitch      $0C
(1)  678/    8652 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  678/    8652 : FB0C                                dc.b    $FB,$0C
(1)  679/    8654 :                     
(1)  680/    8654 :                     Electoria_Loop20:
(1)  681/    8654 : (MACRO)             	smpsCall            Electoria_Call0E
(1)  681/    8654 : F8                          dc.b    $F8
(1)  681/    8655 : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  682/    8657 : (MACRO)             	smpsCall            Electoria_Call0F
(1)  682/    8657 : F8                          dc.b    $F8
(1)  682/    8658 : CC86                                dc.w    z80_ptr(ELECTORIA_CALL0F)
(1)  683/    865A : (MACRO)             	smpsLoop            $00, $04, Electoria_Loop20
(1)  683/    865A : F7                          dc.b    $F7
(1)  683/    865B : 0004                        dc.b    $00,$04
(1)  683/    865D : 5486                                dc.w    z80_ptr(ELECTORIA_LOOP20)
(1)  684/    865F : (MACRO)             	smpsAlterPitch      $F4
(1)  684/    865F :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  684/    865F : FBF4                                dc.b    $FB,$F4
(1)  685/    8661 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  685/    8661 : ECFF                        dc.b    $EC,$FF
(1)  686/    8663 :                     
(1)  687/    8663 :                     Electoria_Loop21:
(1)  688/    8663 : (MACRO)             	smpsPSGvoice        sTone_03
(1)  688/    8663 : F503                        dc.b    $F5,STONE_03
(1)  689/    8665 : (MACRO)             	smpsCall            Electoria_Call10
(1)  689/    8665 : F8                          dc.b    $F8
(1)  689/    8666 : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  690/    8668 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop21
(1)  690/    8668 : F7                          dc.b    $F7
(1)  690/    8669 : 0008                        dc.b    $00,$08
(1)  690/    866B : 6386                                dc.w    z80_ptr(ELECTORIA_LOOP21)
(1)  691/    866D : (MACRO)             	smpsAlterPitch      $03
(1)  691/    866D :  (MACRO-2)                  smpsChangeTransposition $03
(1)  691/    866D : FB03                                dc.b    $FB,$03
(1)  692/    866F :                     
(1)  693/    866F :                     Electoria_Loop22:
(1)  694/    866F : (MACRO)             	smpsCall            Electoria_Call10
(1)  694/    866F : F8                          dc.b    $F8
(1)  694/    8670 : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  695/    8672 : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop22
(1)  695/    8672 : F7                          dc.b    $F7
(1)  695/    8673 : 0007                        dc.b    $00,$07
(1)  695/    8675 : 6F86                                dc.w    z80_ptr(ELECTORIA_LOOP22)
(1)  696/    8677 : (MACRO)             	smpsAlterPitch      $FD
(1)  696/    8677 :  (MACRO-2)                  smpsChangeTransposition $FD
(1)  696/    8677 : FBFD                                dc.b    $FB,$FD
(1)  697/    8679 : (MACRO)             	smpsCall            Electoria_Call11
(1)  697/    8679 : F8                          dc.b    $F8
(1)  697/    867A : F286                                dc.w    z80_ptr(ELECTORIA_CALL11)
(1)  698/    867C :                     
(1)  699/    867C :                     Electoria_Loop23:
(1)  700/    867C : (MACRO)             	smpsCall            Electoria_Call10
(1)  700/    867C : F8                          dc.b    $F8
(1)  700/    867D : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  701/    867F : (MACRO)             	smpsLoop            $00, $07, Electoria_Loop23
(1)  701/    867F : F7                          dc.b    $F7
(1)  701/    8680 : 0007                        dc.b    $00,$07
(1)  701/    8682 : 7C86                                dc.w    z80_ptr(ELECTORIA_LOOP23)
(1)  702/    8684 : 8060                	dc.b	nRst, $60
(1)  703/    8686 :                     
(1)  704/    8686 :                     Electoria_Loop24:
(1)  705/    8686 : (MACRO)             	smpsCall            Electoria_Call10
(1)  705/    8686 : F8                          dc.b    $F8
(1)  705/    8687 : DE86                                dc.w    z80_ptr(ELECTORIA_CALL10)
(1)  706/    8689 : (MACRO)             	smpsLoop            $00, $08, Electoria_Loop24
(1)  706/    8689 : F7                          dc.b    $F7
(1)  706/    868A : 0008                        dc.b    $00,$08
(1)  706/    868C : 8686                                dc.w    z80_ptr(ELECTORIA_LOOP24)
(1)  707/    868E : (MACRO)             	smpsPSGvoice        sTone_0C
(1)  707/    868E : F50C                        dc.b    $F5,STONE_0C
(1)  708/    8690 : (MACRO)             	smpsAlterPitch      $0C
(1)  708/    8690 :  (MACRO-2)                  smpsChangeTransposition $0C
(1)  708/    8690 : FB0C                                dc.b    $FB,$0C
(1)  709/    8692 : (MACRO)             	smpsPSGAlterVol     $01
(1)  709/    8692 : EC01                        dc.b    $EC,$01
(1)  710/    8694 : (MACRO)             	smpsCall            Electoria_Call0E
(1)  710/    8694 : F8                          dc.b    $F8
(1)  710/    8695 : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  711/    8697 : (MACRO)             	smpsCall            Electoria_Call0F
(1)  711/    8697 : F8                          dc.b    $F8
(1)  711/    8698 : CC86                                dc.w    z80_ptr(ELECTORIA_CALL0F)
(1)  712/    869A : (MACRO)             	smpsCall            Electoria_Call0E
(1)  712/    869A : F8                          dc.b    $F8
(1)  712/    869B : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  713/    869D : AA06 AC80 B180 80AA 	dc.b	nF3, $06, nG3, nRst, nC4, nRst, nRst, nF3, nG3, nRst, $30
             86A5 : AC80 30            
(1)  714/    86A8 :                     
(1)  715/    86A8 :                     Electoria_Loop25:
(1)  716/    86A8 : (MACRO)             	smpsCall            Electoria_Call0E
(1)  716/    86A8 : F8                          dc.b    $F8
(1)  716/    86A9 : BA86                                dc.w    z80_ptr(ELECTORIA_CALL0E)
(1)  717/    86AB : (MACRO)             	smpsCall            Electoria_Call0F
(1)  717/    86AB : F8                          dc.b    $F8
(1)  717/    86AC : CC86                                dc.w    z80_ptr(ELECTORIA_CALL0F)
(1)  718/    86AE : (MACRO)             	smpsLoop            $00, $02, Electoria_Loop25
(1)  718/    86AE : F7                          dc.b    $F7
(1)  718/    86AF : 0002                        dc.b    $00,$02
(1)  718/    86B1 : A886                                dc.w    z80_ptr(ELECTORIA_LOOP25)
(1)  719/    86B3 : (MACRO)             	smpsAlterPitch      $F4
(1)  719/    86B3 :  (MACRO-2)                  smpsChangeTransposition $F4
(1)  719/    86B3 : FBF4                                dc.b    $FB,$F4
(1)  720/    86B5 : (MACRO)             	smpsPSGAlterVol     $FF
(1)  720/    86B5 : ECFF                        dc.b    $EC,$FF
(1)  721/    86B7 : (MACRO)             	smpsJump            Electoria_Loop21
(1)  721/    86B7 : F6                          dc.b    $F6
(1)  721/    86B8 : 6386                                dc.w    z80_ptr(ELECTORIA_LOOP21)
(1)  722/    86BA :                     
(1)  723/    86BA :                     Electoria_Call0E:
(1)  724/    86BA : AA06 AC80 B080 80AA 	dc.b	nF3, $06, nG3, nRst, nB3, nRst, nRst, nF3, nG3, nRst, nB3, nRst
             86C2 : AC80 B080         
(1)  725/    86C6 : AAAC 80B0 80        	dc.b	nF3, nG3, nRst, nB3, nRst
(1)  726/    86CB : (MACRO)             	smpsReturn
(1)  726/    86CB : F9                                  dc.b    $F9
(1)  727/    86CC :                     
(1)  728/    86CC :                     Electoria_Call0F:
(1)  729/    86CC : AA06 AC80 B180 80AA 	dc.b	nF3, $06, nG3, nRst, nC4, nRst, nRst, nF3, nG3, nRst, nC4, nRst
             86D4 : AC80 B180         
(1)  730/    86D8 : AAAC 80B1 80        	dc.b	nF3, nG3, nRst, nC4, nRst
(1)  731/    86DD : (MACRO)             	smpsReturn
(1)  731/    86DD : F9                                  dc.b    $F9
(1)  732/    86DE :                     
(1)  733/    86DE :                     Electoria_Call10:
(1)  734/    86DE : 800C A780 06A7 0C80 	dc.b	nRst, $0C, nD3, nRst, $06, nD3, $0C, nRst, $06, nD3, $0C, nRst
             86E6 : 06A7 0C80         
(1)  735/    86EA : 06A7 0C80 06A7 0C   	dc.b	$06, nD3, $0C, nRst, $06, nD3, $0C
(1)  736/    86F1 : (MACRO)             	smpsReturn
(1)  736/    86F1 : F9                                  dc.b    $F9
(1)  737/    86F2 :                     
(1)  738/    86F2 :                     Electoria_Call11:
(1)  739/    86F2 : 800C AA80 06AA 0C06 	dc.b	nRst, $0C, nF3, nRst, $06, nF3, $0C, $06, nRst, $30
             86FA : 8030               
(1)  740/    86FC : (MACRO)             	smpsReturn
(1)  740/    86FC : F9                                  dc.b    $F9
(1)  741/    86FD :                     
(1)  742/    86FD :                     ; PSG3 Data
(1)  743/    86FD :                     Electoria_PSG3:
(1)  744/    86FD : (MACRO)             	smpsPSGform         $E7
(1)  744/    86FD : F3E7                        dc.b    $F3,$E7
(1)  745/    86FF :                     
(1)  746/    86FF :                     Electoria_Loop1C:
(1)  747/    86FF : (MACRO)             	smpsCall            Electoria_Call0C
(1)  747/    86FF : F8                          dc.b    $F8
(1)  747/    8700 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  748/    8702 : (MACRO)             	smpsLoop            $01, $09, Electoria_Loop1C
(1)  748/    8702 : F7                          dc.b    $F7
(1)  748/    8703 : 0109                        dc.b    $01,$09
(1)  748/    8705 : FF86                                dc.w    z80_ptr(ELECTORIA_LOOP1C)
(1)  749/    8707 :                     
(1)  750/    8707 :                     Electoria_Loop1D:
(1)  751/    8707 : (MACRO)             	smpsCall            Electoria_Call0C
(1)  751/    8707 : F8                          dc.b    $F8
(1)  751/    8708 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  752/    870A : (MACRO)             	smpsLoop            $01, $0F, Electoria_Loop1D
(1)  752/    870A : F7                          dc.b    $F7
(1)  752/    870B : 010F                        dc.b    $01,$0F
(1)  752/    870D : 0787                                dc.w    z80_ptr(ELECTORIA_LOOP1D)
(1)  753/    870F : (MACRO)             	smpsCall            Electoria_Call0D
(1)  753/    870F : F8                          dc.b    $F8
(1)  753/    8710 : 3587                                dc.w    z80_ptr(ELECTORIA_CALL0D)
(1)  754/    8712 :                     
(1)  755/    8712 :                     Electoria_Loop1E:
(1)  756/    8712 : (MACRO)             	smpsCall            Electoria_Call0C
(1)  756/    8712 : F8                          dc.b    $F8
(1)  756/    8713 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  757/    8715 : (MACRO)             	smpsLoop            $01, $13, Electoria_Loop1E
(1)  757/    8715 : F7                          dc.b    $F7
(1)  757/    8716 : 0113                        dc.b    $01,$13
(1)  757/    8718 : 1287                                dc.w    z80_ptr(ELECTORIA_LOOP1E)
(1)  758/    871A : (MACRO)             	smpsCall            Electoria_Call0D
(1)  758/    871A : F8                          dc.b    $F8
(1)  758/    871B : 3587                                dc.w    z80_ptr(ELECTORIA_CALL0D)
(1)  759/    871D :                     
(1)  760/    871D :                     Electoria_Loop1F:
(1)  761/    871D : (MACRO)             	smpsCall            Electoria_Call0C
(1)  761/    871D : F8                          dc.b    $F8
(1)  761/    871E : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  762/    8720 : (MACRO)             	smpsLoop            $01, $04, Electoria_Loop1F
(1)  762/    8720 : F7                          dc.b    $F7
(1)  762/    8721 : 0104                        dc.b    $01,$04
(1)  762/    8723 : 1D87                                dc.w    z80_ptr(ELECTORIA_LOOP1F)
(1)  763/    8725 : (MACRO)             	smpsJump            Electoria_Loop1D
(1)  763/    8725 : F6                          dc.b    $F6
(1)  763/    8726 : 0787                                dc.w    z80_ptr(ELECTORIA_LOOP1D)
(1)  764/    8728 :                     
(1)  765/    8728 :                     Electoria_Call0C:
(1)  766/    8728 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  766/    8728 : F502                        dc.b    $F5,STONE_02
(1)  767/    872A : B10C                	dc.b	(nMaxPSG2-$23)&$FF, $0C
(1)  768/    872C : (MACRO)             	smpsPSGvoice        sTone_05
(1)  768/    872C : F505                        dc.b    $F5,STONE_05
(1)  769/    872E : B1                  	dc.b	(nMaxPSG2-$23)&$FF
(1)  770/    872F : (MACRO)             	smpsLoop            $00, $04, Electoria_Call0C
(1)  770/    872F : F7                          dc.b    $F7
(1)  770/    8730 : 0004                        dc.b    $00,$04
(1)  770/    8732 : 2887                                dc.w    z80_ptr(ELECTORIA_CALL0C)
(1)  771/    8734 : (MACRO)             	smpsReturn
(1)  771/    8734 : F9                                  dc.b    $F9
(1)  772/    8735 :                     
(1)  773/    8735 :                     Electoria_Call0D:
(1)  774/    8735 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  774/    8735 : F502                        dc.b    $F5,STONE_02
(1)  775/    8737 : B10C                	dc.b	(nMaxPSG2-$23)&$FF, $0C
(1)  776/    8739 : (MACRO)             	smpsPSGvoice        sTone_05
(1)  776/    8739 : F505                        dc.b    $F5,STONE_05
(1)  777/    873B : 0C                  	dc.b	$0C
(1)  778/    873C : (MACRO)             	smpsPSGvoice        sTone_02
(1)  778/    873C : F502                        dc.b    $F5,STONE_02
(1)  779/    873E : 0C                  	dc.b	$0C
(1)  780/    873F : (MACRO)             	smpsPSGvoice        sTone_05
(1)  780/    873F : F505                        dc.b    $F5,STONE_05
(1)  781/    8741 : 06                  	dc.b	$06
(1)  782/    8742 : (MACRO)             	smpsPSGvoice        sTone_02
(1)  782/    8742 : F502                        dc.b    $F5,STONE_02
(1)  783/    8744 : 0680 30             	dc.b	$06, nRst, $30
(1)  784/    8747 : (MACRO)             	smpsReturn
(1)  784/    8747 : F9                                  dc.b    $F9
(1)  785/    8748 :                     
(1)  786/    8748 :                     ; DAC Data
(1)  787/    8748 :                     Electoria_DAC:
(1)  788/    8748 : 8206 8082 8280 8282 	dc.b	dHighTom, $06, nRst, dHighTom, dHighTom, nRst, dHighTom, dHighTom, dSnareS3, dHighTom, dMidTomS3, dLowTomS3
             8750 : 8182 8384         
(1)  789/    8754 : 8282 8485 82        	dc.b	dHighTom, dHighTom, dLowTomS3, dFloorTomS3, dHighTom
(1)  790/    8759 :                     
(1)  791/    8759 :                     Electoria_Loop00:
(1)  792/    8759 : (MACRO)             	smpsCall            Electoria_Call00
(1)  792/    8759 : F8                          dc.b    $F8
(1)  792/    875A : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  793/    875C : (MACRO)             	smpsCall            Electoria_Call01
(1)  793/    875C : F8                          dc.b    $F8
(1)  793/    875D : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  794/    875F : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop00
(1)  794/    875F : F7                          dc.b    $F7
(1)  794/    8760 : 0003                        dc.b    $00,$03
(1)  794/    8762 : 5987                                dc.w    z80_ptr(ELECTORIA_LOOP00)
(1)  795/    8764 : (MACRO)             	smpsCall            Electoria_Call00
(1)  795/    8764 : F8                          dc.b    $F8
(1)  795/    8765 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  796/    8767 : (MACRO)             	smpsCall            Electoria_Call02
(1)  796/    8767 : F8                          dc.b    $F8
(1)  796/    8768 : F587                                dc.w    z80_ptr(ELECTORIA_CALL02)
(1)  797/    876A :                     
(1)  798/    876A :                     Electoria_Loop01:
(1)  799/    876A : (MACRO)             	smpsCall            Electoria_Call00
(1)  799/    876A : F8                          dc.b    $F8
(1)  799/    876B : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  800/    876D : (MACRO)             	smpsCall            Electoria_Call01
(1)  800/    876D : F8                          dc.b    $F8
(1)  800/    876E : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  801/    8770 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop01
(1)  801/    8770 : F7                          dc.b    $F7
(1)  801/    8771 : 0003                        dc.b    $00,$03
(1)  801/    8773 : 6A87                                dc.w    z80_ptr(ELECTORIA_LOOP01)
(1)  802/    8775 : (MACRO)             	smpsCall            Electoria_Call00
(1)  802/    8775 : F8                          dc.b    $F8
(1)  802/    8776 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  803/    8778 : (MACRO)             	smpsCall            Electoria_Call03
(1)  803/    8778 : F8                          dc.b    $F8
(1)  803/    8779 : 0288                                dc.w    z80_ptr(ELECTORIA_CALL03)
(1)  804/    877B :                     
(1)  805/    877B :                     Electoria_Loop02:
(1)  806/    877B : (MACRO)             	smpsCall            Electoria_Call00
(1)  806/    877B : F8                          dc.b    $F8
(1)  806/    877C : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  807/    877E : (MACRO)             	smpsCall            Electoria_Call01
(1)  807/    877E : F8                          dc.b    $F8
(1)  807/    877F : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  808/    8781 : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop02
(1)  808/    8781 : F7                          dc.b    $F7
(1)  808/    8782 : 0003                        dc.b    $00,$03
(1)  808/    8784 : 7B87                                dc.w    z80_ptr(ELECTORIA_LOOP02)
(1)  809/    8786 : (MACRO)             	smpsCall            Electoria_Call00
(1)  809/    8786 : F8                          dc.b    $F8
(1)  809/    8787 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  810/    8789 : 8204 8282 8206 8282 	dc.b	dHighTom, $04, dHighTom, dHighTom, dHighTom, $06, dHighTom, dHighTom, dHighTom, dHighTom, dHighTom, nRst
             8791 : 8282 8280         
(1)  811/    8795 : 30                  	dc.b	$30
(1)  812/    8796 :                     
(1)  813/    8796 :                     Electoria_Loop03:
(1)  814/    8796 : (MACRO)             	smpsCall            Electoria_Call00
(1)  814/    8796 : F8                          dc.b    $F8
(1)  814/    8797 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  815/    8799 : (MACRO)             	smpsCall            Electoria_Call01
(1)  815/    8799 : F8                          dc.b    $F8
(1)  815/    879A : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  816/    879C : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop03
(1)  816/    879C : F7                          dc.b    $F7
(1)  816/    879D : 0003                        dc.b    $00,$03
(1)  816/    879F : 9687                                dc.w    z80_ptr(ELECTORIA_LOOP03)
(1)  817/    87A1 : (MACRO)             	smpsCall            Electoria_Call00
(1)  817/    87A1 : F8                          dc.b    $F8
(1)  817/    87A2 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  818/    87A4 : (MACRO)             	smpsCall            Electoria_Call02
(1)  818/    87A4 : F8                          dc.b    $F8
(1)  818/    87A5 : F587                                dc.w    z80_ptr(ELECTORIA_CALL02)
(1)  819/    87A7 :                     
(1)  820/    87A7 :                     Electoria_Loop04:
(1)  821/    87A7 : (MACRO)             	smpsCall            Electoria_Call00
(1)  821/    87A7 : F8                          dc.b    $F8
(1)  821/    87A8 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  822/    87AA : (MACRO)             	smpsCall            Electoria_Call01
(1)  822/    87AA : F8                          dc.b    $F8
(1)  822/    87AB : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  823/    87AD : (MACRO)             	smpsLoop            $00, $03, Electoria_Loop04
(1)  823/    87AD : F7                          dc.b    $F7
(1)  823/    87AE : 0003                        dc.b    $00,$03
(1)  823/    87B0 : A787                                dc.w    z80_ptr(ELECTORIA_LOOP04)
(1)  824/    87B2 : (MACRO)             	smpsCall            Electoria_Call00
(1)  824/    87B2 : F8                          dc.b    $F8
(1)  824/    87B3 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  825/    87B5 : (MACRO)             	smpsCall            Electoria_Call03
(1)  825/    87B5 : F8                          dc.b    $F8
(1)  825/    87B6 : 0288                                dc.w    z80_ptr(ELECTORIA_CALL03)
(1)  826/    87B8 : (MACRO)             	smpsCall            Electoria_Call00
(1)  826/    87B8 : F8                          dc.b    $F8
(1)  826/    87B9 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  827/    87BB : (MACRO)             	smpsCall            Electoria_Call01
(1)  827/    87BB : F8                          dc.b    $F8
(1)  827/    87BC : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  828/    87BE : (MACRO)             	smpsCall            Electoria_Call00
(1)  828/    87BE : F8                          dc.b    $F8
(1)  828/    87BF : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  829/    87C1 : 8106 8212 8281 0680 	dc.b	dSnareS3, $06, dHighTom, $12, dHighTom, dSnareS3, $06, nRst, $30
             87C9 : 30               
(1)  830/    87CA : (MACRO)             	smpsCall            Electoria_Call00
(1)  830/    87CA : F8                          dc.b    $F8
(1)  830/    87CB : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  831/    87CD : (MACRO)             	smpsCall            Electoria_Call01
(1)  831/    87CD : F8                          dc.b    $F8
(1)  831/    87CE : E787                                dc.w    z80_ptr(ELECTORIA_CALL01)
(1)  832/    87D0 : (MACRO)             	smpsCall            Electoria_Call00
(1)  832/    87D0 : F8                          dc.b    $F8
(1)  832/    87D1 : D987                                dc.w    z80_ptr(ELECTORIA_CALL00)
(1)  833/    87D3 : (MACRO)             	smpsCall            Electoria_Call02
(1)  833/    87D3 : F8                          dc.b    $F8
(1)  833/    87D4 : F587                                dc.w    z80_ptr(ELECTORIA_CALL02)
(1)  834/    87D6 : (MACRO)             	smpsJump            Electoria_Loop01
(1)  834/    87D6 : F6                          dc.b    $F6
(1)  834/    87D7 : 6A87                                dc.w    z80_ptr(ELECTORIA_LOOP01)
(1)  835/    87D9 :                     
(1)  836/    87D9 :                     Electoria_Call00:
(1)  837/    87D9 : 810C 8182 8006 8280 	dc.b	dSnareS3, $0C, dSnareS3, dHighTom, nRst, $06, dHighTom, nRst, dHighTom, dSnareS3, nRst, dHighTom
             87E1 : 8281 8082         
(1)  838/    87E5 : 18                  	dc.b	$18
(1)  839/    87E6 : (MACRO)             	smpsReturn
(1)  839/    87E6 : F9                                  dc.b    $F9
(1)  840/    87E7 :                     
(1)  841/    87E7 :                     Electoria_Call01:
(1)  842/    87E7 : 8106 8212 8281 0680 	dc.b	dSnareS3, $06, dHighTom, $12, dHighTom, dSnareS3, $06, nRst, dHighTom, dSnareS3, nRst, dHighTom
             87EF : 8281 8082         
(1)  843/    87F3 : 18                  	dc.b	$18
(1)  844/    87F4 : (MACRO)             	smpsReturn
(1)  844/    87F4 : F9                                  dc.b    $F9
(1)  845/    87F5 :                     
(1)  846/    87F5 :                     Electoria_Call02:
(1)  847/    87F5 : 840C 0C0C 0606 8084 	dc.b	dLowTomS3, $0C, $0C, $0C, $06, $06, nRst, dLowTomS3, dLowTomS3, $0C, dLowTomS3, dLowTomS3
             87FD : 840C 8484         
(1)  848/    8801 : (MACRO)             	smpsReturn
(1)  848/    8801 : F9                                  dc.b    $F9
(1)  849/    8802 :                     
(1)  850/    8802 :                     Electoria_Call03:
(1)  851/    8802 : 8006 8212 8218 8006 	dc.b	nRst, $06, dHighTom, $12, dHighTom, $18, nRst, $06, dHighTom, $12, dHighTom, $18
             880A : 8212 8218         
(1)  852/    880E : (MACRO)             	smpsReturn
(1)  852/    880E : F9                                  dc.b    $F9
(1)  853/    880F :                     
(1)  854/    880F :                     Electoria_Voices:
(1)  855/    880F :                     ;	Voice $00
(1)  856/    880F :                     ;	$3B
(1)  857/    880F :                     ;	$12, $11, $13, $01, 	$1F, $1F, $1F, $1E, 	$02, $0C, $13, $07
(1)  858/    880F :                     ;	$12, $0A, $05, $07, 	$0F, $3F, $5F, $3F, 	$16, $10, $15, $80
(1)  859/    880F : (MACRO)             	smpsVcAlgorithm     $03
(1)  859/    880F : =$3                 vcAlgorithm set $03
(1)  860/    880F : (MACRO)             	smpsVcFeedback      $07
(1)  860/    880F : =$7                 vcFeedback set $07
(1)  861/    880F : (MACRO)             	smpsVcUnusedBits    $00
(1)  861/    880F : =$0                 vcUnusedBits set $00
(1)  861/    880F : =$0                 vcD1R1Unk set 0
(1)  861/    880F : =$0                 vcD1R2Unk set 0
(1)  861/    880F : =$0                 vcD1R3Unk set 0
(1)  861/    880F : =$0                 vcD1R4Unk set 0
(1)  862/    880F : (MACRO)             	smpsVcDetune        $00, $01, $01, $01
(1)  862/    880F : =$0                 vcDT1 set $00
(1)  862/    880F : =$1                 vcDT2 set $01
(1)  862/    880F : =$1                 vcDT3 set $01
(1)  862/    880F : =$1                 vcDT4 set $01
(1)  863/    880F : (MACRO)             	smpsVcCoarseFreq    $01, $03, $01, $02
(1)  863/    880F : =$1                 vcCF1 set $01
(1)  863/    880F : =$3                 vcCF2 set $03
(1)  863/    880F : =$1                 vcCF3 set $01
(1)  863/    880F : =$2                 vcCF4 set $02
(1)  864/    880F : (MACRO)             	smpsVcRateScale     $00, $00, $00, $00
(1)  864/    880F : =$0                 vcRS1 set $00
(1)  864/    880F : =$0                 vcRS2 set $00
(1)  864/    880F : =$0                 vcRS3 set $00
(1)  864/    880F : =$0                 vcRS4 set $00
(1)  865/    880F : (MACRO)             	smpsVcAttackRate    $1E, $1F, $1F, $1F
(1)  865/    880F : =$1E                vcAR1 set $1E
(1)  865/    880F : =$1F                vcAR2 set $1F
(1)  865/    880F : =$1F                vcAR3 set $1F
(1)  865/    880F : =$1F                vcAR4 set $1F
(1)  866/    880F : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  866/    880F : =$0                 vcAM1 set $00<<5
(1)  866/    880F : =$0                 vcAM2 set $00<<5
(1)  866/    880F : =$0                 vcAM3 set $00<<5
(1)  866/    880F : =$0                 vcAM4 set $00<<5
(1)  867/    880F : (MACRO)             	smpsVcDecayRate1    $07, $13, $0C, $02
(1)  867/    880F : =$7                 vcD1R1 set $07
(1)  867/    880F : =$13                vcD1R2 set $13
(1)  867/    880F : =$C                 vcD1R3 set $0C
(1)  867/    880F : =$2                 vcD1R4 set $02
(1)  868/    880F : (MACRO)             	smpsVcDecayRate2    $07, $05, $0A, $12
(1)  868/    880F : =$7                 vcD2R1 set $07
(1)  868/    880F : =$5                 vcD2R2 set $05
(1)  868/    880F : =$A                 vcD2R3 set $0A
(1)  868/    880F : =$12                vcD2R4 set $12
(1)  869/    880F : (MACRO)             	smpsVcDecayLevel    $03, $05, $03, $00
(1)  869/    880F : =$3                 vcDL1 set $03
(1)  869/    880F : =$5                 vcDL2 set $05
(1)  869/    880F : =$3                 vcDL3 set $03
(1)  869/    880F : =$0                 vcDL4 set $00
(1)  870/    880F : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  870/    880F : =$F                 vcRR1 set $0F
(1)  870/    880F : =$F                 vcRR2 set $0F
(1)  870/    880F : =$F                 vcRR3 set $0F
(1)  870/    880F : =$F                 vcRR4 set $0F
(1)  871/    880F : (MACRO)             	smpsVcTotalLevel    $00, $15, $10, $16
(1)  871/    880F : =$0                 vcTL1 set $00
(1)  871/    880F : =$15                vcTL2 set $15
(1)  871/    880F : =$10                vcTL3 set $10
(1)  871/    880F : =$16                vcTL4 set $16
(1)  871/    880F : 3B                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  871/    8810 :                     ;   0     1     2     3     4     5     6     7
(1)  871/    8810 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  871/    8810 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  871/    8810 : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  871/    8810 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  871/    8810 : =$80                vcTLMask1 set $80
(1)  871/    8810 :                     
(1)  871/    8810 :                     
(1)  871/    8810 : 1211 1301                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  871/    8814 : 1F1F 1F1E                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  871/    8818 : 020C 1307                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  871/    881C : 120A 0507                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  871/    8820 : 0F3F 5F3F                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  871/    8824 : 1610 1580                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  872/    8828 :                     
(1)  873/    8828 :                     ;	Voice $01
(1)  874/    8828 :                     ;	$3C
(1)  875/    8828 :                     ;	$01, $02, $0F, $04, 	$8D, $52, $9F, $1F, 	$09, $00, $00, $0D
(1)  876/    8828 :                     ;	$00, $00, $00, $00, 	$2F, $0F, $0F, $FF, 	$17, $86, $1F, $86
(1)  877/    8828 : (MACRO)             	smpsVcAlgorithm     $04
(1)  877/    8828 : =$4                 vcAlgorithm set $04
(1)  878/    8828 : (MACRO)             	smpsVcFeedback      $07
(1)  878/    8828 : =$7                 vcFeedback set $07
(1)  879/    8828 : (MACRO)             	smpsVcUnusedBits    $00
(1)  879/    8828 : =$0                 vcUnusedBits set $00
(1)  879/    8828 : =$0                 vcD1R1Unk set 0
(1)  879/    8828 : =$0                 vcD1R2Unk set 0
(1)  879/    8828 : =$0                 vcD1R3Unk set 0
(1)  879/    8828 : =$0                 vcD1R4Unk set 0
(1)  880/    8828 : (MACRO)             	smpsVcDetune        $00, $00, $00, $00
(1)  880/    8828 : =$0                 vcDT1 set $00
(1)  880/    8828 : =$0                 vcDT2 set $00
(1)  880/    8828 : =$0                 vcDT3 set $00
(1)  880/    8828 : =$0                 vcDT4 set $00
(1)  881/    8828 : (MACRO)             	smpsVcCoarseFreq    $04, $0F, $02, $01
(1)  881/    8828 : =$4                 vcCF1 set $04
(1)  881/    8828 : =$F                 vcCF2 set $0F
(1)  881/    8828 : =$2                 vcCF3 set $02
(1)  881/    8828 : =$1                 vcCF4 set $01
(1)  882/    8828 : (MACRO)             	smpsVcRateScale     $00, $02, $01, $02
(1)  882/    8828 : =$0                 vcRS1 set $00
(1)  882/    8828 : =$2                 vcRS2 set $02
(1)  882/    8828 : =$1                 vcRS3 set $01
(1)  882/    8828 : =$2                 vcRS4 set $02
(1)  883/    8828 : (MACRO)             	smpsVcAttackRate    $1F, $1F, $12, $0D
(1)  883/    8828 : =$1F                vcAR1 set $1F
(1)  883/    8828 : =$1F                vcAR2 set $1F
(1)  883/    8828 : =$12                vcAR3 set $12
(1)  883/    8828 : =$D                 vcAR4 set $0D
(1)  884/    8828 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  884/    8828 : =$0                 vcAM1 set $00<<5
(1)  884/    8828 : =$0                 vcAM2 set $00<<5
(1)  884/    8828 : =$0                 vcAM3 set $00<<5
(1)  884/    8828 : =$0                 vcAM4 set $00<<5
(1)  885/    8828 : (MACRO)             	smpsVcDecayRate1    $0D, $00, $00, $09
(1)  885/    8828 : =$D                 vcD1R1 set $0D
(1)  885/    8828 : =$0                 vcD1R2 set $00
(1)  885/    8828 : =$0                 vcD1R3 set $00
(1)  885/    8828 : =$9                 vcD1R4 set $09
(1)  886/    8828 : (MACRO)             	smpsVcDecayRate2    $00, $00, $00, $00
(1)  886/    8828 : =$0                 vcD2R1 set $00
(1)  886/    8828 : =$0                 vcD2R2 set $00
(1)  886/    8828 : =$0                 vcD2R3 set $00
(1)  886/    8828 : =$0                 vcD2R4 set $00
(1)  887/    8828 : (MACRO)             	smpsVcDecayLevel    $0F, $00, $00, $02
(1)  887/    8828 : =$F                 vcDL1 set $0F
(1)  887/    8828 : =$0                 vcDL2 set $00
(1)  887/    8828 : =$0                 vcDL3 set $00
(1)  887/    8828 : =$2                 vcDL4 set $02
(1)  888/    8828 : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  888/    8828 : =$F                 vcRR1 set $0F
(1)  888/    8828 : =$F                 vcRR2 set $0F
(1)  888/    8828 : =$F                 vcRR3 set $0F
(1)  888/    8828 : =$F                 vcRR4 set $0F
(1)  889/    8828 : (MACRO)             	smpsVcTotalLevel    $06, $1F, $06, $17
(1)  889/    8828 : =$6                 vcTL1 set $06
(1)  889/    8828 : =$1F                vcTL2 set $1F
(1)  889/    8828 : =$6                 vcTL3 set $06
(1)  889/    8828 : =$17                vcTL4 set $17
(1)  889/    8828 : 3C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  889/    8829 :                     ;   0     1     2     3     4     5     6     7
(1)  889/    8829 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  889/    8829 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  889/    8829 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  889/    8829 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  889/    8829 : =$80                vcTLMask1 set $80
(1)  889/    8829 :                     
(1)  889/    8829 :                     
(1)  889/    8829 : 0102 0F04                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  889/    882D : 8D52 9F1F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  889/    8831 : 0900 000D                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  889/    8835 : 0000 0000                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  889/    8839 : 2F0F 0FFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  889/    883D : 1786 1F86                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  890/    8841 :                     
(1)  891/    8841 :                     ;	Voice $02
(1)  892/    8841 :                     ;	$2C
(1)  893/    8841 :                     ;	$22, $04, $02, $14, 	$51, $52, $50, $52, 	$0D, $00, $06, $04
(1)  894/    8841 :                     ;	$03, $05, $02, $00, 	$16, $18, $26, $18, 	$0F, $80, $12, $80
(1)  895/    8841 : (MACRO)             	smpsVcAlgorithm     $04
(1)  895/    8841 : =$4                 vcAlgorithm set $04
(1)  896/    8841 : (MACRO)             	smpsVcFeedback      $05
(1)  896/    8841 : =$5                 vcFeedback set $05
(1)  897/    8841 : (MACRO)             	smpsVcUnusedBits    $00
(1)  897/    8841 : =$0                 vcUnusedBits set $00
(1)  897/    8841 : =$0                 vcD1R1Unk set 0
(1)  897/    8841 : =$0                 vcD1R2Unk set 0
(1)  897/    8841 : =$0                 vcD1R3Unk set 0
(1)  897/    8841 : =$0                 vcD1R4Unk set 0
(1)  898/    8841 : (MACRO)             	smpsVcDetune        $01, $00, $00, $02
(1)  898/    8841 : =$1                 vcDT1 set $01
(1)  898/    8841 : =$0                 vcDT2 set $00
(1)  898/    8841 : =$0                 vcDT3 set $00
(1)  898/    8841 : =$2                 vcDT4 set $02
(1)  899/    8841 : (MACRO)             	smpsVcCoarseFreq    $04, $02, $04, $02
(1)  899/    8841 : =$4                 vcCF1 set $04
(1)  899/    8841 : =$2                 vcCF2 set $02
(1)  899/    8841 : =$4                 vcCF3 set $04
(1)  899/    8841 : =$2                 vcCF4 set $02
(1)  900/    8841 : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  900/    8841 : =$1                 vcRS1 set $01
(1)  900/    8841 : =$1                 vcRS2 set $01
(1)  900/    8841 : =$1                 vcRS3 set $01
(1)  900/    8841 : =$1                 vcRS4 set $01
(1)  901/    8841 : (MACRO)             	smpsVcAttackRate    $12, $10, $12, $11
(1)  901/    8841 : =$12                vcAR1 set $12
(1)  901/    8841 : =$10                vcAR2 set $10
(1)  901/    8841 : =$12                vcAR3 set $12
(1)  901/    8841 : =$11                vcAR4 set $11
(1)  902/    8841 : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  902/    8841 : =$0                 vcAM1 set $00<<5
(1)  902/    8841 : =$0                 vcAM2 set $00<<5
(1)  902/    8841 : =$0                 vcAM3 set $00<<5
(1)  902/    8841 : =$0                 vcAM4 set $00<<5
(1)  903/    8841 : (MACRO)             	smpsVcDecayRate1    $04, $06, $00, $0D
(1)  903/    8841 : =$4                 vcD1R1 set $04
(1)  903/    8841 : =$6                 vcD1R2 set $06
(1)  903/    8841 : =$0                 vcD1R3 set $00
(1)  903/    8841 : =$D                 vcD1R4 set $0D
(1)  904/    8841 : (MACRO)             	smpsVcDecayRate2    $00, $02, $05, $03
(1)  904/    8841 : =$0                 vcD2R1 set $00
(1)  904/    8841 : =$2                 vcD2R2 set $02
(1)  904/    8841 : =$5                 vcD2R3 set $05
(1)  904/    8841 : =$3                 vcD2R4 set $03
(1)  905/    8841 : (MACRO)             	smpsVcDecayLevel    $01, $02, $01, $01
(1)  905/    8841 : =$1                 vcDL1 set $01
(1)  905/    8841 : =$2                 vcDL2 set $02
(1)  905/    8841 : =$1                 vcDL3 set $01
(1)  905/    8841 : =$1                 vcDL4 set $01
(1)  906/    8841 : (MACRO)             	smpsVcReleaseRate   $08, $06, $08, $06
(1)  906/    8841 : =$8                 vcRR1 set $08
(1)  906/    8841 : =$6                 vcRR2 set $06
(1)  906/    8841 : =$8                 vcRR3 set $08
(1)  906/    8841 : =$6                 vcRR4 set $06
(1)  907/    8841 : (MACRO)             	smpsVcTotalLevel    $00, $12, $00, $0F
(1)  907/    8841 : =$0                 vcTL1 set $00
(1)  907/    8841 : =$12                vcTL2 set $12
(1)  907/    8841 : =$0                 vcTL3 set $00
(1)  907/    8841 : =$F                 vcTL4 set $0F
(1)  907/    8841 : 2C                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  907/    8842 :                     ;   0     1     2     3     4     5     6     7
(1)  907/    8842 :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  907/    8842 : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  907/    8842 : =$80                vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  907/    8842 : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  907/    8842 : =$80                vcTLMask1 set $80
(1)  907/    8842 :                     
(1)  907/    8842 :                     
(1)  907/    8842 : 2204 0214                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  907/    8846 : 5152 5052                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  907/    884A : 0D00 0604                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  907/    884E : 0305 0200                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  907/    8852 : 1618 2618                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  907/    8856 : 0F80 1280                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  908/    885A :                     
(1)  909/    885A :                     ;	Voice $03
(1)  910/    885A :                     ;	$41
(1)  911/    885A :                     ;	$18, $12, $02, $12, 	$5F, $5F, $5F, $5F, 	$0C, $0B, $0B, $0B
(1)  912/    885A :                     ;	$09, $08, $10, $0A, 	$AF, $FF, $FF, $FF, 	$1D, $23, $1B, $80
(1)  913/    885A : (MACRO)             	smpsVcAlgorithm     $01
(1)  913/    885A : =$1                 vcAlgorithm set $01
(1)  914/    885A : (MACRO)             	smpsVcFeedback      $00
(1)  914/    885A : =$0                 vcFeedback set $00
(1)  915/    885A : (MACRO)             	smpsVcUnusedBits    $01
(1)  915/    885A : =$1                 vcUnusedBits set $01
(1)  915/    885A : =$0                 vcD1R1Unk set 0
(1)  915/    885A : =$0                 vcD1R2Unk set 0
(1)  915/    885A : =$0                 vcD1R3Unk set 0
(1)  915/    885A : =$0                 vcD1R4Unk set 0
(1)  916/    885A : (MACRO)             	smpsVcDetune        $01, $00, $01, $01
(1)  916/    885A : =$1                 vcDT1 set $01
(1)  916/    885A : =$0                 vcDT2 set $00
(1)  916/    885A : =$1                 vcDT3 set $01
(1)  916/    885A : =$1                 vcDT4 set $01
(1)  917/    885A : (MACRO)             	smpsVcCoarseFreq    $02, $02, $02, $08
(1)  917/    885A : =$2                 vcCF1 set $02
(1)  917/    885A : =$2                 vcCF2 set $02
(1)  917/    885A : =$2                 vcCF3 set $02
(1)  917/    885A : =$8                 vcCF4 set $08
(1)  918/    885A : (MACRO)             	smpsVcRateScale     $01, $01, $01, $01
(1)  918/    885A : =$1                 vcRS1 set $01
(1)  918/    885A : =$1                 vcRS2 set $01
(1)  918/    885A : =$1                 vcRS3 set $01
(1)  918/    885A : =$1                 vcRS4 set $01
(1)  919/    885A : (MACRO)             	smpsVcAttackRate    $1F, $1F, $1F, $1F
(1)  919/    885A : =$1F                vcAR1 set $1F
(1)  919/    885A : =$1F                vcAR2 set $1F
(1)  919/    885A : =$1F                vcAR3 set $1F
(1)  919/    885A : =$1F                vcAR4 set $1F
(1)  920/    885A : (MACRO)             	smpsVcAmpMod        $00, $00, $00, $00
(1)  920/    885A : =$0                 vcAM1 set $00<<5
(1)  920/    885A : =$0                 vcAM2 set $00<<5
(1)  920/    885A : =$0                 vcAM3 set $00<<5
(1)  920/    885A : =$0                 vcAM4 set $00<<5
(1)  921/    885A : (MACRO)             	smpsVcDecayRate1    $0B, $0B, $0B, $0C
(1)  921/    885A : =$B                 vcD1R1 set $0B
(1)  921/    885A : =$B                 vcD1R2 set $0B
(1)  921/    885A : =$B                 vcD1R3 set $0B
(1)  921/    885A : =$C                 vcD1R4 set $0C
(1)  922/    885A : (MACRO)             	smpsVcDecayRate2    $0A, $10, $08, $09
(1)  922/    885A : =$A                 vcD2R1 set $0A
(1)  922/    885A : =$10                vcD2R2 set $10
(1)  922/    885A : =$8                 vcD2R3 set $08
(1)  922/    885A : =$9                 vcD2R4 set $09
(1)  923/    885A : (MACRO)             	smpsVcDecayLevel    $0F, $0F, $0F, $0A
(1)  923/    885A : =$F                 vcDL1 set $0F
(1)  923/    885A : =$F                 vcDL2 set $0F
(1)  923/    885A : =$F                 vcDL3 set $0F
(1)  923/    885A : =$A                 vcDL4 set $0A
(1)  924/    885A : (MACRO)             	smpsVcReleaseRate   $0F, $0F, $0F, $0F
(1)  924/    885A : =$F                 vcRR1 set $0F
(1)  924/    885A : =$F                 vcRR2 set $0F
(1)  924/    885A : =$F                 vcRR3 set $0F
(1)  924/    885A : =$F                 vcRR4 set $0F
(1)  925/    885A : (MACRO)             	smpsVcTotalLevel    $00, $1B, $23, $1D
(1)  925/    885A : =$0                 vcTL1 set $00
(1)  925/    885A : =$1B                vcTL2 set $1B
(1)  925/    885A : =$23                vcTL3 set $23
(1)  925/    885A : =$1D                vcTL4 set $1D
(1)  925/    885A : 41                          dc.b    (vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(1)  925/    885B :                     ;   0     1     2     3     4     5     6     7
(1)  925/    885B :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(1)  925/    885B : =$0                 vcTLMask4 set ((vcAlgorithm==7)<<7)
(1)  925/    885B : =$0                 vcTLMask3 set ((vcAlgorithm>=4)<<7)
(1)  925/    885B : =$0                 vcTLMask2 set ((vcAlgorithm>=5)<<7)
(1)  925/    885B : =$80                vcTLMask1 set $80
(1)  925/    885B :                     
(1)  925/    885B :                     
(1)  925/    885B : 1812 0212                           dc.b    (vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(1)  925/    885F : 5F5F 5F5F                           dc.b    (vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(1)  925/    8863 : 0C0B 0B0B                           dc.b    vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(1)  925/    8867 : 0908 100A                           dc.b    vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(1)  925/    886B : AFFF FFFF                           dc.b    (vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(1)  925/    886F : 1D23 1B80                           dc.b    vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(1)  926/    8873 :                     
(1)  927/    8873 :                     
 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 2 - 11/2/2023 22:40:16


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
*CASESENSITIVE :                  0 - | *CFM3 :                           2 - |
*CFM4 :                           4 - | *CFM5 :                           5 - |
*CFM6 :                           6 - | *CNOISE :                        E0 - |
*CONSTPI :        3.141592653589793 - | *CPSG1 :                         80 - |
*CPSG2 :                         A0 - | *CPSG3 :                         C0 - |
*DATE :                 "11/2/2023" - | *DBASSHEY :                      B6 - |
*DCLAP :                         C7 - | *DCLAPS3 :                       8F - |
*DCLICK :                        9C - | *DCOMEON :                       A5 - |
*DCRASHCYMBAL :                  88 - | *DCRASHINGNOISEWOO :             BE - |
*DDANCESNARE :                   A6 - | *DDANCESTYLEKICK :               B7 - |
 DECHOEDCLAPHIT :                B2 - | *DECHOEDCLAPHIT_S3 :             D8 - |
 DELECTRICFLOORTOM :             93 - |  DELECTRICHIGHTOM :              90 - |
*DELECTRICLOWTOM :               92 - | *DELECTRICMIDTOM :               91 - |
*DFINALFIGHTMETALCRASH :         D6 - | *DFLOORTOM :                     D2 - |
 DFLOORTOMS3 :                   85 - | *DGLASSCRASH :                   A0 - |
*DGLASSCRASHKICK :               A1 - | *DGLASSCRASHSNARE :              9F - |
*DGO :                           AA - |  DHICLAP :                       D3 - |
*DHIGHERMETALHIT :               8D - |  DHIGHMETALHIT :                 8C - |
 DHIGHTOM :                      82 - | *DHIHITDRUM :                    AF - |
*DHIPHOPHITKICK :                B4 - | *DHIPHOPHITKICK2 :               B8 - |
 DHIPHOPHITKICK3 :               B9 - |  DHIPHOPHITPOWERKICK :           B5 - |
*DHITIMPANI :                    CC - | *DHITIMPANIS3 :                  98 - |
*DHITOM :                        CA - | *DHIWOODBLOCK :                  AD - |
 DINTROKICK :                    D7 - |  DKICK :                         C5 - |
*DKICKEXTRABASS :                A4 - | *DKICKHEY :                      C0 - |
*DKICKS3 :                       86 - |  DLOOSEKICK :                    A7 - |
 DLOOSERSNARE :                  97 - | *DLOOSESNARE :                   96 - |
*DLOOSESNARENOISE :              BC - |  DLOWCLAP :                      D5 - |
*DLOWERECHOEDCLAPHIT :           B3 - | *DLOWERECHOEDCLAPHIT_S3 :        D9 - |
*DLOWERPOWERKICKHIT :            C3 - |  DLOWESTPOWERKICKHIT :           C4 - |
*DLOWHITDRUM :                   B0 - | *DLOWMETALHIT :                  8A - |
*DLOWPOWERKICKHIT :              C2 - | *DLOWTIMPANI :                   CE - |
*DLOWTIMPANIS3 :                 99 - | *DLOWTOM :                       D1 - |
 DLOWTOMS3 :                     84 - |  DLOWWOODBLOCK :                 AE - |
*DMETALCRASHHIT :                B1 - | *DMETALHIT :                     8B - |
*DMIDCLAP :                      D4 - | *DMIDMETALHIT :                  8E - |
*DMIDPITCHSNARE :                95 - |  DMIDTIMPANI :                   CD - |
*DMIDTIMPANIS3 :                 9A - | *DMIDTOM :                       D0 - |
 DMIDTOMS3 :                     83 - | *DMODLOOSEKICK :                 A8 - |
 DMUFFLEDSNARE :                 87 - | *DODDSNAREKICK :                 A3 - |
*DPOWERKICK :                    9D - |  DPOWERKICK2 :                   BD - |
 DPOWERKICKHIT :                 C1 - | *DPOWERTOM :                     AC - |
 DQUICKGLASSCRASH :              9E - | *DQUICKHIT :                     BF - |
 DQUICKLOOSESNARE :              9B - |  DQUIETGLASSCRASH :              A2 - |
*DREVERSEFADINGWIND :            BA - | *DRIDECYMBAL :                   89 - |
*DSCRATCH :                      C8 - | *DSCRATCHS3 :                    BB - |
*DSNARE :                        C6 - | *DSNAREGO :                      AB - |
 DSNARES3 :                      81 - | *DTIGHTSNARE :                   94 - |
*DTIMPANI :                      C9 - | *DVLOWCLAP :                     CB - |
*DVLOWTIMPANI :                  CF - | *DWOO :                          A9 - |
 ELECTORIA_CALL00 :            87D9 C |  ELECTORIA_CALL01 :            87E7 C |
 ELECTORIA_CALL02 :            87F5 C |  ELECTORIA_CALL03 :            8802 C |
 ELECTORIA_CALL04 :            8181 C |  ELECTORIA_CALL05 :            855D C |
 ELECTORIA_CALL06 :            81AE C |  ELECTORIA_CALL07 :            81C3 C |
 ELECTORIA_CALL08 :            81EE C |  ELECTORIA_CALL09 :            825C C |
 ELECTORIA_CALL0A :            82CB C |  ELECTORIA_CALL0B :            80A1 C |
 ELECTORIA_CALL0C :            8728 C |  ELECTORIA_CALL0D :            8735 C |
 ELECTORIA_CALL0E :            86BA C |  ELECTORIA_CALL0F :            86CC C |
 ELECTORIA_CALL10 :            86DE C |  ELECTORIA_CALL11 :            86F2 C |
 ELECTORIA_CALL12 :            863C C |  ELECTORIA_CALL13 :            833A C |
 ELECTORIA_DAC :               8748 C |  ELECTORIA_FM1 :               8030 C |
 ELECTORIA_FM2 :               80B2 C |  ELECTORIA_FM3 :               83DD C |
 ELECTORIA_FM4 :               84E8 C |  ELECTORIA_FM5 :               856F C |
*ELECTORIA_HEADER :            8000 C |  ELECTORIA_JUMP00 :            83EF C |
 ELECTORIA_JUMP01 :            80C7 C |  ELECTORIA_LOOP00 :            8759 C |
 ELECTORIA_LOOP01 :            876A C |  ELECTORIA_LOOP02 :            877B C |
 ELECTORIA_LOOP03 :            8796 C |  ELECTORIA_LOOP04 :            87A7 C |
 ELECTORIA_LOOP05 :            8573 C |  ELECTORIA_LOOP06 :            857C C |
 ELECTORIA_LOOP07 :            8586 C |  ELECTORIA_LOOP08 :            85A5 C |
 ELECTORIA_LOOP09 :            85AF C |  ELECTORIA_LOOP0A :            85BE C |
 ELECTORIA_LOOP0B :            84EE C |  ELECTORIA_LOOP0C :            84F8 C |
 ELECTORIA_LOOP0D :            8507 C |  ELECTORIA_LOOP0E :            8522 C |
 ELECTORIA_LOOP0F :            8536 C |  ELECTORIA_LOOP10 :            854B C |
 ELECTORIA_LOOP11 :            83E3 C |  ELECTORIA_LOOP12 :            84CA C |
 ELECTORIA_LOOP13 :            84D9 C |  ELECTORIA_LOOP14 :            80B6 C |
 ELECTORIA_LOOP15 :            8173 C |  ELECTORIA_LOOP16 :            8043 C |
 ELECTORIA_LOOP17 :            804B C |  ELECTORIA_LOOP18 :            8055 C |
 ELECTORIA_LOOP19 :            8078 C |  ELECTORIA_LOOP1A :            808E C |
 ELECTORIA_LOOP1B :            8096 C |  ELECTORIA_LOOP1C :            86FF C |
 ELECTORIA_LOOP1D :            8707 C |  ELECTORIA_LOOP1E :            8712 C |
 ELECTORIA_LOOP1F :            871D C |  ELECTORIA_LOOP20 :            8654 C |
 ELECTORIA_LOOP21 :            8663 C |  ELECTORIA_LOOP22 :            866F C |
 ELECTORIA_LOOP23 :            867C C |  ELECTORIA_LOOP24 :            8686 C |
 ELECTORIA_LOOP25 :            86A8 C |  ELECTORIA_LOOP26 :            85CD C |
 ELECTORIA_LOOP27 :            85D5 C |  ELECTORIA_LOOP28 :            85DD C |
 ELECTORIA_LOOP29 :            860C C |  ELECTORIA_LOOP2A :            8616 C |
 ELECTORIA_LOOP2B :            861E C |  ELECTORIA_LOOP2C :            8631 C |
 ELECTORIA_PSG1 :              85C9 C |  ELECTORIA_PSG2 :              864E C |
 ELECTORIA_PSG3 :              86FD C |  ELECTORIA_VOICES :            880F C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INSUPMODE :                      1 - |
*LISTON :                         3 - | *MACEXP :                         7 - |
 MOMCPU :                     68008 - | *MOMCPUNAME :               "68008" - |
*NA0 :                           8A - |  NA1 :                           96 - |
 NA2 :                           A2 - |  NA3 :                           AE - |
 NA4 :                           BA - | *NA5 :                           C6 - |
*NA6 :                           D2 - | *NA7 :                           DE - |
*NAB0 :                          89 - | *NAB1 :                          95 - |
*NAB2 :                          A1 - | *NAB3 :                          AD - |
*NAB4 :                          B9 - | *NAB5 :                          C5 - |
*NAB6 :                          D1 - | *NAB7 :                          DD - |
*NB0 :                           8C - | *NB1 :                           98 - |
 NB2 :                           A4 - |  NB3 :                           B0 - |
 NB4 :                           BC - | *NB5 :                           C8 - |
 NB6 :                           D4 - | *NBB0 :                          8B - |
*NBB1 :                          97 - | *NBB2 :                          A3 - |
 NBB3 :                          AF - | *NBB4 :                          BB - |
*NBB5 :                          C7 - |  NBB6 :                          D3 - |
*NBB7 :                          DF - | *NC0 :                           81 - |
*NC1 :                           8D - | *NC2 :                           99 - |
*NC3 :                           A5 - |  NC4 :                           B1 - |
 NC5 :                           BD - | *NC6 :                           C9 - |
*NC7 :                           D5 - | *NCS0 :                          82 - |
*NCS1 :                          8E - | *NCS2 :                          9A - |
*NCS3 :                          A6 - |  NCS4 :                          B2 - |
*NCS5 :                          BE - | *NCS6 :                          CA - |
*NCS7 :                          D6 - | *ND0 :                           83 - |
 ND1 :                           8F - |  ND2 :                           9B - |
 ND3 :                           A7 - |  ND4 :                           B3 - |
 ND5 :                           BF - | *ND6 :                           CB - |
*ND7 :                           D7 - | *NE0 :                           85 - |
 NE1 :                           91 - |  NE2 :                           9D - |
*NE3 :                           A9 - |  NE4 :                           B5 - |
*NE5 :                           C1 - | *NE6 :                           CD - |
*NE7 :                           D9 - | *NEB0 :                          84 - |
 NEB1 :                          90 - |  NEB2 :                          9C - |
 NEB3 :                          A8 - | *NEB4 :                          B4 - |
*NEB5 :                          C0 - | *NEB6 :                          CC - |
*NEB7 :                          D8 - | *NESTMAX :                      100 - |
*NF0 :                           86 - |  NF1 :                           92 - |
 NF2 :                           9E - |  NF3 :                           AA - |
 NF4 :                           B6 - | *NF5 :                           C2 - |
*NF6 :                           CE - | *NF7 :                           DA - |
*NFS0 :                          87 - |  NFS1 :                          93 - |
 NFS2 :                          9F - | *NFS3 :                          AB - |
*NFS4 :                          B7 - | *NFS5 :                          C3 - |
 NFS6 :                          CF - | *NFS7 :                          DB - |
*NG0 :                           88 - |  NG1 :                           94 - |
 NG2 :                           A0 - |  NG3 :                           AC - |
 NG4 :                           B8 - | *NG5 :                           C4 - |
*NG6 :                           D0 - | *NG7 :                           DC - |
*NMAXPSG :                       C7 - | *NMAXPSG1 :                      D3 - |
 NMAXPSG2 :                      D4 - |  NRST :                          80 - |
*PADDING :                        0 - |  PANCENTER :                     C0 - |
*PANCENTRE :                     C0 - |  PANLEFT :                       80 - |
*PANNONE :                        0 - |  PANRIGHT :                      40 - |
 PSGDELTA :                       C - | *RELAXED :                        0 - |
 SMPS2ASMVER :                    1 - |  SMPSNOATTACK :                  E7 - |
*SMPSPITCH00 :                    0 - | *SMPSPITCH01HI :                  C - |
*SMPSPITCH01LO :                 F4 - | *SMPSPITCH02HI :                 18 - |
*SMPSPITCH02LO :                 E8 - | *SMPSPITCH03HI :                 24 - |
*SMPSPITCH03LO :                 DC - | *SMPSPITCH04HI :                 30 - |
*SMPSPITCH04LO :                 D0 - | *SMPSPITCH05HI :                 3C - |
*SMPSPITCH05LO :                 C4 - | *SMPSPITCH06HI :                 48 - |
*SMPSPITCH06LO :                 B8 - | *SMPSPITCH07HI :                 54 - |
*SMPSPITCH07LO :                 AC - | *SMPSPITCH08HI :                 60 - |
*SMPSPITCH08LO :                 A0 - | *SMPSPITCH09HI :                 6C - |
*SMPSPITCH09LO :                 94 - | *SMPSPITCH10HI :                 78 - |
*SMPSPITCH10LO :                 88 - |  SONGSTART :                   8000 - |
 SONICDRIVERVER :                 3 - |  SOURCEDRIVER :                   3 - |
 SOURCESMPS2ASM :                 0 - | *STONE_01 :                       1 - |
 STONE_02 :                       2 - |  STONE_03 :                       3 - |
*STONE_04 :                       4 - |  STONE_05 :                       5 - |
 STONE_06 :                       6 - | *STONE_07 :                       7 - |
*STONE_08 :                       8 - | *STONE_09 :                       9 - |
*STONE_0A :                       A - | *STONE_0B :                       B - |
 STONE_0C :                       C - | *STONE_0D :                       D - |
*STONE_0E :                       E - | *STONE_0F :                       F - |
*STONE_10 :                      10 - | *STONE_11 :                      11 - |
 STONE_12 :                      12 - | *STONE_13 :                      13 - |
*STONE_14 :                      14 - | *STONE_15 :                      15 - |
*STONE_16 :                      16 - | *STONE_17 :                      17 - |
 STONE_18 :                      18 - | *STONE_19 :                      19 - |
*STONE_1A :                      1A - | *STONE_1B :                      1B - |
*STONE_1C :                      1C - | *STONE_1D :                      1D - |
 STONE_1E :                      1E - | *STONE_1F :                      1F - |
*STONE_20 :                      20 - | *STONE_21 :                      21 - |
*STONE_22 :                      22 - | *STONE_23 :                      23 - |
 STONE_24 :                      24 - | *STONE_25 :                      25 - |
*STONE_26 :                      26 - | *STONE_27 :                      27 - |
*TIME :                  "22:40:16" - | *TRACENUM :                       0 - |
*TRUE :                           1 - |  USE_S2_SAMPLES :                 1 - |
 USE_S3D_SAMPLES :                1 - |  USE_S3_SAMPLES :                 1 - |
 USE_SK_SAMPLES :                 1 - |  VCALGORITHM :                    1 - |
 VCAM1 :                          0 - |  VCAM2 :                          0 - |
 VCAM3 :                          0 - |  VCAM4 :                          0 - |
 VCAR1 :                         1F - |  VCAR2 :                         1F - |
 VCAR3 :                         1F - |  VCAR4 :                         1F - |
 VCCF1 :                          2 - |  VCCF2 :                          2 - |
 VCCF3 :                          2 - |  VCCF4 :                          8 - |
 VCD1R1 :                         B - |  VCD1R1UNK :                      0 - |
 VCD1R2 :                         B - |  VCD1R2UNK :                      0 - |
 VCD1R3 :                         B - |  VCD1R3UNK :                      0 - |
 VCD1R4 :                         C - |  VCD1R4UNK :                      0 - |
 VCD2R1 :                         A - |  VCD2R2 :                        10 - |
 VCD2R3 :                         8 - |  VCD2R4 :                         9 - |
 VCDL1 :                          F - |  VCDL2 :                          F - |
 VCDL3 :                          F - |  VCDL4 :                          A - |
 VCDT1 :                          1 - |  VCDT2 :                          0 - |
 VCDT3 :                          1 - |  VCDT4 :                          1 - |
 VCFEEDBACK :                     0 - |  VCRR1 :                          F - |
 VCRR2 :                          F - |  VCRR3 :                          F - |
 VCRR4 :                          F - |  VCRS1 :                          1 - |
 VCRS2 :                          1 - |  VCRS3 :                          1 - |
 VCRS4 :                          1 - |  VCTL1 :                          0 - |
 VCTL2 :                         1B - |  VCTL3 :                         23 - |
 VCTL4 :                         1D - |  VCTLMASK1 :                     80 - |
 VCTLMASK2 :                      0 - |  VCTLMASK3 :                      0 - |
 VCTLMASK4 :                      0 - |  VCUNUSEDBITS :                   1 - |
*VERSION :                     142F - |  ZEROOFFSETOPTIMIZATION :         0 - |

    423 symbols
    207 unused symbols

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 3 - 11/2/2023 22:40:16


  Defined Macros:
  ---------------

ALIGN                                 | ALIGN0                               
CHECKEDCHANNELPOINTER                 | CNOP                                 
CNOP0                                 | CONVERTMAINTEMPOMOD                  
DS                                    | EVEN                                 
INSN1OP                               | INSN2OP                              
ORG                                   | ORG0                                 
PSGPITCHCONVERT                       | SMPSALTERNATESMPS                    
SMPSALTERNOTE                         | SMPSALTERPITCH                       
SMPSALTERVOL                          | SMPSCALL                             
SMPSCHANGETRANSPOSITION               | SMPSCHANTEMPODIV                     
SMPSCLEARPUSH                         | SMPSCONDITIONALJUMP                  
SMPSCONTINUOUSLOOP                    | SMPSCOPYDATA                         
SMPSDETUNE                            | SMPSFADE                             
SMPSFM3SPECIALMODE                    | SMPSFMALTERVOL                       
SMPSFMFLUTTER                         | SMPSFMICOMMAND                       
SMPSFMVOICE                           | SMPSFMVOLENV                         
SMPSHALTMUSIC                         | SMPSHEADERCHAN                       
SMPSHEADERCHANSFX                     | SMPSHEADERDAC                        
SMPSHEADERFM                          | SMPSHEADERPSG                        
SMPSHEADERSFXCHANNEL                  | SMPSHEADERSTARTSONG                  
SMPSHEADERTEMPO                       | SMPSHEADERTEMPOSFX                   
SMPSHEADERVOICE                       | SMPSHEADERVOICENULL                  
SMPSHEADERVOICEUVB                    | SMPSJUMP                             
SMPSLOOP                              | SMPSMAXRELRATE                       
SMPSMODCHANGE                         | SMPSMODCHANGE2                       
SMPSMODOFF                            | SMPSMODON                            
SMPSMODSET                            | SMPSNOP                              
SMPSNOTEFILL                          | SMPSPAN                              
SMPSPLAYDACSAMPLE                     | SMPSPLAYSOUND                        
SMPSPSGALTERVOL                       | SMPSPSGFORM                          
SMPSPSGVOICE                          | SMPSRESETSPINDASHREV                 
SMPSRETURN                            | SMPSSETNOTE                          
SMPSSETTEMPODIV                       | SMPSSETTEMPOMOD                      
SMPSSETVOICE                          | SMPSSETVOL                           
SMPSSPINDASHREV                       | SMPSSSGEG                            
SMPSSTOP                              | SMPSSTOPFM                           
SMPSSTOPSPECIAL                       | SMPSVCALGORITHM                      
SMPSVCAMPMOD                          | SMPSVCATTACKRATE                     
SMPSVCCOARSEFREQ                      | SMPSVCDECAYLEVEL                     
SMPSVCDECAYRATE1                      | SMPSVCDECAYRATE2                     
SMPSVCDETUNE                          | SMPSVCFEEDBACK                       
SMPSVCRATESCALE                       | SMPSVCRELEASERATE                    
SMPSVCTOTALLEVEL                      | SMPSVCUNUSEDBITS                     
SMPSWEIRDD1LRR                        | STARTZ80                             
STOPZ80                               | TRACE                                
WAITZ80                               | _ADD                                 
_ADDQ                                 | _CLR                                 
_CMP                                  | _CMPI                                
_MOVE                                 | _TST                                 

     98 macros

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 4 - 11/2/2023 22:40:16


  Defined Functions:
  ------------------

S3TEMPOTOS2                           | S3TEMPOTOS1                          
S1TEMPOTOS3                           | S1TEMPOTOS2                          
S2TEMPOTOS3                           | S2TEMPOTOS1                          
CONV0TO256                            | SIGNEXTENDB                          
SIGNEXTEND                            | SIGNMASK                             
BIT                                   | CHKOP                                
NOTZ80                                | Z80_PTR                              

 AS V1.42 Beta [Bld 251] - Source File Music.asm - Page 5 - 11/2/2023 22:40:16


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.08 seconds assembly time

   2079 lines source file
   5528 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
